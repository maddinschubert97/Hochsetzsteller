
Hochsetzsteller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004fd0  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08005158  08005158  00015158  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800518c  0800518c  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  0800518c  0800518c  0001518c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005194  08005194  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005194  08005194  00015194  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005198  08005198  00015198  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  0800519c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000324  20000020  080051b8  00020020  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000344  080051b8  00020344  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bc95  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ab2  00000000  00000000  0002bce1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b30  00000000  00000000  0002d798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a68  00000000  00000000  0002e2c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000210d1  00000000  00000000  0002ed30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c5c6  00000000  00000000  0004fe01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d0c91  00000000  00000000  0005c3c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012d058  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030d4  00000000  00000000  0012d0ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000020 	.word	0x20000020
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005140 	.word	0x08005140

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000024 	.word	0x20000024
 80001c4:	08005140 	.word	0x08005140

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2iz>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a7c:	d215      	bcs.n	8000aaa <__aeabi_d2iz+0x36>
 8000a7e:	d511      	bpl.n	8000aa4 <__aeabi_d2iz+0x30>
 8000a80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d912      	bls.n	8000ab0 <__aeabi_d2iz+0x3c>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d105      	bne.n	8000abc <__aeabi_d2iz+0x48>
 8000ab0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ab4:	bf08      	it	eq
 8000ab6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2uiz>:
 8000ac4:	004a      	lsls	r2, r1, #1
 8000ac6:	d211      	bcs.n	8000aec <__aeabi_d2uiz+0x28>
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000acc:	d211      	bcs.n	8000af2 <__aeabi_d2uiz+0x2e>
 8000ace:	d50d      	bpl.n	8000aec <__aeabi_d2uiz+0x28>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d40e      	bmi.n	8000af8 <__aeabi_d2uiz+0x34>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aea:	4770      	bx	lr
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af6:	d102      	bne.n	8000afe <__aeabi_d2uiz+0x3a>
 8000af8:	f04f 30ff 	mov.w	r0, #4294967295
 8000afc:	4770      	bx	lr
 8000afe:	f04f 0000 	mov.w	r0, #0
 8000b02:	4770      	bx	lr

08000b04 <__aeabi_uldivmod>:
 8000b04:	b953      	cbnz	r3, 8000b1c <__aeabi_uldivmod+0x18>
 8000b06:	b94a      	cbnz	r2, 8000b1c <__aeabi_uldivmod+0x18>
 8000b08:	2900      	cmp	r1, #0
 8000b0a:	bf08      	it	eq
 8000b0c:	2800      	cmpeq	r0, #0
 8000b0e:	bf1c      	itt	ne
 8000b10:	f04f 31ff 	movne.w	r1, #4294967295
 8000b14:	f04f 30ff 	movne.w	r0, #4294967295
 8000b18:	f000 b96e 	b.w	8000df8 <__aeabi_idiv0>
 8000b1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b24:	f000 f806 	bl	8000b34 <__udivmoddi4>
 8000b28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b30:	b004      	add	sp, #16
 8000b32:	4770      	bx	lr

08000b34 <__udivmoddi4>:
 8000b34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b38:	9d08      	ldr	r5, [sp, #32]
 8000b3a:	4604      	mov	r4, r0
 8000b3c:	468c      	mov	ip, r1
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	f040 8083 	bne.w	8000c4a <__udivmoddi4+0x116>
 8000b44:	428a      	cmp	r2, r1
 8000b46:	4617      	mov	r7, r2
 8000b48:	d947      	bls.n	8000bda <__udivmoddi4+0xa6>
 8000b4a:	fab2 f282 	clz	r2, r2
 8000b4e:	b142      	cbz	r2, 8000b62 <__udivmoddi4+0x2e>
 8000b50:	f1c2 0020 	rsb	r0, r2, #32
 8000b54:	fa24 f000 	lsr.w	r0, r4, r0
 8000b58:	4091      	lsls	r1, r2
 8000b5a:	4097      	lsls	r7, r2
 8000b5c:	ea40 0c01 	orr.w	ip, r0, r1
 8000b60:	4094      	lsls	r4, r2
 8000b62:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b66:	0c23      	lsrs	r3, r4, #16
 8000b68:	fbbc f6f8 	udiv	r6, ip, r8
 8000b6c:	fa1f fe87 	uxth.w	lr, r7
 8000b70:	fb08 c116 	mls	r1, r8, r6, ip
 8000b74:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b78:	fb06 f10e 	mul.w	r1, r6, lr
 8000b7c:	4299      	cmp	r1, r3
 8000b7e:	d909      	bls.n	8000b94 <__udivmoddi4+0x60>
 8000b80:	18fb      	adds	r3, r7, r3
 8000b82:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b86:	f080 8119 	bcs.w	8000dbc <__udivmoddi4+0x288>
 8000b8a:	4299      	cmp	r1, r3
 8000b8c:	f240 8116 	bls.w	8000dbc <__udivmoddi4+0x288>
 8000b90:	3e02      	subs	r6, #2
 8000b92:	443b      	add	r3, r7
 8000b94:	1a5b      	subs	r3, r3, r1
 8000b96:	b2a4      	uxth	r4, r4
 8000b98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b9c:	fb08 3310 	mls	r3, r8, r0, r3
 8000ba0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ba4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ba8:	45a6      	cmp	lr, r4
 8000baa:	d909      	bls.n	8000bc0 <__udivmoddi4+0x8c>
 8000bac:	193c      	adds	r4, r7, r4
 8000bae:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bb2:	f080 8105 	bcs.w	8000dc0 <__udivmoddi4+0x28c>
 8000bb6:	45a6      	cmp	lr, r4
 8000bb8:	f240 8102 	bls.w	8000dc0 <__udivmoddi4+0x28c>
 8000bbc:	3802      	subs	r0, #2
 8000bbe:	443c      	add	r4, r7
 8000bc0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bc4:	eba4 040e 	sub.w	r4, r4, lr
 8000bc8:	2600      	movs	r6, #0
 8000bca:	b11d      	cbz	r5, 8000bd4 <__udivmoddi4+0xa0>
 8000bcc:	40d4      	lsrs	r4, r2
 8000bce:	2300      	movs	r3, #0
 8000bd0:	e9c5 4300 	strd	r4, r3, [r5]
 8000bd4:	4631      	mov	r1, r6
 8000bd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bda:	b902      	cbnz	r2, 8000bde <__udivmoddi4+0xaa>
 8000bdc:	deff      	udf	#255	; 0xff
 8000bde:	fab2 f282 	clz	r2, r2
 8000be2:	2a00      	cmp	r2, #0
 8000be4:	d150      	bne.n	8000c88 <__udivmoddi4+0x154>
 8000be6:	1bcb      	subs	r3, r1, r7
 8000be8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bec:	fa1f f887 	uxth.w	r8, r7
 8000bf0:	2601      	movs	r6, #1
 8000bf2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000bf6:	0c21      	lsrs	r1, r4, #16
 8000bf8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000bfc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c00:	fb08 f30c 	mul.w	r3, r8, ip
 8000c04:	428b      	cmp	r3, r1
 8000c06:	d907      	bls.n	8000c18 <__udivmoddi4+0xe4>
 8000c08:	1879      	adds	r1, r7, r1
 8000c0a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c0e:	d202      	bcs.n	8000c16 <__udivmoddi4+0xe2>
 8000c10:	428b      	cmp	r3, r1
 8000c12:	f200 80e9 	bhi.w	8000de8 <__udivmoddi4+0x2b4>
 8000c16:	4684      	mov	ip, r0
 8000c18:	1ac9      	subs	r1, r1, r3
 8000c1a:	b2a3      	uxth	r3, r4
 8000c1c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c20:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c24:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c28:	fb08 f800 	mul.w	r8, r8, r0
 8000c2c:	45a0      	cmp	r8, r4
 8000c2e:	d907      	bls.n	8000c40 <__udivmoddi4+0x10c>
 8000c30:	193c      	adds	r4, r7, r4
 8000c32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c36:	d202      	bcs.n	8000c3e <__udivmoddi4+0x10a>
 8000c38:	45a0      	cmp	r8, r4
 8000c3a:	f200 80d9 	bhi.w	8000df0 <__udivmoddi4+0x2bc>
 8000c3e:	4618      	mov	r0, r3
 8000c40:	eba4 0408 	sub.w	r4, r4, r8
 8000c44:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c48:	e7bf      	b.n	8000bca <__udivmoddi4+0x96>
 8000c4a:	428b      	cmp	r3, r1
 8000c4c:	d909      	bls.n	8000c62 <__udivmoddi4+0x12e>
 8000c4e:	2d00      	cmp	r5, #0
 8000c50:	f000 80b1 	beq.w	8000db6 <__udivmoddi4+0x282>
 8000c54:	2600      	movs	r6, #0
 8000c56:	e9c5 0100 	strd	r0, r1, [r5]
 8000c5a:	4630      	mov	r0, r6
 8000c5c:	4631      	mov	r1, r6
 8000c5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c62:	fab3 f683 	clz	r6, r3
 8000c66:	2e00      	cmp	r6, #0
 8000c68:	d14a      	bne.n	8000d00 <__udivmoddi4+0x1cc>
 8000c6a:	428b      	cmp	r3, r1
 8000c6c:	d302      	bcc.n	8000c74 <__udivmoddi4+0x140>
 8000c6e:	4282      	cmp	r2, r0
 8000c70:	f200 80b8 	bhi.w	8000de4 <__udivmoddi4+0x2b0>
 8000c74:	1a84      	subs	r4, r0, r2
 8000c76:	eb61 0103 	sbc.w	r1, r1, r3
 8000c7a:	2001      	movs	r0, #1
 8000c7c:	468c      	mov	ip, r1
 8000c7e:	2d00      	cmp	r5, #0
 8000c80:	d0a8      	beq.n	8000bd4 <__udivmoddi4+0xa0>
 8000c82:	e9c5 4c00 	strd	r4, ip, [r5]
 8000c86:	e7a5      	b.n	8000bd4 <__udivmoddi4+0xa0>
 8000c88:	f1c2 0320 	rsb	r3, r2, #32
 8000c8c:	fa20 f603 	lsr.w	r6, r0, r3
 8000c90:	4097      	lsls	r7, r2
 8000c92:	fa01 f002 	lsl.w	r0, r1, r2
 8000c96:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c9a:	40d9      	lsrs	r1, r3
 8000c9c:	4330      	orrs	r0, r6
 8000c9e:	0c03      	lsrs	r3, r0, #16
 8000ca0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ca4:	fa1f f887 	uxth.w	r8, r7
 8000ca8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000cac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cb0:	fb06 f108 	mul.w	r1, r6, r8
 8000cb4:	4299      	cmp	r1, r3
 8000cb6:	fa04 f402 	lsl.w	r4, r4, r2
 8000cba:	d909      	bls.n	8000cd0 <__udivmoddi4+0x19c>
 8000cbc:	18fb      	adds	r3, r7, r3
 8000cbe:	f106 3cff 	add.w	ip, r6, #4294967295
 8000cc2:	f080 808d 	bcs.w	8000de0 <__udivmoddi4+0x2ac>
 8000cc6:	4299      	cmp	r1, r3
 8000cc8:	f240 808a 	bls.w	8000de0 <__udivmoddi4+0x2ac>
 8000ccc:	3e02      	subs	r6, #2
 8000cce:	443b      	add	r3, r7
 8000cd0:	1a5b      	subs	r3, r3, r1
 8000cd2:	b281      	uxth	r1, r0
 8000cd4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cd8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cdc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ce0:	fb00 f308 	mul.w	r3, r0, r8
 8000ce4:	428b      	cmp	r3, r1
 8000ce6:	d907      	bls.n	8000cf8 <__udivmoddi4+0x1c4>
 8000ce8:	1879      	adds	r1, r7, r1
 8000cea:	f100 3cff 	add.w	ip, r0, #4294967295
 8000cee:	d273      	bcs.n	8000dd8 <__udivmoddi4+0x2a4>
 8000cf0:	428b      	cmp	r3, r1
 8000cf2:	d971      	bls.n	8000dd8 <__udivmoddi4+0x2a4>
 8000cf4:	3802      	subs	r0, #2
 8000cf6:	4439      	add	r1, r7
 8000cf8:	1acb      	subs	r3, r1, r3
 8000cfa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000cfe:	e778      	b.n	8000bf2 <__udivmoddi4+0xbe>
 8000d00:	f1c6 0c20 	rsb	ip, r6, #32
 8000d04:	fa03 f406 	lsl.w	r4, r3, r6
 8000d08:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d0c:	431c      	orrs	r4, r3
 8000d0e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d12:	fa01 f306 	lsl.w	r3, r1, r6
 8000d16:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d1a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d1e:	431f      	orrs	r7, r3
 8000d20:	0c3b      	lsrs	r3, r7, #16
 8000d22:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d26:	fa1f f884 	uxth.w	r8, r4
 8000d2a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d2e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d32:	fb09 fa08 	mul.w	sl, r9, r8
 8000d36:	458a      	cmp	sl, r1
 8000d38:	fa02 f206 	lsl.w	r2, r2, r6
 8000d3c:	fa00 f306 	lsl.w	r3, r0, r6
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0x220>
 8000d42:	1861      	adds	r1, r4, r1
 8000d44:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d48:	d248      	bcs.n	8000ddc <__udivmoddi4+0x2a8>
 8000d4a:	458a      	cmp	sl, r1
 8000d4c:	d946      	bls.n	8000ddc <__udivmoddi4+0x2a8>
 8000d4e:	f1a9 0902 	sub.w	r9, r9, #2
 8000d52:	4421      	add	r1, r4
 8000d54:	eba1 010a 	sub.w	r1, r1, sl
 8000d58:	b2bf      	uxth	r7, r7
 8000d5a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d5e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d62:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d66:	fb00 f808 	mul.w	r8, r0, r8
 8000d6a:	45b8      	cmp	r8, r7
 8000d6c:	d907      	bls.n	8000d7e <__udivmoddi4+0x24a>
 8000d6e:	19e7      	adds	r7, r4, r7
 8000d70:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d74:	d22e      	bcs.n	8000dd4 <__udivmoddi4+0x2a0>
 8000d76:	45b8      	cmp	r8, r7
 8000d78:	d92c      	bls.n	8000dd4 <__udivmoddi4+0x2a0>
 8000d7a:	3802      	subs	r0, #2
 8000d7c:	4427      	add	r7, r4
 8000d7e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d82:	eba7 0708 	sub.w	r7, r7, r8
 8000d86:	fba0 8902 	umull	r8, r9, r0, r2
 8000d8a:	454f      	cmp	r7, r9
 8000d8c:	46c6      	mov	lr, r8
 8000d8e:	4649      	mov	r1, r9
 8000d90:	d31a      	bcc.n	8000dc8 <__udivmoddi4+0x294>
 8000d92:	d017      	beq.n	8000dc4 <__udivmoddi4+0x290>
 8000d94:	b15d      	cbz	r5, 8000dae <__udivmoddi4+0x27a>
 8000d96:	ebb3 020e 	subs.w	r2, r3, lr
 8000d9a:	eb67 0701 	sbc.w	r7, r7, r1
 8000d9e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000da2:	40f2      	lsrs	r2, r6
 8000da4:	ea4c 0202 	orr.w	r2, ip, r2
 8000da8:	40f7      	lsrs	r7, r6
 8000daa:	e9c5 2700 	strd	r2, r7, [r5]
 8000dae:	2600      	movs	r6, #0
 8000db0:	4631      	mov	r1, r6
 8000db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db6:	462e      	mov	r6, r5
 8000db8:	4628      	mov	r0, r5
 8000dba:	e70b      	b.n	8000bd4 <__udivmoddi4+0xa0>
 8000dbc:	4606      	mov	r6, r0
 8000dbe:	e6e9      	b.n	8000b94 <__udivmoddi4+0x60>
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	e6fd      	b.n	8000bc0 <__udivmoddi4+0x8c>
 8000dc4:	4543      	cmp	r3, r8
 8000dc6:	d2e5      	bcs.n	8000d94 <__udivmoddi4+0x260>
 8000dc8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000dcc:	eb69 0104 	sbc.w	r1, r9, r4
 8000dd0:	3801      	subs	r0, #1
 8000dd2:	e7df      	b.n	8000d94 <__udivmoddi4+0x260>
 8000dd4:	4608      	mov	r0, r1
 8000dd6:	e7d2      	b.n	8000d7e <__udivmoddi4+0x24a>
 8000dd8:	4660      	mov	r0, ip
 8000dda:	e78d      	b.n	8000cf8 <__udivmoddi4+0x1c4>
 8000ddc:	4681      	mov	r9, r0
 8000dde:	e7b9      	b.n	8000d54 <__udivmoddi4+0x220>
 8000de0:	4666      	mov	r6, ip
 8000de2:	e775      	b.n	8000cd0 <__udivmoddi4+0x19c>
 8000de4:	4630      	mov	r0, r6
 8000de6:	e74a      	b.n	8000c7e <__udivmoddi4+0x14a>
 8000de8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dec:	4439      	add	r1, r7
 8000dee:	e713      	b.n	8000c18 <__udivmoddi4+0xe4>
 8000df0:	3802      	subs	r0, #2
 8000df2:	443c      	add	r4, r7
 8000df4:	e724      	b.n	8000c40 <__udivmoddi4+0x10c>
 8000df6:	bf00      	nop

08000df8 <__aeabi_idiv0>:
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	0000      	movs	r0, r0
	...

08000e00 <init>:
const uint16_t branches=8;
double U_in;
const uint16_t safety_dist=10;		//1 Zeitschritt bei 168MHz entspricht ~6ns

void init()
{
 8000e00:	b598      	push	{r3, r4, r7, lr}
 8000e02:	af00      	add	r7, sp, #0
	U_in=value_adc1[1]*720/4095;
 8000e04:	4b30      	ldr	r3, [pc, #192]	; (8000ec8 <init+0xc8>)
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 8000e0c:	fb02 f203 	mul.w	r2, r2, r3
 8000e10:	4b2e      	ldr	r3, [pc, #184]	; (8000ecc <init+0xcc>)
 8000e12:	fba3 1302 	umull	r1, r3, r3, r2
 8000e16:	1ad2      	subs	r2, r2, r3
 8000e18:	0852      	lsrs	r2, r2, #1
 8000e1a:	4413      	add	r3, r2
 8000e1c:	0adb      	lsrs	r3, r3, #11
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f7ff fb14 	bl	800044c <__aeabi_ui2d>
 8000e24:	4602      	mov	r2, r0
 8000e26:	460b      	mov	r3, r1
 8000e28:	4929      	ldr	r1, [pc, #164]	; (8000ed0 <init+0xd0>)
 8000e2a:	e9c1 2300 	strd	r2, r3, [r1]
	//a=1-U_soll/U_in;	//Annahme nichtlückender Betrieb
	if(a<0)
 8000e2e:	4b29      	ldr	r3, [pc, #164]	; (8000ed4 <init+0xd4>)
 8000e30:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000e34:	f04f 0200 	mov.w	r2, #0
 8000e38:	f04f 0300 	mov.w	r3, #0
 8000e3c:	f7ff fdf2 	bl	8000a24 <__aeabi_dcmplt>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d007      	beq.n	8000e56 <init+0x56>
		a=0;
 8000e46:	4923      	ldr	r1, [pc, #140]	; (8000ed4 <init+0xd4>)
 8000e48:	f04f 0200 	mov.w	r2, #0
 8000e4c:	f04f 0300 	mov.w	r3, #0
 8000e50:	e9c1 2300 	strd	r2, r3, [r1]
 8000e54:	e010      	b.n	8000e78 <init+0x78>
	else if(a>0.95)
 8000e56:	4b1f      	ldr	r3, [pc, #124]	; (8000ed4 <init+0xd4>)
 8000e58:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000e5c:	a318      	add	r3, pc, #96	; (adr r3, 8000ec0 <init+0xc0>)
 8000e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e62:	f7ff fdfd 	bl	8000a60 <__aeabi_dcmpgt>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d005      	beq.n	8000e78 <init+0x78>
		a=0.95;
 8000e6c:	4919      	ldr	r1, [pc, #100]	; (8000ed4 <init+0xd4>)
 8000e6e:	a314      	add	r3, pc, #80	; (adr r3, 8000ec0 <init+0xc0>)
 8000e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e74:	e9c1 2300 	strd	r2, r3, [r1]
	TIM1->CCR1=0;	//evtl beim UG interrupt
 8000e78:	4b17      	ldr	r3, [pc, #92]	; (8000ed8 <init+0xd8>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2=a*TIM1->ARR;
 8000e7e:	4b16      	ldr	r3, [pc, #88]	; (8000ed8 <init+0xd8>)
 8000e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e82:	4618      	mov	r0, r3
 8000e84:	f7ff fae2 	bl	800044c <__aeabi_ui2d>
 8000e88:	4b12      	ldr	r3, [pc, #72]	; (8000ed4 <init+0xd4>)
 8000e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e8e:	f7ff fb57 	bl	8000540 <__aeabi_dmul>
 8000e92:	4602      	mov	r2, r0
 8000e94:	460b      	mov	r3, r1
 8000e96:	4c10      	ldr	r4, [pc, #64]	; (8000ed8 <init+0xd8>)
 8000e98:	4610      	mov	r0, r2
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	f7ff fe12 	bl	8000ac4 <__aeabi_d2uiz>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	63a3      	str	r3, [r4, #56]	; 0x38
		//a im Timer einstellen
	HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	480d      	ldr	r0, [pc, #52]	; (8000edc <init+0xdc>)
 8000ea8:	f003 f8f8 	bl	800409c <HAL_TIM_OC_Start_IT>
	HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_2);
 8000eac:	2104      	movs	r1, #4
 8000eae:	480b      	ldr	r0, [pc, #44]	; (8000edc <init+0xdc>)
 8000eb0:	f003 f8f4 	bl	800409c <HAL_TIM_OC_Start_IT>
	//HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_3);
	//HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_4);
	HAL_TIM_OC_Start_IT(&htim4, TIM_CHANNEL_1);
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	480a      	ldr	r0, [pc, #40]	; (8000ee0 <init+0xe0>)
 8000eb8:	f003 f8f0 	bl	800409c <HAL_TIM_OC_Start_IT>
}
 8000ebc:	bf00      	nop
 8000ebe:	bd98      	pop	{r3, r4, r7, pc}
 8000ec0:	66666666 	.word	0x66666666
 8000ec4:	3fee6666 	.word	0x3fee6666
 8000ec8:	20000278 	.word	0x20000278
 8000ecc:	00100101 	.word	0x00100101
 8000ed0:	20000118 	.word	0x20000118
 8000ed4:	20000000 	.word	0x20000000
 8000ed8:	40010000 	.word	0x40010000
 8000edc:	20000280 	.word	0x20000280
 8000ee0:	20000088 	.word	0x20000088

08000ee4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ee8:	f001 f960 	bl	80021ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eec:	f000 f82e 	bl	8000f4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ef0:	f000 fbca 	bl	8001688 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ef4:	f000 fb98 	bl	8001628 <MX_DMA_Init>
  MX_ADC1_Init();
 8000ef8:	f000 f892 	bl	8001020 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000efc:	f000 f8f0 	bl	80010e0 <MX_ADC2_Init>
  MX_ADC3_Init();
 8000f00:	f000 f94e 	bl	80011a0 <MX_ADC3_Init>
  MX_TIM1_Init();
 8000f04:	f000 f9ac 	bl	8001260 <MX_TIM1_Init>
  MX_TIM4_Init();
 8000f08:	f000 fa6c 	bl	80013e4 <MX_TIM4_Init>
  MX_TIM8_Init();
 8000f0c:	f000 fade 	bl	80014cc <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1,value_adc1,2);
 8000f10:	2202      	movs	r2, #2
 8000f12:	4908      	ldr	r1, [pc, #32]	; (8000f34 <main+0x50>)
 8000f14:	4808      	ldr	r0, [pc, #32]	; (8000f38 <main+0x54>)
 8000f16:	f001 f9ff 	bl	8002318 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc2,value_adc2,2);
 8000f1a:	2202      	movs	r2, #2
 8000f1c:	4907      	ldr	r1, [pc, #28]	; (8000f3c <main+0x58>)
 8000f1e:	4808      	ldr	r0, [pc, #32]	; (8000f40 <main+0x5c>)
 8000f20:	f001 f9fa 	bl	8002318 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc3,value_adc3,2);
 8000f24:	2202      	movs	r2, #2
 8000f26:	4907      	ldr	r1, [pc, #28]	; (8000f44 <main+0x60>)
 8000f28:	4807      	ldr	r0, [pc, #28]	; (8000f48 <main+0x64>)
 8000f2a:	f001 f9f5 	bl	8002318 <HAL_ADC_Start_DMA>
  init();
 8000f2e:	f7ff ff67 	bl	8000e00 <init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f32:	e7fe      	b.n	8000f32 <main+0x4e>
 8000f34:	20000278 	.word	0x20000278
 8000f38:	20000188 	.word	0x20000188
 8000f3c:	20000328 	.word	0x20000328
 8000f40:	200000d0 	.word	0x200000d0
 8000f44:	20000120 	.word	0x20000120
 8000f48:	200001d0 	.word	0x200001d0

08000f4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b094      	sub	sp, #80	; 0x50
 8000f50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f52:	f107 0320 	add.w	r3, r7, #32
 8000f56:	2230      	movs	r2, #48	; 0x30
 8000f58:	2100      	movs	r1, #0
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f004 f8e8 	bl	8005130 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f60:	f107 030c 	add.w	r3, r7, #12
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	605a      	str	r2, [r3, #4]
 8000f6a:	609a      	str	r2, [r3, #8]
 8000f6c:	60da      	str	r2, [r3, #12]
 8000f6e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f70:	2300      	movs	r3, #0
 8000f72:	60bb      	str	r3, [r7, #8]
 8000f74:	4b28      	ldr	r3, [pc, #160]	; (8001018 <SystemClock_Config+0xcc>)
 8000f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f78:	4a27      	ldr	r2, [pc, #156]	; (8001018 <SystemClock_Config+0xcc>)
 8000f7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f7e:	6413      	str	r3, [r2, #64]	; 0x40
 8000f80:	4b25      	ldr	r3, [pc, #148]	; (8001018 <SystemClock_Config+0xcc>)
 8000f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f88:	60bb      	str	r3, [r7, #8]
 8000f8a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	607b      	str	r3, [r7, #4]
 8000f90:	4b22      	ldr	r3, [pc, #136]	; (800101c <SystemClock_Config+0xd0>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a21      	ldr	r2, [pc, #132]	; (800101c <SystemClock_Config+0xd0>)
 8000f96:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f9a:	6013      	str	r3, [r2, #0]
 8000f9c:	4b1f      	ldr	r3, [pc, #124]	; (800101c <SystemClock_Config+0xd0>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fa4:	607b      	str	r3, [r7, #4]
 8000fa6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fa8:	2302      	movs	r3, #2
 8000faa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fac:	2301      	movs	r3, #1
 8000fae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fb0:	2310      	movs	r3, #16
 8000fb2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000fbc:	2310      	movs	r3, #16
 8000fbe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000fc0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000fc4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000fca:	2304      	movs	r3, #4
 8000fcc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fce:	f107 0320 	add.w	r3, r7, #32
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f002 fba6 	bl	8003724 <HAL_RCC_OscConfig>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000fde:	f000 fbbd 	bl	800175c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fe2:	230f      	movs	r3, #15
 8000fe4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fea:	2300      	movs	r3, #0
 8000fec:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000fee:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ff2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ff4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ff8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ffa:	f107 030c 	add.w	r3, r7, #12
 8000ffe:	2105      	movs	r1, #5
 8001000:	4618      	mov	r0, r3
 8001002:	f002 fe07 	bl	8003c14 <HAL_RCC_ClockConfig>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800100c:	f000 fba6 	bl	800175c <Error_Handler>
  }
}
 8001010:	bf00      	nop
 8001012:	3750      	adds	r7, #80	; 0x50
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	40023800 	.word	0x40023800
 800101c:	40007000 	.word	0x40007000

08001020 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001026:	463b      	mov	r3, r7
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
 800102c:	605a      	str	r2, [r3, #4]
 800102e:	609a      	str	r2, [r3, #8]
 8001030:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001032:	4b28      	ldr	r3, [pc, #160]	; (80010d4 <MX_ADC1_Init+0xb4>)
 8001034:	4a28      	ldr	r2, [pc, #160]	; (80010d8 <MX_ADC1_Init+0xb8>)
 8001036:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 8001038:	4b26      	ldr	r3, [pc, #152]	; (80010d4 <MX_ADC1_Init+0xb4>)
 800103a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800103e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001040:	4b24      	ldr	r3, [pc, #144]	; (80010d4 <MX_ADC1_Init+0xb4>)
 8001042:	2200      	movs	r2, #0
 8001044:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001046:	4b23      	ldr	r3, [pc, #140]	; (80010d4 <MX_ADC1_Init+0xb4>)
 8001048:	2201      	movs	r2, #1
 800104a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800104c:	4b21      	ldr	r3, [pc, #132]	; (80010d4 <MX_ADC1_Init+0xb4>)
 800104e:	2201      	movs	r2, #1
 8001050:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001052:	4b20      	ldr	r3, [pc, #128]	; (80010d4 <MX_ADC1_Init+0xb4>)
 8001054:	2200      	movs	r2, #0
 8001056:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800105a:	4b1e      	ldr	r3, [pc, #120]	; (80010d4 <MX_ADC1_Init+0xb4>)
 800105c:	2200      	movs	r2, #0
 800105e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001060:	4b1c      	ldr	r3, [pc, #112]	; (80010d4 <MX_ADC1_Init+0xb4>)
 8001062:	4a1e      	ldr	r2, [pc, #120]	; (80010dc <MX_ADC1_Init+0xbc>)
 8001064:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001066:	4b1b      	ldr	r3, [pc, #108]	; (80010d4 <MX_ADC1_Init+0xb4>)
 8001068:	2200      	movs	r2, #0
 800106a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 800106c:	4b19      	ldr	r3, [pc, #100]	; (80010d4 <MX_ADC1_Init+0xb4>)
 800106e:	2202      	movs	r2, #2
 8001070:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001072:	4b18      	ldr	r3, [pc, #96]	; (80010d4 <MX_ADC1_Init+0xb4>)
 8001074:	2201      	movs	r2, #1
 8001076:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800107a:	4b16      	ldr	r3, [pc, #88]	; (80010d4 <MX_ADC1_Init+0xb4>)
 800107c:	2201      	movs	r2, #1
 800107e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001080:	4814      	ldr	r0, [pc, #80]	; (80010d4 <MX_ADC1_Init+0xb4>)
 8001082:	f001 f905 	bl	8002290 <HAL_ADC_Init>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800108c:	f000 fb66 	bl	800175c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001090:	2309      	movs	r3, #9
 8001092:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001094:	2301      	movs	r3, #1
 8001096:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001098:	2300      	movs	r3, #0
 800109a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800109c:	463b      	mov	r3, r7
 800109e:	4619      	mov	r1, r3
 80010a0:	480c      	ldr	r0, [pc, #48]	; (80010d4 <MX_ADC1_Init+0xb4>)
 80010a2:	f001 fa67 	bl	8002574 <HAL_ADC_ConfigChannel>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80010ac:	f000 fb56 	bl	800175c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80010b0:	2308      	movs	r3, #8
 80010b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80010b4:	2302      	movs	r3, #2
 80010b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010b8:	463b      	mov	r3, r7
 80010ba:	4619      	mov	r1, r3
 80010bc:	4805      	ldr	r0, [pc, #20]	; (80010d4 <MX_ADC1_Init+0xb4>)
 80010be:	f001 fa59 	bl	8002574 <HAL_ADC_ConfigChannel>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80010c8:	f000 fb48 	bl	800175c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010cc:	bf00      	nop
 80010ce:	3710      	adds	r7, #16
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	20000188 	.word	0x20000188
 80010d8:	40012000 	.word	0x40012000
 80010dc:	0f000001 	.word	0x0f000001

080010e0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010e6:	463b      	mov	r3, r7
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	605a      	str	r2, [r3, #4]
 80010ee:	609a      	str	r2, [r3, #8]
 80010f0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80010f2:	4b28      	ldr	r3, [pc, #160]	; (8001194 <MX_ADC2_Init+0xb4>)
 80010f4:	4a28      	ldr	r2, [pc, #160]	; (8001198 <MX_ADC2_Init+0xb8>)
 80010f6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 80010f8:	4b26      	ldr	r3, [pc, #152]	; (8001194 <MX_ADC2_Init+0xb4>)
 80010fa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80010fe:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001100:	4b24      	ldr	r3, [pc, #144]	; (8001194 <MX_ADC2_Init+0xb4>)
 8001102:	2200      	movs	r2, #0
 8001104:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8001106:	4b23      	ldr	r3, [pc, #140]	; (8001194 <MX_ADC2_Init+0xb4>)
 8001108:	2201      	movs	r2, #1
 800110a:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 800110c:	4b21      	ldr	r3, [pc, #132]	; (8001194 <MX_ADC2_Init+0xb4>)
 800110e:	2201      	movs	r2, #1
 8001110:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001112:	4b20      	ldr	r3, [pc, #128]	; (8001194 <MX_ADC2_Init+0xb4>)
 8001114:	2200      	movs	r2, #0
 8001116:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800111a:	4b1e      	ldr	r3, [pc, #120]	; (8001194 <MX_ADC2_Init+0xb4>)
 800111c:	2200      	movs	r2, #0
 800111e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001120:	4b1c      	ldr	r3, [pc, #112]	; (8001194 <MX_ADC2_Init+0xb4>)
 8001122:	4a1e      	ldr	r2, [pc, #120]	; (800119c <MX_ADC2_Init+0xbc>)
 8001124:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001126:	4b1b      	ldr	r3, [pc, #108]	; (8001194 <MX_ADC2_Init+0xb4>)
 8001128:	2200      	movs	r2, #0
 800112a:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 2;
 800112c:	4b19      	ldr	r3, [pc, #100]	; (8001194 <MX_ADC2_Init+0xb4>)
 800112e:	2202      	movs	r2, #2
 8001130:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8001132:	4b18      	ldr	r3, [pc, #96]	; (8001194 <MX_ADC2_Init+0xb4>)
 8001134:	2201      	movs	r2, #1
 8001136:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800113a:	4b16      	ldr	r3, [pc, #88]	; (8001194 <MX_ADC2_Init+0xb4>)
 800113c:	2201      	movs	r2, #1
 800113e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001140:	4814      	ldr	r0, [pc, #80]	; (8001194 <MX_ADC2_Init+0xb4>)
 8001142:	f001 f8a5 	bl	8002290 <HAL_ADC_Init>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 800114c:	f000 fb06 	bl	800175c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001150:	2305      	movs	r3, #5
 8001152:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001154:	2301      	movs	r3, #1
 8001156:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001158:	2300      	movs	r3, #0
 800115a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800115c:	463b      	mov	r3, r7
 800115e:	4619      	mov	r1, r3
 8001160:	480c      	ldr	r0, [pc, #48]	; (8001194 <MX_ADC2_Init+0xb4>)
 8001162:	f001 fa07 	bl	8002574 <HAL_ADC_ConfigChannel>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 800116c:	f000 faf6 	bl	800175c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001170:	2304      	movs	r3, #4
 8001172:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001174:	2302      	movs	r3, #2
 8001176:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001178:	463b      	mov	r3, r7
 800117a:	4619      	mov	r1, r3
 800117c:	4805      	ldr	r0, [pc, #20]	; (8001194 <MX_ADC2_Init+0xb4>)
 800117e:	f001 f9f9 	bl	8002574 <HAL_ADC_ConfigChannel>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8001188:	f000 fae8 	bl	800175c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800118c:	bf00      	nop
 800118e:	3710      	adds	r7, #16
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	200000d0 	.word	0x200000d0
 8001198:	40012100 	.word	0x40012100
 800119c:	0f000001 	.word	0x0f000001

080011a0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011a6:	463b      	mov	r3, r7
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	605a      	str	r2, [r3, #4]
 80011ae:	609a      	str	r2, [r3, #8]
 80011b0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80011b2:	4b28      	ldr	r3, [pc, #160]	; (8001254 <MX_ADC3_Init+0xb4>)
 80011b4:	4a28      	ldr	r2, [pc, #160]	; (8001258 <MX_ADC3_Init+0xb8>)
 80011b6:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 80011b8:	4b26      	ldr	r3, [pc, #152]	; (8001254 <MX_ADC3_Init+0xb4>)
 80011ba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80011be:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80011c0:	4b24      	ldr	r3, [pc, #144]	; (8001254 <MX_ADC3_Init+0xb4>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ENABLE;
 80011c6:	4b23      	ldr	r3, [pc, #140]	; (8001254 <MX_ADC3_Init+0xb4>)
 80011c8:	2201      	movs	r2, #1
 80011ca:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80011cc:	4b21      	ldr	r3, [pc, #132]	; (8001254 <MX_ADC3_Init+0xb4>)
 80011ce:	2201      	movs	r2, #1
 80011d0:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80011d2:	4b20      	ldr	r3, [pc, #128]	; (8001254 <MX_ADC3_Init+0xb4>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011da:	4b1e      	ldr	r3, [pc, #120]	; (8001254 <MX_ADC3_Init+0xb4>)
 80011dc:	2200      	movs	r2, #0
 80011de:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011e0:	4b1c      	ldr	r3, [pc, #112]	; (8001254 <MX_ADC3_Init+0xb4>)
 80011e2:	4a1e      	ldr	r2, [pc, #120]	; (800125c <MX_ADC3_Init+0xbc>)
 80011e4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011e6:	4b1b      	ldr	r3, [pc, #108]	; (8001254 <MX_ADC3_Init+0xb4>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 2;
 80011ec:	4b19      	ldr	r3, [pc, #100]	; (8001254 <MX_ADC3_Init+0xb4>)
 80011ee:	2202      	movs	r2, #2
 80011f0:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 80011f2:	4b18      	ldr	r3, [pc, #96]	; (8001254 <MX_ADC3_Init+0xb4>)
 80011f4:	2201      	movs	r2, #1
 80011f6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011fa:	4b16      	ldr	r3, [pc, #88]	; (8001254 <MX_ADC3_Init+0xb4>)
 80011fc:	2201      	movs	r2, #1
 80011fe:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001200:	4814      	ldr	r0, [pc, #80]	; (8001254 <MX_ADC3_Init+0xb4>)
 8001202:	f001 f845 	bl	8002290 <HAL_ADC_Init>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 800120c:	f000 faa6 	bl	800175c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001210:	2303      	movs	r3, #3
 8001212:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001214:	2301      	movs	r3, #1
 8001216:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001218:	2300      	movs	r3, #0
 800121a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800121c:	463b      	mov	r3, r7
 800121e:	4619      	mov	r1, r3
 8001220:	480c      	ldr	r0, [pc, #48]	; (8001254 <MX_ADC3_Init+0xb4>)
 8001222:	f001 f9a7 	bl	8002574 <HAL_ADC_ConfigChannel>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 800122c:	f000 fa96 	bl	800175c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001230:	2301      	movs	r3, #1
 8001232:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001234:	2302      	movs	r3, #2
 8001236:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001238:	463b      	mov	r3, r7
 800123a:	4619      	mov	r1, r3
 800123c:	4805      	ldr	r0, [pc, #20]	; (8001254 <MX_ADC3_Init+0xb4>)
 800123e:	f001 f999 	bl	8002574 <HAL_ADC_ConfigChannel>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <MX_ADC3_Init+0xac>
  {
    Error_Handler();
 8001248:	f000 fa88 	bl	800175c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800124c:	bf00      	nop
 800124e:	3710      	adds	r7, #16
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	200001d0 	.word	0x200001d0
 8001258:	40012200 	.word	0x40012200
 800125c:	0f000001 	.word	0x0f000001

08001260 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b096      	sub	sp, #88	; 0x58
 8001264:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_Init 0 */
	//Grundfrequenz 168MHz
	//period=168MHz/33kHz=5010
  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001266:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800126a:	2200      	movs	r2, #0
 800126c:	601a      	str	r2, [r3, #0]
 800126e:	605a      	str	r2, [r3, #4]
 8001270:	609a      	str	r2, [r3, #8]
 8001272:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001274:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]
 800127c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800127e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001282:	2200      	movs	r2, #0
 8001284:	601a      	str	r2, [r3, #0]
 8001286:	605a      	str	r2, [r3, #4]
 8001288:	609a      	str	r2, [r3, #8]
 800128a:	60da      	str	r2, [r3, #12]
 800128c:	611a      	str	r2, [r3, #16]
 800128e:	615a      	str	r2, [r3, #20]
 8001290:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001292:	1d3b      	adds	r3, r7, #4
 8001294:	2220      	movs	r2, #32
 8001296:	2100      	movs	r1, #0
 8001298:	4618      	mov	r0, r3
 800129a:	f003 ff49 	bl	8005130 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800129e:	4b4f      	ldr	r3, [pc, #316]	; (80013dc <MX_TIM1_Init+0x17c>)
 80012a0:	4a4f      	ldr	r2, [pc, #316]	; (80013e0 <MX_TIM1_Init+0x180>)
 80012a2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80012a4:	4b4d      	ldr	r3, [pc, #308]	; (80013dc <MX_TIM1_Init+0x17c>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012aa:	4b4c      	ldr	r3, [pc, #304]	; (80013dc <MX_TIM1_Init+0x17c>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 5010;
 80012b0:	4b4a      	ldr	r3, [pc, #296]	; (80013dc <MX_TIM1_Init+0x17c>)
 80012b2:	f241 3292 	movw	r2, #5010	; 0x1392
 80012b6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012b8:	4b48      	ldr	r3, [pc, #288]	; (80013dc <MX_TIM1_Init+0x17c>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80012be:	4b47      	ldr	r3, [pc, #284]	; (80013dc <MX_TIM1_Init+0x17c>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012c4:	4b45      	ldr	r3, [pc, #276]	; (80013dc <MX_TIM1_Init+0x17c>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80012ca:	4844      	ldr	r0, [pc, #272]	; (80013dc <MX_TIM1_Init+0x17c>)
 80012cc:	f002 fe3e 	bl	8003f4c <HAL_TIM_Base_Init>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80012d6:	f000 fa41 	bl	800175c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012de:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80012e0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80012e4:	4619      	mov	r1, r3
 80012e6:	483d      	ldr	r0, [pc, #244]	; (80013dc <MX_TIM1_Init+0x17c>)
 80012e8:	f003 f946 	bl	8004578 <HAL_TIM_ConfigClockSource>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80012f2:	f000 fa33 	bl	800175c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 80012f6:	4839      	ldr	r0, [pc, #228]	; (80013dc <MX_TIM1_Init+0x17c>)
 80012f8:	f002 fe77 	bl	8003fea <HAL_TIM_OC_Init>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001302:	f000 fa2b 	bl	800175c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001306:	2320      	movs	r3, #32
 8001308:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 800130a:	2380      	movs	r3, #128	; 0x80
 800130c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800130e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001312:	4619      	mov	r1, r3
 8001314:	4831      	ldr	r0, [pc, #196]	; (80013dc <MX_TIM1_Init+0x17c>)
 8001316:	f003 fe05 	bl	8004f24 <HAL_TIMEx_MasterConfigSynchronization>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001320:	f000 fa1c 	bl	800175c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001324:	2300      	movs	r3, #0
 8001326:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001328:	2300      	movs	r3, #0
 800132a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800132c:	2300      	movs	r3, #0
 800132e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001330:	2300      	movs	r3, #0
 8001332:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001334:	2300      	movs	r3, #0
 8001336:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001338:	2300      	movs	r3, #0
 800133a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800133c:	2300      	movs	r3, #0
 800133e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001340:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001344:	2200      	movs	r2, #0
 8001346:	4619      	mov	r1, r3
 8001348:	4824      	ldr	r0, [pc, #144]	; (80013dc <MX_TIM1_Init+0x17c>)
 800134a:	f003 f8bd 	bl	80044c8 <HAL_TIM_OC_ConfigChannel>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001354:	f000 fa02 	bl	800175c <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001358:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800135c:	2204      	movs	r2, #4
 800135e:	4619      	mov	r1, r3
 8001360:	481e      	ldr	r0, [pc, #120]	; (80013dc <MX_TIM1_Init+0x17c>)
 8001362:	f003 f8b1 	bl	80044c8 <HAL_TIM_OC_ConfigChannel>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 800136c:	f000 f9f6 	bl	800175c <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001370:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001374:	2208      	movs	r2, #8
 8001376:	4619      	mov	r1, r3
 8001378:	4818      	ldr	r0, [pc, #96]	; (80013dc <MX_TIM1_Init+0x17c>)
 800137a:	f003 f8a5 	bl	80044c8 <HAL_TIM_OC_ConfigChannel>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001384:	f000 f9ea 	bl	800175c <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001388:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800138c:	220c      	movs	r2, #12
 800138e:	4619      	mov	r1, r3
 8001390:	4812      	ldr	r0, [pc, #72]	; (80013dc <MX_TIM1_Init+0x17c>)
 8001392:	f003 f899 	bl	80044c8 <HAL_TIM_OC_ConfigChannel>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 800139c:	f000 f9de 	bl	800175c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80013a0:	2300      	movs	r3, #0
 80013a2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80013a4:	2300      	movs	r3, #0
 80013a6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80013a8:	2300      	movs	r3, #0
 80013aa:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80013ac:	2300      	movs	r3, #0
 80013ae:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80013b0:	2300      	movs	r3, #0
 80013b2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80013b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013b8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80013ba:	2300      	movs	r3, #0
 80013bc:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80013be:	1d3b      	adds	r3, r7, #4
 80013c0:	4619      	mov	r1, r3
 80013c2:	4806      	ldr	r0, [pc, #24]	; (80013dc <MX_TIM1_Init+0x17c>)
 80013c4:	f003 fe2a 	bl	800501c <HAL_TIMEx_ConfigBreakDeadTime>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 80013ce:	f000 f9c5 	bl	800175c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80013d2:	bf00      	nop
 80013d4:	3758      	adds	r7, #88	; 0x58
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	20000280 	.word	0x20000280
 80013e0:	40010000 	.word	0x40010000

080013e4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b08e      	sub	sp, #56	; 0x38
 80013e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013ee:	2200      	movs	r2, #0
 80013f0:	601a      	str	r2, [r3, #0]
 80013f2:	605a      	str	r2, [r3, #4]
 80013f4:	609a      	str	r2, [r3, #8]
 80013f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013f8:	f107 0320 	add.w	r3, r7, #32
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]
 8001400:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001402:	1d3b      	adds	r3, r7, #4
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	605a      	str	r2, [r3, #4]
 800140a:	609a      	str	r2, [r3, #8]
 800140c:	60da      	str	r2, [r3, #12]
 800140e:	611a      	str	r2, [r3, #16]
 8001410:	615a      	str	r2, [r3, #20]
 8001412:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001414:	4b2b      	ldr	r3, [pc, #172]	; (80014c4 <MX_TIM4_Init+0xe0>)
 8001416:	4a2c      	ldr	r2, [pc, #176]	; (80014c8 <MX_TIM4_Init+0xe4>)
 8001418:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 4200;
 800141a:	4b2a      	ldr	r3, [pc, #168]	; (80014c4 <MX_TIM4_Init+0xe0>)
 800141c:	f241 0268 	movw	r2, #4200	; 0x1068
 8001420:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001422:	4b28      	ldr	r3, [pc, #160]	; (80014c4 <MX_TIM4_Init+0xe0>)
 8001424:	2200      	movs	r2, #0
 8001426:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 99;
 8001428:	4b26      	ldr	r3, [pc, #152]	; (80014c4 <MX_TIM4_Init+0xe0>)
 800142a:	2263      	movs	r2, #99	; 0x63
 800142c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800142e:	4b25      	ldr	r3, [pc, #148]	; (80014c4 <MX_TIM4_Init+0xe0>)
 8001430:	2200      	movs	r2, #0
 8001432:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001434:	4b23      	ldr	r3, [pc, #140]	; (80014c4 <MX_TIM4_Init+0xe0>)
 8001436:	2200      	movs	r2, #0
 8001438:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800143a:	4822      	ldr	r0, [pc, #136]	; (80014c4 <MX_TIM4_Init+0xe0>)
 800143c:	f002 fd86 	bl	8003f4c <HAL_TIM_Base_Init>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001446:	f000 f989 	bl	800175c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800144a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800144e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001450:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001454:	4619      	mov	r1, r3
 8001456:	481b      	ldr	r0, [pc, #108]	; (80014c4 <MX_TIM4_Init+0xe0>)
 8001458:	f003 f88e 	bl	8004578 <HAL_TIM_ConfigClockSource>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001462:	f000 f97b 	bl	800175c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8001466:	4817      	ldr	r0, [pc, #92]	; (80014c4 <MX_TIM4_Init+0xe0>)
 8001468:	f002 fdbf 	bl	8003fea <HAL_TIM_OC_Init>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001472:	f000 f973 	bl	800175c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001476:	2300      	movs	r3, #0
 8001478:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800147a:	2300      	movs	r3, #0
 800147c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800147e:	f107 0320 	add.w	r3, r7, #32
 8001482:	4619      	mov	r1, r3
 8001484:	480f      	ldr	r0, [pc, #60]	; (80014c4 <MX_TIM4_Init+0xe0>)
 8001486:	f003 fd4d 	bl	8004f24 <HAL_TIMEx_MasterConfigSynchronization>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001490:	f000 f964 	bl	800175c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001494:	2300      	movs	r3, #0
 8001496:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001498:	2300      	movs	r3, #0
 800149a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800149c:	2300      	movs	r3, #0
 800149e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014a0:	2300      	movs	r3, #0
 80014a2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014a4:	1d3b      	adds	r3, r7, #4
 80014a6:	2200      	movs	r2, #0
 80014a8:	4619      	mov	r1, r3
 80014aa:	4806      	ldr	r0, [pc, #24]	; (80014c4 <MX_TIM4_Init+0xe0>)
 80014ac:	f003 f80c 	bl	80044c8 <HAL_TIM_OC_ConfigChannel>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 80014b6:	f000 f951 	bl	800175c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80014ba:	bf00      	nop
 80014bc:	3738      	adds	r7, #56	; 0x38
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	20000088 	.word	0x20000088
 80014c8:	40000800 	.word	0x40000800

080014cc <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b096      	sub	sp, #88	; 0x58
 80014d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80014d2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80014d6:	2200      	movs	r2, #0
 80014d8:	601a      	str	r2, [r3, #0]
 80014da:	605a      	str	r2, [r3, #4]
 80014dc:	609a      	str	r2, [r3, #8]
 80014de:	60da      	str	r2, [r3, #12]
 80014e0:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014e2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80014e6:	2200      	movs	r2, #0
 80014e8:	601a      	str	r2, [r3, #0]
 80014ea:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014ec:	f107 0320 	add.w	r3, r7, #32
 80014f0:	2200      	movs	r2, #0
 80014f2:	601a      	str	r2, [r3, #0]
 80014f4:	605a      	str	r2, [r3, #4]
 80014f6:	609a      	str	r2, [r3, #8]
 80014f8:	60da      	str	r2, [r3, #12]
 80014fa:	611a      	str	r2, [r3, #16]
 80014fc:	615a      	str	r2, [r3, #20]
 80014fe:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001500:	463b      	mov	r3, r7
 8001502:	2220      	movs	r2, #32
 8001504:	2100      	movs	r1, #0
 8001506:	4618      	mov	r0, r3
 8001508:	f003 fe12 	bl	8005130 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800150c:	4b44      	ldr	r3, [pc, #272]	; (8001620 <MX_TIM8_Init+0x154>)
 800150e:	4a45      	ldr	r2, [pc, #276]	; (8001624 <MX_TIM8_Init+0x158>)
 8001510:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001512:	4b43      	ldr	r3, [pc, #268]	; (8001620 <MX_TIM8_Init+0x154>)
 8001514:	2200      	movs	r2, #0
 8001516:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001518:	4b41      	ldr	r3, [pc, #260]	; (8001620 <MX_TIM8_Init+0x154>)
 800151a:	2200      	movs	r2, #0
 800151c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 5010;
 800151e:	4b40      	ldr	r3, [pc, #256]	; (8001620 <MX_TIM8_Init+0x154>)
 8001520:	f241 3292 	movw	r2, #5010	; 0x1392
 8001524:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001526:	4b3e      	ldr	r3, [pc, #248]	; (8001620 <MX_TIM8_Init+0x154>)
 8001528:	2200      	movs	r2, #0
 800152a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800152c:	4b3c      	ldr	r3, [pc, #240]	; (8001620 <MX_TIM8_Init+0x154>)
 800152e:	2200      	movs	r2, #0
 8001530:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001532:	4b3b      	ldr	r3, [pc, #236]	; (8001620 <MX_TIM8_Init+0x154>)
 8001534:	2200      	movs	r2, #0
 8001536:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001538:	4839      	ldr	r0, [pc, #228]	; (8001620 <MX_TIM8_Init+0x154>)
 800153a:	f002 fd07 	bl	8003f4c <HAL_TIM_Base_Init>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8001544:	f000 f90a 	bl	800175c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 8001548:	4835      	ldr	r0, [pc, #212]	; (8001620 <MX_TIM8_Init+0x154>)
 800154a:	f002 fd4e 	bl	8003fea <HAL_TIM_OC_Init>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <MX_TIM8_Init+0x8c>
  {
    Error_Handler();
 8001554:	f000 f902 	bl	800175c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8001558:	2307      	movs	r3, #7
 800155a:	647b      	str	r3, [r7, #68]	; 0x44
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 800155c:	2300      	movs	r3, #0
 800155e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK)
 8001560:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001564:	4619      	mov	r1, r3
 8001566:	482e      	ldr	r0, [pc, #184]	; (8001620 <MX_TIM8_Init+0x154>)
 8001568:	f003 f8ca 	bl	8004700 <HAL_TIM_SlaveConfigSynchro>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <MX_TIM8_Init+0xaa>
  {
    Error_Handler();
 8001572:	f000 f8f3 	bl	800175c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001576:	2320      	movs	r3, #32
 8001578:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800157a:	2300      	movs	r3, #0
 800157c:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800157e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001582:	4619      	mov	r1, r3
 8001584:	4826      	ldr	r0, [pc, #152]	; (8001620 <MX_TIM8_Init+0x154>)
 8001586:	f003 fccd 	bl	8004f24 <HAL_TIMEx_MasterConfigSynchronization>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <MX_TIM8_Init+0xc8>
  {
    Error_Handler();
 8001590:	f000 f8e4 	bl	800175c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001594:	2300      	movs	r3, #0
 8001596:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 8001598:	2300      	movs	r3, #0
 800159a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800159c:	2300      	movs	r3, #0
 800159e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80015a0:	2300      	movs	r3, #0
 80015a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015a4:	2300      	movs	r3, #0
 80015a6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80015a8:	2300      	movs	r3, #0
 80015aa:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80015ac:	2300      	movs	r3, #0
 80015ae:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015b0:	f107 0320 	add.w	r3, r7, #32
 80015b4:	2200      	movs	r2, #0
 80015b6:	4619      	mov	r1, r3
 80015b8:	4819      	ldr	r0, [pc, #100]	; (8001620 <MX_TIM8_Init+0x154>)
 80015ba:	f002 ff85 	bl	80044c8 <HAL_TIM_OC_ConfigChannel>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <MX_TIM8_Init+0xfc>
  {
    Error_Handler();
 80015c4:	f000 f8ca 	bl	800175c <Error_Handler>
  }
  sConfigOC.Pulse = 2505;
 80015c8:	f640 13c9 	movw	r3, #2505	; 0x9c9
 80015cc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80015ce:	f107 0320 	add.w	r3, r7, #32
 80015d2:	2204      	movs	r2, #4
 80015d4:	4619      	mov	r1, r3
 80015d6:	4812      	ldr	r0, [pc, #72]	; (8001620 <MX_TIM8_Init+0x154>)
 80015d8:	f002 ff76 	bl	80044c8 <HAL_TIM_OC_ConfigChannel>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <MX_TIM8_Init+0x11a>
  {
    Error_Handler();
 80015e2:	f000 f8bb 	bl	800175c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80015e6:	2300      	movs	r3, #0
 80015e8:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80015ea:	2300      	movs	r3, #0
 80015ec:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80015ee:	2300      	movs	r3, #0
 80015f0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80015f2:	2300      	movs	r3, #0
 80015f4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80015f6:	2300      	movs	r3, #0
 80015f8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015fe:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001600:	2300      	movs	r3, #0
 8001602:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001604:	463b      	mov	r3, r7
 8001606:	4619      	mov	r1, r3
 8001608:	4805      	ldr	r0, [pc, #20]	; (8001620 <MX_TIM8_Init+0x154>)
 800160a:	f003 fd07 	bl	800501c <HAL_TIMEx_ConfigBreakDeadTime>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <MX_TIM8_Init+0x14c>
  {
    Error_Handler();
 8001614:	f000 f8a2 	bl	800175c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001618:	bf00      	nop
 800161a:	3758      	adds	r7, #88	; 0x58
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	20000040 	.word	0x20000040
 8001624:	40010400 	.word	0x40010400

08001628 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800162e:	2300      	movs	r3, #0
 8001630:	607b      	str	r3, [r7, #4]
 8001632:	4b14      	ldr	r3, [pc, #80]	; (8001684 <MX_DMA_Init+0x5c>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001636:	4a13      	ldr	r2, [pc, #76]	; (8001684 <MX_DMA_Init+0x5c>)
 8001638:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800163c:	6313      	str	r3, [r2, #48]	; 0x30
 800163e:	4b11      	ldr	r3, [pc, #68]	; (8001684 <MX_DMA_Init+0x5c>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001642:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001646:	607b      	str	r3, [r7, #4]
 8001648:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800164a:	2200      	movs	r2, #0
 800164c:	2100      	movs	r1, #0
 800164e:	2038      	movs	r0, #56	; 0x38
 8001650:	f001 fb0b 	bl	8002c6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001654:	2038      	movs	r0, #56	; 0x38
 8001656:	f001 fb24 	bl	8002ca2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800165a:	2200      	movs	r2, #0
 800165c:	2100      	movs	r1, #0
 800165e:	2039      	movs	r0, #57	; 0x39
 8001660:	f001 fb03 	bl	8002c6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001664:	2039      	movs	r0, #57	; 0x39
 8001666:	f001 fb1c 	bl	8002ca2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800166a:	2200      	movs	r2, #0
 800166c:	2100      	movs	r1, #0
 800166e:	203b      	movs	r0, #59	; 0x3b
 8001670:	f001 fafb 	bl	8002c6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001674:	203b      	movs	r0, #59	; 0x3b
 8001676:	f001 fb14 	bl	8002ca2 <HAL_NVIC_EnableIRQ>

}
 800167a:	bf00      	nop
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	40023800 	.word	0x40023800

08001688 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b088      	sub	sp, #32
 800168c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800168e:	f107 030c 	add.w	r3, r7, #12
 8001692:	2200      	movs	r2, #0
 8001694:	601a      	str	r2, [r3, #0]
 8001696:	605a      	str	r2, [r3, #4]
 8001698:	609a      	str	r2, [r3, #8]
 800169a:	60da      	str	r2, [r3, #12]
 800169c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800169e:	2300      	movs	r3, #0
 80016a0:	60bb      	str	r3, [r7, #8]
 80016a2:	4b2b      	ldr	r3, [pc, #172]	; (8001750 <MX_GPIO_Init+0xc8>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a6:	4a2a      	ldr	r2, [pc, #168]	; (8001750 <MX_GPIO_Init+0xc8>)
 80016a8:	f043 0301 	orr.w	r3, r3, #1
 80016ac:	6313      	str	r3, [r2, #48]	; 0x30
 80016ae:	4b28      	ldr	r3, [pc, #160]	; (8001750 <MX_GPIO_Init+0xc8>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b2:	f003 0301 	and.w	r3, r3, #1
 80016b6:	60bb      	str	r3, [r7, #8]
 80016b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ba:	2300      	movs	r3, #0
 80016bc:	607b      	str	r3, [r7, #4]
 80016be:	4b24      	ldr	r3, [pc, #144]	; (8001750 <MX_GPIO_Init+0xc8>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c2:	4a23      	ldr	r2, [pc, #140]	; (8001750 <MX_GPIO_Init+0xc8>)
 80016c4:	f043 0302 	orr.w	r3, r3, #2
 80016c8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ca:	4b21      	ldr	r3, [pc, #132]	; (8001750 <MX_GPIO_Init+0xc8>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ce:	f003 0302 	and.w	r3, r3, #2
 80016d2:	607b      	str	r3, [r7, #4]
 80016d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80016d6:	2300      	movs	r3, #0
 80016d8:	603b      	str	r3, [r7, #0]
 80016da:	4b1d      	ldr	r3, [pc, #116]	; (8001750 <MX_GPIO_Init+0xc8>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016de:	4a1c      	ldr	r2, [pc, #112]	; (8001750 <MX_GPIO_Init+0xc8>)
 80016e0:	f043 0310 	orr.w	r3, r3, #16
 80016e4:	6313      	str	r3, [r2, #48]	; 0x30
 80016e6:	4b1a      	ldr	r3, [pc, #104]	; (8001750 <MX_GPIO_Init+0xc8>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ea:	f003 0310 	and.w	r3, r3, #16
 80016ee:	603b      	str	r3, [r7, #0]
 80016f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 80016f2:	2200      	movs	r2, #0
 80016f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016f8:	4816      	ldr	r0, [pc, #88]	; (8001754 <MX_GPIO_Init+0xcc>)
 80016fa:	f001 fff9 	bl	80036f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 80016fe:	2200      	movs	r2, #0
 8001700:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001704:	4814      	ldr	r0, [pc, #80]	; (8001758 <MX_GPIO_Init+0xd0>)
 8001706:	f001 fff3 	bl	80036f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800170a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800170e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001710:	2301      	movs	r3, #1
 8001712:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001714:	2300      	movs	r3, #0
 8001716:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001718:	2300      	movs	r3, #0
 800171a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800171c:	f107 030c 	add.w	r3, r7, #12
 8001720:	4619      	mov	r1, r3
 8001722:	480c      	ldr	r0, [pc, #48]	; (8001754 <MX_GPIO_Init+0xcc>)
 8001724:	f001 fe48 	bl	80033b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001728:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800172c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800172e:	2301      	movs	r3, #1
 8001730:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001732:	2300      	movs	r3, #0
 8001734:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001736:	2300      	movs	r3, #0
 8001738:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800173a:	f107 030c 	add.w	r3, r7, #12
 800173e:	4619      	mov	r1, r3
 8001740:	4805      	ldr	r0, [pc, #20]	; (8001758 <MX_GPIO_Init+0xd0>)
 8001742:	f001 fe39 	bl	80033b8 <HAL_GPIO_Init>

}
 8001746:	bf00      	nop
 8001748:	3720      	adds	r7, #32
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	40023800 	.word	0x40023800
 8001754:	40021000 	.word	0x40021000
 8001758:	40020400 	.word	0x40020400

0800175c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001760:	bf00      	nop
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
	...

0800176c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001772:	2300      	movs	r3, #0
 8001774:	607b      	str	r3, [r7, #4]
 8001776:	4b10      	ldr	r3, [pc, #64]	; (80017b8 <HAL_MspInit+0x4c>)
 8001778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800177a:	4a0f      	ldr	r2, [pc, #60]	; (80017b8 <HAL_MspInit+0x4c>)
 800177c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001780:	6453      	str	r3, [r2, #68]	; 0x44
 8001782:	4b0d      	ldr	r3, [pc, #52]	; (80017b8 <HAL_MspInit+0x4c>)
 8001784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001786:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800178a:	607b      	str	r3, [r7, #4]
 800178c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800178e:	2300      	movs	r3, #0
 8001790:	603b      	str	r3, [r7, #0]
 8001792:	4b09      	ldr	r3, [pc, #36]	; (80017b8 <HAL_MspInit+0x4c>)
 8001794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001796:	4a08      	ldr	r2, [pc, #32]	; (80017b8 <HAL_MspInit+0x4c>)
 8001798:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800179c:	6413      	str	r3, [r2, #64]	; 0x40
 800179e:	4b06      	ldr	r3, [pc, #24]	; (80017b8 <HAL_MspInit+0x4c>)
 80017a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017a6:	603b      	str	r3, [r7, #0]
 80017a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017aa:	bf00      	nop
 80017ac:	370c      	adds	r7, #12
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	40023800 	.word	0x40023800

080017bc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b08e      	sub	sp, #56	; 0x38
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017c8:	2200      	movs	r2, #0
 80017ca:	601a      	str	r2, [r3, #0]
 80017cc:	605a      	str	r2, [r3, #4]
 80017ce:	609a      	str	r2, [r3, #8]
 80017d0:	60da      	str	r2, [r3, #12]
 80017d2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a8c      	ldr	r2, [pc, #560]	; (8001a0c <HAL_ADC_MspInit+0x250>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d157      	bne.n	800188e <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80017de:	2300      	movs	r3, #0
 80017e0:	623b      	str	r3, [r7, #32]
 80017e2:	4b8b      	ldr	r3, [pc, #556]	; (8001a10 <HAL_ADC_MspInit+0x254>)
 80017e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017e6:	4a8a      	ldr	r2, [pc, #552]	; (8001a10 <HAL_ADC_MspInit+0x254>)
 80017e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017ec:	6453      	str	r3, [r2, #68]	; 0x44
 80017ee:	4b88      	ldr	r3, [pc, #544]	; (8001a10 <HAL_ADC_MspInit+0x254>)
 80017f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017f6:	623b      	str	r3, [r7, #32]
 80017f8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017fa:	2300      	movs	r3, #0
 80017fc:	61fb      	str	r3, [r7, #28]
 80017fe:	4b84      	ldr	r3, [pc, #528]	; (8001a10 <HAL_ADC_MspInit+0x254>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001802:	4a83      	ldr	r2, [pc, #524]	; (8001a10 <HAL_ADC_MspInit+0x254>)
 8001804:	f043 0302 	orr.w	r3, r3, #2
 8001808:	6313      	str	r3, [r2, #48]	; 0x30
 800180a:	4b81      	ldr	r3, [pc, #516]	; (8001a10 <HAL_ADC_MspInit+0x254>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180e:	f003 0302 	and.w	r3, r3, #2
 8001812:	61fb      	str	r3, [r7, #28]
 8001814:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001816:	2303      	movs	r3, #3
 8001818:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800181a:	2303      	movs	r3, #3
 800181c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181e:	2300      	movs	r3, #0
 8001820:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001822:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001826:	4619      	mov	r1, r3
 8001828:	487a      	ldr	r0, [pc, #488]	; (8001a14 <HAL_ADC_MspInit+0x258>)
 800182a:	f001 fdc5 	bl	80033b8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800182e:	4b7a      	ldr	r3, [pc, #488]	; (8001a18 <HAL_ADC_MspInit+0x25c>)
 8001830:	4a7a      	ldr	r2, [pc, #488]	; (8001a1c <HAL_ADC_MspInit+0x260>)
 8001832:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001834:	4b78      	ldr	r3, [pc, #480]	; (8001a18 <HAL_ADC_MspInit+0x25c>)
 8001836:	2200      	movs	r2, #0
 8001838:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800183a:	4b77      	ldr	r3, [pc, #476]	; (8001a18 <HAL_ADC_MspInit+0x25c>)
 800183c:	2200      	movs	r2, #0
 800183e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001840:	4b75      	ldr	r3, [pc, #468]	; (8001a18 <HAL_ADC_MspInit+0x25c>)
 8001842:	2200      	movs	r2, #0
 8001844:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001846:	4b74      	ldr	r3, [pc, #464]	; (8001a18 <HAL_ADC_MspInit+0x25c>)
 8001848:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800184c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800184e:	4b72      	ldr	r3, [pc, #456]	; (8001a18 <HAL_ADC_MspInit+0x25c>)
 8001850:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001854:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001856:	4b70      	ldr	r3, [pc, #448]	; (8001a18 <HAL_ADC_MspInit+0x25c>)
 8001858:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800185c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800185e:	4b6e      	ldr	r3, [pc, #440]	; (8001a18 <HAL_ADC_MspInit+0x25c>)
 8001860:	2200      	movs	r2, #0
 8001862:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001864:	4b6c      	ldr	r3, [pc, #432]	; (8001a18 <HAL_ADC_MspInit+0x25c>)
 8001866:	2200      	movs	r2, #0
 8001868:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800186a:	4b6b      	ldr	r3, [pc, #428]	; (8001a18 <HAL_ADC_MspInit+0x25c>)
 800186c:	2200      	movs	r2, #0
 800186e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001870:	4869      	ldr	r0, [pc, #420]	; (8001a18 <HAL_ADC_MspInit+0x25c>)
 8001872:	f001 fa31 	bl	8002cd8 <HAL_DMA_Init>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d001      	beq.n	8001880 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 800187c:	f7ff ff6e 	bl	800175c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	4a65      	ldr	r2, [pc, #404]	; (8001a18 <HAL_ADC_MspInit+0x25c>)
 8001884:	639a      	str	r2, [r3, #56]	; 0x38
 8001886:	4a64      	ldr	r2, [pc, #400]	; (8001a18 <HAL_ADC_MspInit+0x25c>)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800188c:	e0ba      	b.n	8001a04 <HAL_ADC_MspInit+0x248>
  else if(hadc->Instance==ADC2)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a63      	ldr	r2, [pc, #396]	; (8001a20 <HAL_ADC_MspInit+0x264>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d158      	bne.n	800194a <HAL_ADC_MspInit+0x18e>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001898:	2300      	movs	r3, #0
 800189a:	61bb      	str	r3, [r7, #24]
 800189c:	4b5c      	ldr	r3, [pc, #368]	; (8001a10 <HAL_ADC_MspInit+0x254>)
 800189e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018a0:	4a5b      	ldr	r2, [pc, #364]	; (8001a10 <HAL_ADC_MspInit+0x254>)
 80018a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018a6:	6453      	str	r3, [r2, #68]	; 0x44
 80018a8:	4b59      	ldr	r3, [pc, #356]	; (8001a10 <HAL_ADC_MspInit+0x254>)
 80018aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018b0:	61bb      	str	r3, [r7, #24]
 80018b2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018b4:	2300      	movs	r3, #0
 80018b6:	617b      	str	r3, [r7, #20]
 80018b8:	4b55      	ldr	r3, [pc, #340]	; (8001a10 <HAL_ADC_MspInit+0x254>)
 80018ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018bc:	4a54      	ldr	r2, [pc, #336]	; (8001a10 <HAL_ADC_MspInit+0x254>)
 80018be:	f043 0301 	orr.w	r3, r3, #1
 80018c2:	6313      	str	r3, [r2, #48]	; 0x30
 80018c4:	4b52      	ldr	r3, [pc, #328]	; (8001a10 <HAL_ADC_MspInit+0x254>)
 80018c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c8:	f003 0301 	and.w	r3, r3, #1
 80018cc:	617b      	str	r3, [r7, #20]
 80018ce:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80018d0:	2330      	movs	r3, #48	; 0x30
 80018d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018d4:	2303      	movs	r3, #3
 80018d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d8:	2300      	movs	r3, #0
 80018da:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018e0:	4619      	mov	r1, r3
 80018e2:	4850      	ldr	r0, [pc, #320]	; (8001a24 <HAL_ADC_MspInit+0x268>)
 80018e4:	f001 fd68 	bl	80033b8 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream3;
 80018e8:	4b4f      	ldr	r3, [pc, #316]	; (8001a28 <HAL_ADC_MspInit+0x26c>)
 80018ea:	4a50      	ldr	r2, [pc, #320]	; (8001a2c <HAL_ADC_MspInit+0x270>)
 80018ec:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 80018ee:	4b4e      	ldr	r3, [pc, #312]	; (8001a28 <HAL_ADC_MspInit+0x26c>)
 80018f0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018f4:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018f6:	4b4c      	ldr	r3, [pc, #304]	; (8001a28 <HAL_ADC_MspInit+0x26c>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80018fc:	4b4a      	ldr	r3, [pc, #296]	; (8001a28 <HAL_ADC_MspInit+0x26c>)
 80018fe:	2200      	movs	r2, #0
 8001900:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001902:	4b49      	ldr	r3, [pc, #292]	; (8001a28 <HAL_ADC_MspInit+0x26c>)
 8001904:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001908:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800190a:	4b47      	ldr	r3, [pc, #284]	; (8001a28 <HAL_ADC_MspInit+0x26c>)
 800190c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001910:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001912:	4b45      	ldr	r3, [pc, #276]	; (8001a28 <HAL_ADC_MspInit+0x26c>)
 8001914:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001918:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 800191a:	4b43      	ldr	r3, [pc, #268]	; (8001a28 <HAL_ADC_MspInit+0x26c>)
 800191c:	2200      	movs	r2, #0
 800191e:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8001920:	4b41      	ldr	r3, [pc, #260]	; (8001a28 <HAL_ADC_MspInit+0x26c>)
 8001922:	2200      	movs	r2, #0
 8001924:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001926:	4b40      	ldr	r3, [pc, #256]	; (8001a28 <HAL_ADC_MspInit+0x26c>)
 8001928:	2200      	movs	r2, #0
 800192a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800192c:	483e      	ldr	r0, [pc, #248]	; (8001a28 <HAL_ADC_MspInit+0x26c>)
 800192e:	f001 f9d3 	bl	8002cd8 <HAL_DMA_Init>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <HAL_ADC_MspInit+0x180>
      Error_Handler();
 8001938:	f7ff ff10 	bl	800175c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	4a3a      	ldr	r2, [pc, #232]	; (8001a28 <HAL_ADC_MspInit+0x26c>)
 8001940:	639a      	str	r2, [r3, #56]	; 0x38
 8001942:	4a39      	ldr	r2, [pc, #228]	; (8001a28 <HAL_ADC_MspInit+0x26c>)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001948:	e05c      	b.n	8001a04 <HAL_ADC_MspInit+0x248>
  else if(hadc->Instance==ADC3)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a38      	ldr	r2, [pc, #224]	; (8001a30 <HAL_ADC_MspInit+0x274>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d157      	bne.n	8001a04 <HAL_ADC_MspInit+0x248>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001954:	2300      	movs	r3, #0
 8001956:	613b      	str	r3, [r7, #16]
 8001958:	4b2d      	ldr	r3, [pc, #180]	; (8001a10 <HAL_ADC_MspInit+0x254>)
 800195a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800195c:	4a2c      	ldr	r2, [pc, #176]	; (8001a10 <HAL_ADC_MspInit+0x254>)
 800195e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001962:	6453      	str	r3, [r2, #68]	; 0x44
 8001964:	4b2a      	ldr	r3, [pc, #168]	; (8001a10 <HAL_ADC_MspInit+0x254>)
 8001966:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001968:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800196c:	613b      	str	r3, [r7, #16]
 800196e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001970:	2300      	movs	r3, #0
 8001972:	60fb      	str	r3, [r7, #12]
 8001974:	4b26      	ldr	r3, [pc, #152]	; (8001a10 <HAL_ADC_MspInit+0x254>)
 8001976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001978:	4a25      	ldr	r2, [pc, #148]	; (8001a10 <HAL_ADC_MspInit+0x254>)
 800197a:	f043 0301 	orr.w	r3, r3, #1
 800197e:	6313      	str	r3, [r2, #48]	; 0x30
 8001980:	4b23      	ldr	r3, [pc, #140]	; (8001a10 <HAL_ADC_MspInit+0x254>)
 8001982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001984:	f003 0301 	and.w	r3, r3, #1
 8001988:	60fb      	str	r3, [r7, #12]
 800198a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 800198c:	230a      	movs	r3, #10
 800198e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001990:	2303      	movs	r3, #3
 8001992:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001994:	2300      	movs	r3, #0
 8001996:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001998:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800199c:	4619      	mov	r1, r3
 800199e:	4821      	ldr	r0, [pc, #132]	; (8001a24 <HAL_ADC_MspInit+0x268>)
 80019a0:	f001 fd0a 	bl	80033b8 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream1;
 80019a4:	4b23      	ldr	r3, [pc, #140]	; (8001a34 <HAL_ADC_MspInit+0x278>)
 80019a6:	4a24      	ldr	r2, [pc, #144]	; (8001a38 <HAL_ADC_MspInit+0x27c>)
 80019a8:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 80019aa:	4b22      	ldr	r3, [pc, #136]	; (8001a34 <HAL_ADC_MspInit+0x278>)
 80019ac:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80019b0:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80019b2:	4b20      	ldr	r3, [pc, #128]	; (8001a34 <HAL_ADC_MspInit+0x278>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80019b8:	4b1e      	ldr	r3, [pc, #120]	; (8001a34 <HAL_ADC_MspInit+0x278>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 80019be:	4b1d      	ldr	r3, [pc, #116]	; (8001a34 <HAL_ADC_MspInit+0x278>)
 80019c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019c4:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80019c6:	4b1b      	ldr	r3, [pc, #108]	; (8001a34 <HAL_ADC_MspInit+0x278>)
 80019c8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80019cc:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80019ce:	4b19      	ldr	r3, [pc, #100]	; (8001a34 <HAL_ADC_MspInit+0x278>)
 80019d0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80019d4:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 80019d6:	4b17      	ldr	r3, [pc, #92]	; (8001a34 <HAL_ADC_MspInit+0x278>)
 80019d8:	2200      	movs	r2, #0
 80019da:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 80019dc:	4b15      	ldr	r3, [pc, #84]	; (8001a34 <HAL_ADC_MspInit+0x278>)
 80019de:	2200      	movs	r2, #0
 80019e0:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80019e2:	4b14      	ldr	r3, [pc, #80]	; (8001a34 <HAL_ADC_MspInit+0x278>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80019e8:	4812      	ldr	r0, [pc, #72]	; (8001a34 <HAL_ADC_MspInit+0x278>)
 80019ea:	f001 f975 	bl	8002cd8 <HAL_DMA_Init>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d001      	beq.n	80019f8 <HAL_ADC_MspInit+0x23c>
      Error_Handler();
 80019f4:	f7ff feb2 	bl	800175c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	4a0e      	ldr	r2, [pc, #56]	; (8001a34 <HAL_ADC_MspInit+0x278>)
 80019fc:	639a      	str	r2, [r3, #56]	; 0x38
 80019fe:	4a0d      	ldr	r2, [pc, #52]	; (8001a34 <HAL_ADC_MspInit+0x278>)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001a04:	bf00      	nop
 8001a06:	3738      	adds	r7, #56	; 0x38
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	40012000 	.word	0x40012000
 8001a10:	40023800 	.word	0x40023800
 8001a14:	40020400 	.word	0x40020400
 8001a18:	20000218 	.word	0x20000218
 8001a1c:	40026410 	.word	0x40026410
 8001a20:	40012100 	.word	0x40012100
 8001a24:	40020000 	.word	0x40020000
 8001a28:	200002c8 	.word	0x200002c8
 8001a2c:	40026458 	.word	0x40026458
 8001a30:	40012200 	.word	0x40012200
 8001a34:	20000128 	.word	0x20000128
 8001a38:	40026428 	.word	0x40026428

08001a3c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b086      	sub	sp, #24
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a2a      	ldr	r2, [pc, #168]	; (8001af4 <HAL_TIM_Base_MspInit+0xb8>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d116      	bne.n	8001a7c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a4e:	2300      	movs	r3, #0
 8001a50:	617b      	str	r3, [r7, #20]
 8001a52:	4b29      	ldr	r3, [pc, #164]	; (8001af8 <HAL_TIM_Base_MspInit+0xbc>)
 8001a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a56:	4a28      	ldr	r2, [pc, #160]	; (8001af8 <HAL_TIM_Base_MspInit+0xbc>)
 8001a58:	f043 0301 	orr.w	r3, r3, #1
 8001a5c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a5e:	4b26      	ldr	r3, [pc, #152]	; (8001af8 <HAL_TIM_Base_MspInit+0xbc>)
 8001a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a62:	f003 0301 	and.w	r3, r3, #1
 8001a66:	617b      	str	r3, [r7, #20]
 8001a68:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 2, 0);
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	2102      	movs	r1, #2
 8001a6e:	201b      	movs	r0, #27
 8001a70:	f001 f8fb 	bl	8002c6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001a74:	201b      	movs	r0, #27
 8001a76:	f001 f914 	bl	8002ca2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001a7a:	e036      	b.n	8001aea <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM4)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a1e      	ldr	r2, [pc, #120]	; (8001afc <HAL_TIM_Base_MspInit+0xc0>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d116      	bne.n	8001ab4 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001a86:	2300      	movs	r3, #0
 8001a88:	613b      	str	r3, [r7, #16]
 8001a8a:	4b1b      	ldr	r3, [pc, #108]	; (8001af8 <HAL_TIM_Base_MspInit+0xbc>)
 8001a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8e:	4a1a      	ldr	r2, [pc, #104]	; (8001af8 <HAL_TIM_Base_MspInit+0xbc>)
 8001a90:	f043 0304 	orr.w	r3, r3, #4
 8001a94:	6413      	str	r3, [r2, #64]	; 0x40
 8001a96:	4b18      	ldr	r3, [pc, #96]	; (8001af8 <HAL_TIM_Base_MspInit+0xbc>)
 8001a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9a:	f003 0304 	and.w	r3, r3, #4
 8001a9e:	613b      	str	r3, [r7, #16]
 8001aa0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	2101      	movs	r1, #1
 8001aa6:	201e      	movs	r0, #30
 8001aa8:	f001 f8df 	bl	8002c6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001aac:	201e      	movs	r0, #30
 8001aae:	f001 f8f8 	bl	8002ca2 <HAL_NVIC_EnableIRQ>
}
 8001ab2:	e01a      	b.n	8001aea <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM8)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a11      	ldr	r2, [pc, #68]	; (8001b00 <HAL_TIM_Base_MspInit+0xc4>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d115      	bne.n	8001aea <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001abe:	2300      	movs	r3, #0
 8001ac0:	60fb      	str	r3, [r7, #12]
 8001ac2:	4b0d      	ldr	r3, [pc, #52]	; (8001af8 <HAL_TIM_Base_MspInit+0xbc>)
 8001ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac6:	4a0c      	ldr	r2, [pc, #48]	; (8001af8 <HAL_TIM_Base_MspInit+0xbc>)
 8001ac8:	f043 0302 	orr.w	r3, r3, #2
 8001acc:	6453      	str	r3, [r2, #68]	; 0x44
 8001ace:	4b0a      	ldr	r3, [pc, #40]	; (8001af8 <HAL_TIM_Base_MspInit+0xbc>)
 8001ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ad2:	f003 0302 	and.w	r3, r3, #2
 8001ad6:	60fb      	str	r3, [r7, #12]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 2, 0);
 8001ada:	2200      	movs	r2, #0
 8001adc:	2102      	movs	r1, #2
 8001ade:	202e      	movs	r0, #46	; 0x2e
 8001ae0:	f001 f8c3 	bl	8002c6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8001ae4:	202e      	movs	r0, #46	; 0x2e
 8001ae6:	f001 f8dc 	bl	8002ca2 <HAL_NVIC_EnableIRQ>
}
 8001aea:	bf00      	nop
 8001aec:	3718      	adds	r7, #24
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	40010000 	.word	0x40010000
 8001af8:	40023800 	.word	0x40023800
 8001afc:	40000800 	.word	0x40000800
 8001b00:	40010400 	.word	0x40010400

08001b04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001b08:	bf00      	nop
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr

08001b12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b12:	b480      	push	{r7}
 8001b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b16:	e7fe      	b.n	8001b16 <HardFault_Handler+0x4>

08001b18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b1c:	e7fe      	b.n	8001b1c <MemManage_Handler+0x4>

08001b1e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b1e:	b480      	push	{r7}
 8001b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b22:	e7fe      	b.n	8001b22 <BusFault_Handler+0x4>

08001b24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b28:	e7fe      	b.n	8001b28 <UsageFault_Handler+0x4>

08001b2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b2a:	b480      	push	{r7}
 8001b2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b2e:	bf00      	nop
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr

08001b38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b3c:	bf00      	nop
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr

08001b46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b46:	b480      	push	{r7}
 8001b48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b4a:	bf00      	nop
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr

08001b54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b58:	f000 fb7a 	bl	8002250 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b5c:	bf00      	nop
 8001b5e:	bd80      	pop	{r7, pc}

08001b60 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */
//schaltet M2. Überprüfen, ob M1 aus ist!
	if(TIM1->SR & TIM_SR_CC1IF)// && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15)==GPIO_PIN_RESET)	//Neue Periode
 8001b64:	4b20      	ldr	r3, [pc, #128]	; (8001be8 <TIM1_CC_IRQHandler+0x88>)
 8001b66:	691b      	ldr	r3, [r3, #16]
 8001b68:	f003 0302 	and.w	r3, r3, #2
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d010      	beq.n	8001b92 <TIM1_CC_IRQHandler+0x32>
	{
		GPIOE->BSRR=(uint32_t)GPIO_PIN_9 << 16U;
 8001b70:	4b1e      	ldr	r3, [pc, #120]	; (8001bec <TIM1_CC_IRQHandler+0x8c>)
 8001b72:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b76:	619a      	str	r2, [r3, #24]
		asm("NOP");
 8001b78:	bf00      	nop
		asm("NOP");
 8001b7a:	bf00      	nop
		asm("NOP");
 8001b7c:	bf00      	nop
		GPIOB->BSRR=GPIO_PIN_15;
 8001b7e:	4b1c      	ldr	r3, [pc, #112]	; (8001bf0 <TIM1_CC_IRQHandler+0x90>)
 8001b80:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001b84:	619a      	str	r2, [r3, #24]
		//HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_SET);
		__HAL_TIM_CLEAR_IT(&htim1, TIM_IT_CC1);
 8001b86:	4b1b      	ldr	r3, [pc, #108]	; (8001bf4 <TIM1_CC_IRQHandler+0x94>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f06f 0202 	mvn.w	r2, #2
 8001b8e:	611a      	str	r2, [r3, #16]
  /* USER CODE END TIM1_CC_IRQn 0 */
  //HAL_TIM_IRQHandler(&htim1);
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */
  //int status=TIM1->CNT;
  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001b90:	e025      	b.n	8001bde <TIM1_CC_IRQHandler+0x7e>
	else if(TIM1->SR & TIM_SR_CC2IF)
 8001b92:	4b15      	ldr	r3, [pc, #84]	; (8001be8 <TIM1_CC_IRQHandler+0x88>)
 8001b94:	691b      	ldr	r3, [r3, #16]
 8001b96:	f003 0304 	and.w	r3, r3, #4
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d010      	beq.n	8001bc0 <TIM1_CC_IRQHandler+0x60>
		GPIOB->BSRR=(uint32_t)GPIO_PIN_15 << 16U;
 8001b9e:	4b14      	ldr	r3, [pc, #80]	; (8001bf0 <TIM1_CC_IRQHandler+0x90>)
 8001ba0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001ba4:	619a      	str	r2, [r3, #24]
		asm("NOP");
 8001ba6:	bf00      	nop
		asm("NOP");
 8001ba8:	bf00      	nop
		asm("NOP");
 8001baa:	bf00      	nop
		GPIOE->BSRR=GPIO_PIN_9;
 8001bac:	4b0f      	ldr	r3, [pc, #60]	; (8001bec <TIM1_CC_IRQHandler+0x8c>)
 8001bae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bb2:	619a      	str	r2, [r3, #24]
		__HAL_TIM_CLEAR_IT(&htim1, TIM_IT_CC2);
 8001bb4:	4b0f      	ldr	r3, [pc, #60]	; (8001bf4 <TIM1_CC_IRQHandler+0x94>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f06f 0204 	mvn.w	r2, #4
 8001bbc:	611a      	str	r2, [r3, #16]
}
 8001bbe:	e00e      	b.n	8001bde <TIM1_CC_IRQHandler+0x7e>
	else if(TIM1->SR & TIM_SR_CC4IF)
 8001bc0:	4b09      	ldr	r3, [pc, #36]	; (8001be8 <TIM1_CC_IRQHandler+0x88>)
 8001bc2:	691b      	ldr	r3, [r3, #16]
 8001bc4:	f003 0310 	and.w	r3, r3, #16
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d008      	beq.n	8001bde <TIM1_CC_IRQHandler+0x7e>
		GPIOE->BSRR=(uint32_t)GPIO_PIN_9 << 16U;
 8001bcc:	4b07      	ldr	r3, [pc, #28]	; (8001bec <TIM1_CC_IRQHandler+0x8c>)
 8001bce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bd2:	619a      	str	r2, [r3, #24]
		__HAL_TIM_CLEAR_IT(&htim1, TIM_IT_CC4);
 8001bd4:	4b07      	ldr	r3, [pc, #28]	; (8001bf4 <TIM1_CC_IRQHandler+0x94>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f06f 0210 	mvn.w	r2, #16
 8001bdc:	611a      	str	r2, [r3, #16]
}
 8001bde:	bf00      	nop
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr
 8001be8:	40010000 	.word	0x40010000
 8001bec:	40021000 	.word	0x40021000
 8001bf0:	40020400 	.word	0x40020400
 8001bf4:	20000280 	.word	0x20000280

08001bf8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001bf8:	b5b0      	push	{r4, r5, r7, lr}
 8001bfa:	b08e      	sub	sp, #56	; 0x38
 8001bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
//U_out einlesen
	HAL_ADC_Start_DMA(&hadc1,value_adc1,2);
 8001bfe:	2202      	movs	r2, #2
 8001c00:	49ab      	ldr	r1, [pc, #684]	; (8001eb0 <TIM4_IRQHandler+0x2b8>)
 8001c02:	48ac      	ldr	r0, [pc, #688]	; (8001eb4 <TIM4_IRQHandler+0x2bc>)
 8001c04:	f000 fb88 	bl	8002318 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2,value_adc2,2);
 8001c08:	2202      	movs	r2, #2
 8001c0a:	49ab      	ldr	r1, [pc, #684]	; (8001eb8 <TIM4_IRQHandler+0x2c0>)
 8001c0c:	48ab      	ldr	r0, [pc, #684]	; (8001ebc <TIM4_IRQHandler+0x2c4>)
 8001c0e:	f000 fb83 	bl	8002318 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc3,value_adc3,2);
 8001c12:	2202      	movs	r2, #2
 8001c14:	49aa      	ldr	r1, [pc, #680]	; (8001ec0 <TIM4_IRQHandler+0x2c8>)
 8001c16:	48ab      	ldr	r0, [pc, #684]	; (8001ec4 <TIM4_IRQHandler+0x2cc>)
 8001c18:	f000 fb7e 	bl	8002318 <HAL_ADC_Start_DMA>
	double U_out=value_adc1[0]*720/4095;
 8001c1c:	4ba4      	ldr	r3, [pc, #656]	; (8001eb0 <TIM4_IRQHandler+0x2b8>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 8001c24:	fb02 f203 	mul.w	r2, r2, r3
 8001c28:	4ba7      	ldr	r3, [pc, #668]	; (8001ec8 <TIM4_IRQHandler+0x2d0>)
 8001c2a:	fba3 1302 	umull	r1, r3, r3, r2
 8001c2e:	1ad2      	subs	r2, r2, r3
 8001c30:	0852      	lsrs	r2, r2, #1
 8001c32:	4413      	add	r3, r2
 8001c34:	0adb      	lsrs	r3, r3, #11
 8001c36:	4618      	mov	r0, r3
 8001c38:	f7fe fc08 	bl	800044c <__aeabi_ui2d>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	460b      	mov	r3, r1
 8001c40:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	U_in=value_adc1[1]*720/4095;
 8001c44:	4b9a      	ldr	r3, [pc, #616]	; (8001eb0 <TIM4_IRQHandler+0x2b8>)
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 8001c4c:	fb02 f203 	mul.w	r2, r2, r3
 8001c50:	4b9d      	ldr	r3, [pc, #628]	; (8001ec8 <TIM4_IRQHandler+0x2d0>)
 8001c52:	fba3 1302 	umull	r1, r3, r3, r2
 8001c56:	1ad2      	subs	r2, r2, r3
 8001c58:	0852      	lsrs	r2, r2, #1
 8001c5a:	4413      	add	r3, r2
 8001c5c:	0adb      	lsrs	r3, r3, #11
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f7fe fbf4 	bl	800044c <__aeabi_ui2d>
 8001c64:	4602      	mov	r2, r0
 8001c66:	460b      	mov	r3, r1
 8001c68:	4998      	ldr	r1, [pc, #608]	; (8001ecc <TIM4_IRQHandler+0x2d4>)
 8001c6a:	e9c1 2300 	strd	r2, r3, [r1]
	int U_diff=U_soll-U_out;
 8001c6e:	4b98      	ldr	r3, [pc, #608]	; (8001ed0 <TIM4_IRQHandler+0x2d8>)
 8001c70:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c74:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001c78:	f7fe faaa 	bl	80001d0 <__aeabi_dsub>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	460b      	mov	r3, r1
 8001c80:	4610      	mov	r0, r2
 8001c82:	4619      	mov	r1, r3
 8001c84:	f7fe fef6 	bl	8000a74 <__aeabi_d2iz>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
	double i_const=(double)(value_adc3[1]-value_adc3[0])*25*2/4095;
 8001c8c:	4b8c      	ldr	r3, [pc, #560]	; (8001ec0 <TIM4_IRQHandler+0x2c8>)
 8001c8e:	685a      	ldr	r2, [r3, #4]
 8001c90:	4b8b      	ldr	r3, [pc, #556]	; (8001ec0 <TIM4_IRQHandler+0x2c8>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	4618      	mov	r0, r3
 8001c98:	f7fe fbd8 	bl	800044c <__aeabi_ui2d>
 8001c9c:	f04f 0200 	mov.w	r2, #0
 8001ca0:	4b8c      	ldr	r3, [pc, #560]	; (8001ed4 <TIM4_IRQHandler+0x2dc>)
 8001ca2:	f7fe fc4d 	bl	8000540 <__aeabi_dmul>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	460b      	mov	r3, r1
 8001caa:	4610      	mov	r0, r2
 8001cac:	4619      	mov	r1, r3
 8001cae:	4602      	mov	r2, r0
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	f7fe fa8f 	bl	80001d4 <__adddf3>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	460b      	mov	r3, r1
 8001cba:	4610      	mov	r0, r2
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	a376      	add	r3, pc, #472	; (adr r3, 8001e98 <TIM4_IRQHandler+0x2a0>)
 8001cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cc4:	f7fe fd66 	bl	8000794 <__aeabi_ddiv>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	460b      	mov	r3, r1
 8001ccc:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double delta_i=U_in/L*T*a;
 8001cd0:	4b7e      	ldr	r3, [pc, #504]	; (8001ecc <TIM4_IRQHandler+0x2d4>)
 8001cd2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001cd6:	4b80      	ldr	r3, [pc, #512]	; (8001ed8 <TIM4_IRQHandler+0x2e0>)
 8001cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cdc:	f7fe fd5a 	bl	8000794 <__aeabi_ddiv>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	460b      	mov	r3, r1
 8001ce4:	4610      	mov	r0, r2
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	4b7c      	ldr	r3, [pc, #496]	; (8001edc <TIM4_IRQHandler+0x2e4>)
 8001cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cee:	f7fe fc27 	bl	8000540 <__aeabi_dmul>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	460b      	mov	r3, r1
 8001cf6:	4610      	mov	r0, r2
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	4b79      	ldr	r3, [pc, #484]	; (8001ee0 <TIM4_IRQHandler+0x2e8>)
 8001cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d00:	f7fe fc1e 	bl	8000540 <__aeabi_dmul>
 8001d04:	4602      	mov	r2, r0
 8001d06:	460b      	mov	r3, r1
 8001d08:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double i_max_ber=i_const+delta_i;
 8001d0c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d10:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001d14:	f7fe fa5e 	bl	80001d4 <__adddf3>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	460b      	mov	r3, r1
 8001d1c:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double i_max=(value_adc2[1]-value_adc2[0])*25*2/4095;
 8001d20:	4b65      	ldr	r3, [pc, #404]	; (8001eb8 <TIM4_IRQHandler+0x2c0>)
 8001d22:	685a      	ldr	r2, [r3, #4]
 8001d24:	4b64      	ldr	r3, [pc, #400]	; (8001eb8 <TIM4_IRQHandler+0x2c0>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	2232      	movs	r2, #50	; 0x32
 8001d2c:	fb02 f203 	mul.w	r2, r2, r3
 8001d30:	4b65      	ldr	r3, [pc, #404]	; (8001ec8 <TIM4_IRQHandler+0x2d0>)
 8001d32:	fba3 1302 	umull	r1, r3, r3, r2
 8001d36:	1ad2      	subs	r2, r2, r3
 8001d38:	0852      	lsrs	r2, r2, #1
 8001d3a:	4413      	add	r3, r2
 8001d3c:	0adb      	lsrs	r3, r3, #11
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7fe fb84 	bl	800044c <__aeabi_ui2d>
 8001d44:	4602      	mov	r2, r0
 8001d46:	460b      	mov	r3, r1
 8001d48:	e9c7 2302 	strd	r2, r3, [r7, #8]
	if(i_max_ber>24 || i_const>15)
 8001d4c:	f04f 0200 	mov.w	r2, #0
 8001d50:	4b64      	ldr	r3, [pc, #400]	; (8001ee4 <TIM4_IRQHandler+0x2ec>)
 8001d52:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001d56:	f7fe fe83 	bl	8000a60 <__aeabi_dcmpgt>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d109      	bne.n	8001d74 <TIM4_IRQHandler+0x17c>
 8001d60:	f04f 0200 	mov.w	r2, #0
 8001d64:	4b60      	ldr	r3, [pc, #384]	; (8001ee8 <TIM4_IRQHandler+0x2f0>)
 8001d66:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001d6a:	f7fe fe79 	bl	8000a60 <__aeabi_dcmpgt>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d00c      	beq.n	8001d8e <TIM4_IRQHandler+0x196>
		a=a-0.2;
 8001d74:	4b5a      	ldr	r3, [pc, #360]	; (8001ee0 <TIM4_IRQHandler+0x2e8>)
 8001d76:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d7a:	a349      	add	r3, pc, #292	; (adr r3, 8001ea0 <TIM4_IRQHandler+0x2a8>)
 8001d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d80:	f7fe fa26 	bl	80001d0 <__aeabi_dsub>
 8001d84:	4602      	mov	r2, r0
 8001d86:	460b      	mov	r3, r1
 8001d88:	4955      	ldr	r1, [pc, #340]	; (8001ee0 <TIM4_IRQHandler+0x2e8>)
 8001d8a:	e9c1 2300 	strd	r2, r3, [r1]
	uint16_t K_p=1/600;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	80fb      	strh	r3, [r7, #6]
	uint16_t K_i=100;
 8001d92:	2364      	movs	r3, #100	; 0x64
 8001d94:	80bb      	strh	r3, [r7, #4]
	if(abs(U_diff)>50)	//Große Differenz -> Durchgriff auf Stellgröße
 8001d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	bfb8      	it	lt
 8001d9c:	425b      	neglt	r3, r3
 8001d9e:	2b32      	cmp	r3, #50	; 0x32
 8001da0:	dd21      	ble.n	8001de6 <TIM4_IRQHandler+0x1ee>
	{
		a=1-U_in/U_soll;
 8001da2:	4b4a      	ldr	r3, [pc, #296]	; (8001ecc <TIM4_IRQHandler+0x2d4>)
 8001da4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001da8:	4b49      	ldr	r3, [pc, #292]	; (8001ed0 <TIM4_IRQHandler+0x2d8>)
 8001daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dae:	f7fe fcf1 	bl	8000794 <__aeabi_ddiv>
 8001db2:	4602      	mov	r2, r0
 8001db4:	460b      	mov	r3, r1
 8001db6:	f04f 0000 	mov.w	r0, #0
 8001dba:	494c      	ldr	r1, [pc, #304]	; (8001eec <TIM4_IRQHandler+0x2f4>)
 8001dbc:	f7fe fa08 	bl	80001d0 <__aeabi_dsub>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	460b      	mov	r3, r1
 8001dc4:	4946      	ldr	r1, [pc, #280]	; (8001ee0 <TIM4_IRQHandler+0x2e8>)
 8001dc6:	e9c1 2300 	strd	r2, r3, [r1]
		a2=1-a;
 8001dca:	4b45      	ldr	r3, [pc, #276]	; (8001ee0 <TIM4_IRQHandler+0x2e8>)
 8001dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dd0:	f04f 0000 	mov.w	r0, #0
 8001dd4:	4945      	ldr	r1, [pc, #276]	; (8001eec <TIM4_IRQHandler+0x2f4>)
 8001dd6:	f7fe f9fb 	bl	80001d0 <__aeabi_dsub>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	460b      	mov	r3, r1
 8001dde:	4944      	ldr	r1, [pc, #272]	; (8001ef0 <TIM4_IRQHandler+0x2f8>)
 8001de0:	e9c1 2300 	strd	r2, r3, [r1]
 8001de4:	e0cc      	b.n	8001f80 <TIM4_IRQHandler+0x388>
			a2=a*U_in/(U_soll-U_in);
		}*/
	}
	else	//PI-Regler
	{
			U_sum_neu=U_sum+U_diff;	//U_sum global
 8001de6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001de8:	f7fe fb40 	bl	800046c <__aeabi_i2d>
 8001dec:	4b41      	ldr	r3, [pc, #260]	; (8001ef4 <TIM4_IRQHandler+0x2fc>)
 8001dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001df2:	f7fe f9ef 	bl	80001d4 <__adddf3>
 8001df6:	4602      	mov	r2, r0
 8001df8:	460b      	mov	r3, r1
 8001dfa:	493f      	ldr	r1, [pc, #252]	; (8001ef8 <TIM4_IRQHandler+0x300>)
 8001dfc:	e9c1 2300 	strd	r2, r3, [r1]
			a=K_p*U_diff+K_i*T*U_sum;
 8001e00:	88fb      	ldrh	r3, [r7, #6]
 8001e02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e04:	fb02 f303 	mul.w	r3, r2, r3
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f7fe fb2f 	bl	800046c <__aeabi_i2d>
 8001e0e:	4604      	mov	r4, r0
 8001e10:	460d      	mov	r5, r1
 8001e12:	88bb      	ldrh	r3, [r7, #4]
 8001e14:	4618      	mov	r0, r3
 8001e16:	f7fe fb29 	bl	800046c <__aeabi_i2d>
 8001e1a:	4b30      	ldr	r3, [pc, #192]	; (8001edc <TIM4_IRQHandler+0x2e4>)
 8001e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e20:	f7fe fb8e 	bl	8000540 <__aeabi_dmul>
 8001e24:	4602      	mov	r2, r0
 8001e26:	460b      	mov	r3, r1
 8001e28:	4610      	mov	r0, r2
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	4b31      	ldr	r3, [pc, #196]	; (8001ef4 <TIM4_IRQHandler+0x2fc>)
 8001e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e32:	f7fe fb85 	bl	8000540 <__aeabi_dmul>
 8001e36:	4602      	mov	r2, r0
 8001e38:	460b      	mov	r3, r1
 8001e3a:	4620      	mov	r0, r4
 8001e3c:	4629      	mov	r1, r5
 8001e3e:	f7fe f9c9 	bl	80001d4 <__adddf3>
 8001e42:	4602      	mov	r2, r0
 8001e44:	460b      	mov	r3, r1
 8001e46:	4926      	ldr	r1, [pc, #152]	; (8001ee0 <TIM4_IRQHandler+0x2e8>)
 8001e48:	e9c1 2300 	strd	r2, r3, [r1]
			if(a<0)
 8001e4c:	4b24      	ldr	r3, [pc, #144]	; (8001ee0 <TIM4_IRQHandler+0x2e8>)
 8001e4e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e52:	f04f 0200 	mov.w	r2, #0
 8001e56:	f04f 0300 	mov.w	r3, #0
 8001e5a:	f7fe fde3 	bl	8000a24 <__aeabi_dcmplt>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d006      	beq.n	8001e72 <TIM4_IRQHandler+0x27a>
				a=0;
 8001e64:	491e      	ldr	r1, [pc, #120]	; (8001ee0 <TIM4_IRQHandler+0x2e8>)
 8001e66:	f04f 0200 	mov.w	r2, #0
 8001e6a:	f04f 0300 	mov.w	r3, #0
 8001e6e:	e9c1 2300 	strd	r2, r3, [r1]
			if(a>0.95)
 8001e72:	4b1b      	ldr	r3, [pc, #108]	; (8001ee0 <TIM4_IRQHandler+0x2e8>)
 8001e74:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e78:	a30b      	add	r3, pc, #44	; (adr r3, 8001ea8 <TIM4_IRQHandler+0x2b0>)
 8001e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e7e:	f7fe fdef 	bl	8000a60 <__aeabi_dcmpgt>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d039      	beq.n	8001efc <TIM4_IRQHandler+0x304>
				a=0.95;
 8001e88:	4915      	ldr	r1, [pc, #84]	; (8001ee0 <TIM4_IRQHandler+0x2e8>)
 8001e8a:	a307      	add	r3, pc, #28	; (adr r3, 8001ea8 <TIM4_IRQHandler+0x2b0>)
 8001e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e90:	e9c1 2300 	strd	r2, r3, [r1]
 8001e94:	e038      	b.n	8001f08 <TIM4_IRQHandler+0x310>
 8001e96:	bf00      	nop
 8001e98:	00000000 	.word	0x00000000
 8001e9c:	40affe00 	.word	0x40affe00
 8001ea0:	9999999a 	.word	0x9999999a
 8001ea4:	3fc99999 	.word	0x3fc99999
 8001ea8:	66666666 	.word	0x66666666
 8001eac:	3fee6666 	.word	0x3fee6666
 8001eb0:	20000278 	.word	0x20000278
 8001eb4:	20000188 	.word	0x20000188
 8001eb8:	20000328 	.word	0x20000328
 8001ebc:	200000d0 	.word	0x200000d0
 8001ec0:	20000120 	.word	0x20000120
 8001ec4:	200001d0 	.word	0x200001d0
 8001ec8:	00100101 	.word	0x00100101
 8001ecc:	20000118 	.word	0x20000118
 8001ed0:	08005168 	.word	0x08005168
 8001ed4:	40390000 	.word	0x40390000
 8001ed8:	08005158 	.word	0x08005158
 8001edc:	08005160 	.word	0x08005160
 8001ee0:	20000000 	.word	0x20000000
 8001ee4:	40380000 	.word	0x40380000
 8001ee8:	402e0000 	.word	0x402e0000
 8001eec:	3ff00000 	.word	0x3ff00000
 8001ef0:	20000008 	.word	0x20000008
 8001ef4:	20000330 	.word	0x20000330
 8001ef8:	20000338 	.word	0x20000338
			else
				U_sum=U_sum_neu;
 8001efc:	4b5e      	ldr	r3, [pc, #376]	; (8002078 <TIM4_IRQHandler+0x480>)
 8001efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f02:	495e      	ldr	r1, [pc, #376]	; (800207c <TIM4_IRQHandler+0x484>)
 8001f04:	e9c1 2300 	strd	r2, r3, [r1]
			if(delta_i>2*i_const)	//Lückbetrieb
 8001f08:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	460b      	mov	r3, r1
 8001f10:	f7fe f960 	bl	80001d4 <__adddf3>
 8001f14:	4602      	mov	r2, r0
 8001f16:	460b      	mov	r3, r1
 8001f18:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001f1c:	f7fe fda0 	bl	8000a60 <__aeabi_dcmpgt>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d01f      	beq.n	8001f66 <TIM4_IRQHandler+0x36e>
				a2=a*U_in/(U_soll-U_in);
 8001f26:	4b56      	ldr	r3, [pc, #344]	; (8002080 <TIM4_IRQHandler+0x488>)
 8001f28:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f2c:	4b55      	ldr	r3, [pc, #340]	; (8002084 <TIM4_IRQHandler+0x48c>)
 8001f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f32:	f7fe fb05 	bl	8000540 <__aeabi_dmul>
 8001f36:	4602      	mov	r2, r0
 8001f38:	460b      	mov	r3, r1
 8001f3a:	4614      	mov	r4, r2
 8001f3c:	461d      	mov	r5, r3
 8001f3e:	4b52      	ldr	r3, [pc, #328]	; (8002088 <TIM4_IRQHandler+0x490>)
 8001f40:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f44:	4b4f      	ldr	r3, [pc, #316]	; (8002084 <TIM4_IRQHandler+0x48c>)
 8001f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f4a:	f7fe f941 	bl	80001d0 <__aeabi_dsub>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	460b      	mov	r3, r1
 8001f52:	4620      	mov	r0, r4
 8001f54:	4629      	mov	r1, r5
 8001f56:	f7fe fc1d 	bl	8000794 <__aeabi_ddiv>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	460b      	mov	r3, r1
 8001f5e:	494b      	ldr	r1, [pc, #300]	; (800208c <TIM4_IRQHandler+0x494>)
 8001f60:	e9c1 2300 	strd	r2, r3, [r1]
 8001f64:	e00c      	b.n	8001f80 <TIM4_IRQHandler+0x388>
			else
				a2=1-a;
 8001f66:	4b46      	ldr	r3, [pc, #280]	; (8002080 <TIM4_IRQHandler+0x488>)
 8001f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f6c:	f04f 0000 	mov.w	r0, #0
 8001f70:	4947      	ldr	r1, [pc, #284]	; (8002090 <TIM4_IRQHandler+0x498>)
 8001f72:	f7fe f92d 	bl	80001d0 <__aeabi_dsub>
 8001f76:	4602      	mov	r2, r0
 8001f78:	460b      	mov	r3, r1
 8001f7a:	4944      	ldr	r1, [pc, #272]	; (800208c <TIM4_IRQHandler+0x494>)
 8001f7c:	e9c1 2300 	strd	r2, r3, [r1]
	}
	uint16_t period=TIM1->ARR;
 8001f80:	4b44      	ldr	r3, [pc, #272]	; (8002094 <TIM4_IRQHandler+0x49c>)
 8001f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f84:	807b      	strh	r3, [r7, #2]
	TIM1->CCR1=0;	//evtl beim UG interrupt
 8001f86:	4b43      	ldr	r3, [pc, #268]	; (8002094 <TIM4_IRQHandler+0x49c>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2=a*period;
 8001f8c:	887b      	ldrh	r3, [r7, #2]
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f7fe fa6c 	bl	800046c <__aeabi_i2d>
 8001f94:	4b3a      	ldr	r3, [pc, #232]	; (8002080 <TIM4_IRQHandler+0x488>)
 8001f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f9a:	f7fe fad1 	bl	8000540 <__aeabi_dmul>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	460b      	mov	r3, r1
 8001fa2:	4c3c      	ldr	r4, [pc, #240]	; (8002094 <TIM4_IRQHandler+0x49c>)
 8001fa4:	4610      	mov	r0, r2
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	f7fe fd8c 	bl	8000ac4 <__aeabi_d2uiz>
 8001fac:	4603      	mov	r3, r0
 8001fae:	63a3      	str	r3, [r4, #56]	; 0x38
	//TIM1->CCR3=a*period;
	if((a+a2)*period>5010)
 8001fb0:	4b33      	ldr	r3, [pc, #204]	; (8002080 <TIM4_IRQHandler+0x488>)
 8001fb2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001fb6:	4b35      	ldr	r3, [pc, #212]	; (800208c <TIM4_IRQHandler+0x494>)
 8001fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fbc:	f7fe f90a 	bl	80001d4 <__adddf3>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	460b      	mov	r3, r1
 8001fc4:	4614      	mov	r4, r2
 8001fc6:	461d      	mov	r5, r3
 8001fc8:	887b      	ldrh	r3, [r7, #2]
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f7fe fa4e 	bl	800046c <__aeabi_i2d>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	460b      	mov	r3, r1
 8001fd4:	4620      	mov	r0, r4
 8001fd6:	4629      	mov	r1, r5
 8001fd8:	f7fe fab2 	bl	8000540 <__aeabi_dmul>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	460b      	mov	r3, r1
 8001fe0:	4610      	mov	r0, r2
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	a322      	add	r3, pc, #136	; (adr r3, 8002070 <TIM4_IRQHandler+0x478>)
 8001fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fea:	f7fe fd39 	bl	8000a60 <__aeabi_dcmpgt>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d004      	beq.n	8001ffe <TIM4_IRQHandler+0x406>
		TIM1->CCR4=5010;
 8001ff4:	4b27      	ldr	r3, [pc, #156]	; (8002094 <TIM4_IRQHandler+0x49c>)
 8001ff6:	f241 3292 	movw	r2, #5010	; 0x1392
 8001ffa:	641a      	str	r2, [r3, #64]	; 0x40
 8001ffc:	e01e      	b.n	800203c <TIM4_IRQHandler+0x444>
	else
		TIM1->CCR4=(a+a2)*period;
 8001ffe:	4b20      	ldr	r3, [pc, #128]	; (8002080 <TIM4_IRQHandler+0x488>)
 8002000:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002004:	4b21      	ldr	r3, [pc, #132]	; (800208c <TIM4_IRQHandler+0x494>)
 8002006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800200a:	f7fe f8e3 	bl	80001d4 <__adddf3>
 800200e:	4602      	mov	r2, r0
 8002010:	460b      	mov	r3, r1
 8002012:	4614      	mov	r4, r2
 8002014:	461d      	mov	r5, r3
 8002016:	887b      	ldrh	r3, [r7, #2]
 8002018:	4618      	mov	r0, r3
 800201a:	f7fe fa27 	bl	800046c <__aeabi_i2d>
 800201e:	4602      	mov	r2, r0
 8002020:	460b      	mov	r3, r1
 8002022:	4620      	mov	r0, r4
 8002024:	4629      	mov	r1, r5
 8002026:	f7fe fa8b 	bl	8000540 <__aeabi_dmul>
 800202a:	4602      	mov	r2, r0
 800202c:	460b      	mov	r3, r1
 800202e:	4c19      	ldr	r4, [pc, #100]	; (8002094 <TIM4_IRQHandler+0x49c>)
 8002030:	4610      	mov	r0, r2
 8002032:	4619      	mov	r1, r3
 8002034:	f7fe fd46 	bl	8000ac4 <__aeabi_d2uiz>
 8002038:	4603      	mov	r3, r0
 800203a:	6423      	str	r3, [r4, #64]	; 0x40
	if(period-TIM1->CCR4<safety_dist)
 800203c:	887a      	ldrh	r2, [r7, #2]
 800203e:	4b15      	ldr	r3, [pc, #84]	; (8002094 <TIM4_IRQHandler+0x49c>)
 8002040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002042:	1ad3      	subs	r3, r2, r3
 8002044:	4a14      	ldr	r2, [pc, #80]	; (8002098 <TIM4_IRQHandler+0x4a0>)
 8002046:	8812      	ldrh	r2, [r2, #0]
 8002048:	4293      	cmp	r3, r2
 800204a:	d207      	bcs.n	800205c <TIM4_IRQHandler+0x464>
		__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC4);
 800204c:	4b13      	ldr	r3, [pc, #76]	; (800209c <TIM4_IRQHandler+0x4a4>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	68da      	ldr	r2, [r3, #12]
 8002052:	4b12      	ldr	r3, [pc, #72]	; (800209c <TIM4_IRQHandler+0x4a4>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f022 0210 	bic.w	r2, r2, #16
 800205a:	60da      	str	r2, [r3, #12]
	//else
		//__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC4);
	//TIM1->CNT=TIM8->CNT;
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800205c:	4810      	ldr	r0, [pc, #64]	; (80020a0 <TIM4_IRQHandler+0x4a8>)
 800205e:	f002 f92b 	bl	80042b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002062:	bf00      	nop
 8002064:	3738      	adds	r7, #56	; 0x38
 8002066:	46bd      	mov	sp, r7
 8002068:	bdb0      	pop	{r4, r5, r7, pc}
 800206a:	bf00      	nop
 800206c:	f3af 8000 	nop.w
 8002070:	00000000 	.word	0x00000000
 8002074:	40b39200 	.word	0x40b39200
 8002078:	20000338 	.word	0x20000338
 800207c:	20000330 	.word	0x20000330
 8002080:	20000000 	.word	0x20000000
 8002084:	20000118 	.word	0x20000118
 8002088:	08005168 	.word	0x08005168
 800208c:	20000008 	.word	0x20000008
 8002090:	3ff00000 	.word	0x3ff00000
 8002094:	40010000 	.word	0x40010000
 8002098:	08005170 	.word	0x08005170
 800209c:	20000280 	.word	0x20000280
 80020a0:	20000088 	.word	0x20000088

080020a4 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */
	//schaltet M1. Überprüfen, ob M2 aus ist!
	if(TIM8->SR & TIM_SR_CC1IF)// && HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_9)==GPIO_PIN_RESET)	//Neue Periode
 80020a8:	4b0e      	ldr	r3, [pc, #56]	; (80020e4 <TIM8_CC_IRQHandler+0x40>)
 80020aa:	691b      	ldr	r3, [r3, #16]
 80020ac:	f003 0302 	and.w	r3, r3, #2
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d006      	beq.n	80020c2 <TIM8_CC_IRQHandler+0x1e>
	{
		//_NOP();	//müsste automatisch eingestellt werden (PWM channel 1)
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 80020b4:	2201      	movs	r2, #1
 80020b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80020ba:	480b      	ldr	r0, [pc, #44]	; (80020e8 <TIM8_CC_IRQHandler+0x44>)
 80020bc:	f001 fb18 	bl	80036f0 <HAL_GPIO_WritePin>
 80020c0:	e00b      	b.n	80020da <TIM8_CC_IRQHandler+0x36>
	}
	else if(TIM8->SR & TIM_SR_CC2IF)
 80020c2:	4b08      	ldr	r3, [pc, #32]	; (80020e4 <TIM8_CC_IRQHandler+0x40>)
 80020c4:	691b      	ldr	r3, [r3, #16]
 80020c6:	f003 0304 	and.w	r3, r3, #4
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d005      	beq.n	80020da <TIM8_CC_IRQHandler+0x36>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 80020ce:	2200      	movs	r2, #0
 80020d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80020d4:	4804      	ldr	r0, [pc, #16]	; (80020e8 <TIM8_CC_IRQHandler+0x44>)
 80020d6:	f001 fb0b 	bl	80036f0 <HAL_GPIO_WritePin>
	}
  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80020da:	4804      	ldr	r0, [pc, #16]	; (80020ec <TIM8_CC_IRQHandler+0x48>)
 80020dc:	f002 f8ec 	bl	80042b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 80020e0:	bf00      	nop
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	40010400 	.word	0x40010400
 80020e8:	40020400 	.word	0x40020400
 80020ec:	20000040 	.word	0x20000040

080020f0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80020f4:	4802      	ldr	r0, [pc, #8]	; (8002100 <DMA2_Stream0_IRQHandler+0x10>)
 80020f6:	f000 fef5 	bl	8002ee4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80020fa:	bf00      	nop
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	20000218 	.word	0x20000218

08002104 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8002108:	4802      	ldr	r0, [pc, #8]	; (8002114 <DMA2_Stream1_IRQHandler+0x10>)
 800210a:	f000 feeb 	bl	8002ee4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800210e:	bf00      	nop
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	20000128 	.word	0x20000128

08002118 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800211c:	4802      	ldr	r0, [pc, #8]	; (8002128 <DMA2_Stream3_IRQHandler+0x10>)
 800211e:	f000 fee1 	bl	8002ee4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8002122:	bf00      	nop
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	200002c8 	.word	0x200002c8

0800212c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002130:	4b08      	ldr	r3, [pc, #32]	; (8002154 <SystemInit+0x28>)
 8002132:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002136:	4a07      	ldr	r2, [pc, #28]	; (8002154 <SystemInit+0x28>)
 8002138:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800213c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002140:	4b04      	ldr	r3, [pc, #16]	; (8002154 <SystemInit+0x28>)
 8002142:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002146:	609a      	str	r2, [r3, #8]
#endif
}
 8002148:	bf00      	nop
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	e000ed00 	.word	0xe000ed00

08002158 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002158:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002190 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800215c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800215e:	e003      	b.n	8002168 <LoopCopyDataInit>

08002160 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002160:	4b0c      	ldr	r3, [pc, #48]	; (8002194 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002162:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002164:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002166:	3104      	adds	r1, #4

08002168 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002168:	480b      	ldr	r0, [pc, #44]	; (8002198 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800216a:	4b0c      	ldr	r3, [pc, #48]	; (800219c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800216c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800216e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002170:	d3f6      	bcc.n	8002160 <CopyDataInit>
  ldr  r2, =_sbss
 8002172:	4a0b      	ldr	r2, [pc, #44]	; (80021a0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002174:	e002      	b.n	800217c <LoopFillZerobss>

08002176 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002176:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002178:	f842 3b04 	str.w	r3, [r2], #4

0800217c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800217c:	4b09      	ldr	r3, [pc, #36]	; (80021a4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800217e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002180:	d3f9      	bcc.n	8002176 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002182:	f7ff ffd3 	bl	800212c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002186:	f002 ffaf 	bl	80050e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800218a:	f7fe feab 	bl	8000ee4 <main>
  bx  lr    
 800218e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002190:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002194:	0800519c 	.word	0x0800519c
  ldr  r0, =_sdata
 8002198:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800219c:	2000001c 	.word	0x2000001c
  ldr  r2, =_sbss
 80021a0:	20000020 	.word	0x20000020
  ldr  r3, = _ebss
 80021a4:	20000344 	.word	0x20000344

080021a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021a8:	e7fe      	b.n	80021a8 <ADC_IRQHandler>
	...

080021ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80021b0:	4b0e      	ldr	r3, [pc, #56]	; (80021ec <HAL_Init+0x40>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a0d      	ldr	r2, [pc, #52]	; (80021ec <HAL_Init+0x40>)
 80021b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80021bc:	4b0b      	ldr	r3, [pc, #44]	; (80021ec <HAL_Init+0x40>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a0a      	ldr	r2, [pc, #40]	; (80021ec <HAL_Init+0x40>)
 80021c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021c8:	4b08      	ldr	r3, [pc, #32]	; (80021ec <HAL_Init+0x40>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a07      	ldr	r2, [pc, #28]	; (80021ec <HAL_Init+0x40>)
 80021ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021d4:	2003      	movs	r0, #3
 80021d6:	f000 fd3d 	bl	8002c54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021da:	2000      	movs	r0, #0
 80021dc:	f000 f808 	bl	80021f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021e0:	f7ff fac4 	bl	800176c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021e4:	2300      	movs	r3, #0
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	40023c00 	.word	0x40023c00

080021f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021f8:	4b12      	ldr	r3, [pc, #72]	; (8002244 <HAL_InitTick+0x54>)
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	4b12      	ldr	r3, [pc, #72]	; (8002248 <HAL_InitTick+0x58>)
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	4619      	mov	r1, r3
 8002202:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002206:	fbb3 f3f1 	udiv	r3, r3, r1
 800220a:	fbb2 f3f3 	udiv	r3, r2, r3
 800220e:	4618      	mov	r0, r3
 8002210:	f000 fd55 	bl	8002cbe <HAL_SYSTICK_Config>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d001      	beq.n	800221e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e00e      	b.n	800223c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2b0f      	cmp	r3, #15
 8002222:	d80a      	bhi.n	800223a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002224:	2200      	movs	r2, #0
 8002226:	6879      	ldr	r1, [r7, #4]
 8002228:	f04f 30ff 	mov.w	r0, #4294967295
 800222c:	f000 fd1d 	bl	8002c6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002230:	4a06      	ldr	r2, [pc, #24]	; (800224c <HAL_InitTick+0x5c>)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002236:	2300      	movs	r3, #0
 8002238:	e000      	b.n	800223c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
}
 800223c:	4618      	mov	r0, r3
 800223e:	3708      	adds	r7, #8
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	20000010 	.word	0x20000010
 8002248:	20000018 	.word	0x20000018
 800224c:	20000014 	.word	0x20000014

08002250 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002254:	4b06      	ldr	r3, [pc, #24]	; (8002270 <HAL_IncTick+0x20>)
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	461a      	mov	r2, r3
 800225a:	4b06      	ldr	r3, [pc, #24]	; (8002274 <HAL_IncTick+0x24>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4413      	add	r3, r2
 8002260:	4a04      	ldr	r2, [pc, #16]	; (8002274 <HAL_IncTick+0x24>)
 8002262:	6013      	str	r3, [r2, #0]
}
 8002264:	bf00      	nop
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	20000018 	.word	0x20000018
 8002274:	20000340 	.word	0x20000340

08002278 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0
  return uwTick;
 800227c:	4b03      	ldr	r3, [pc, #12]	; (800228c <HAL_GetTick+0x14>)
 800227e:	681b      	ldr	r3, [r3, #0]
}
 8002280:	4618      	mov	r0, r3
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop
 800228c:	20000340 	.word	0x20000340

08002290 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b084      	sub	sp, #16
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002298:	2300      	movs	r3, #0
 800229a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d101      	bne.n	80022a6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e033      	b.n	800230e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d109      	bne.n	80022c2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f7ff fa84 	bl	80017bc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2200      	movs	r2, #0
 80022b8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2200      	movs	r2, #0
 80022be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c6:	f003 0310 	and.w	r3, r3, #16
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d118      	bne.n	8002300 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80022d6:	f023 0302 	bic.w	r3, r3, #2
 80022da:	f043 0202 	orr.w	r2, r3, #2
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f000 fa68 	bl	80027b8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2200      	movs	r2, #0
 80022ec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f2:	f023 0303 	bic.w	r3, r3, #3
 80022f6:	f043 0201 	orr.w	r2, r3, #1
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	641a      	str	r2, [r3, #64]	; 0x40
 80022fe:	e001      	b.n	8002304 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2200      	movs	r2, #0
 8002308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800230c:	7bfb      	ldrb	r3, [r7, #15]
}
 800230e:	4618      	mov	r0, r3
 8002310:	3710      	adds	r7, #16
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
	...

08002318 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b086      	sub	sp, #24
 800231c:	af00      	add	r7, sp, #0
 800231e:	60f8      	str	r0, [r7, #12]
 8002320:	60b9      	str	r1, [r7, #8]
 8002322:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002324:	2300      	movs	r3, #0
 8002326:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800232e:	2b01      	cmp	r3, #1
 8002330:	d101      	bne.n	8002336 <HAL_ADC_Start_DMA+0x1e>
 8002332:	2302      	movs	r3, #2
 8002334:	e0e9      	b.n	800250a <HAL_ADC_Start_DMA+0x1f2>
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2201      	movs	r2, #1
 800233a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	f003 0301 	and.w	r3, r3, #1
 8002348:	2b01      	cmp	r3, #1
 800234a:	d018      	beq.n	800237e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	689a      	ldr	r2, [r3, #8]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f042 0201 	orr.w	r2, r2, #1
 800235a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800235c:	4b6d      	ldr	r3, [pc, #436]	; (8002514 <HAL_ADC_Start_DMA+0x1fc>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a6d      	ldr	r2, [pc, #436]	; (8002518 <HAL_ADC_Start_DMA+0x200>)
 8002362:	fba2 2303 	umull	r2, r3, r2, r3
 8002366:	0c9a      	lsrs	r2, r3, #18
 8002368:	4613      	mov	r3, r2
 800236a:	005b      	lsls	r3, r3, #1
 800236c:	4413      	add	r3, r2
 800236e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002370:	e002      	b.n	8002378 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	3b01      	subs	r3, #1
 8002376:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d1f9      	bne.n	8002372 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002388:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800238c:	d107      	bne.n	800239e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	689a      	ldr	r2, [r3, #8]
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800239c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	f003 0301 	and.w	r3, r3, #1
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	f040 80a1 	bne.w	80024f0 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80023b6:	f023 0301 	bic.w	r3, r3, #1
 80023ba:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d007      	beq.n	80023e0 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80023d8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023ec:	d106      	bne.n	80023fc <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023f2:	f023 0206 	bic.w	r2, r3, #6
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	645a      	str	r2, [r3, #68]	; 0x44
 80023fa:	e002      	b.n	8002402 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2200      	movs	r2, #0
 8002400:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2200      	movs	r2, #0
 8002406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800240a:	4b44      	ldr	r3, [pc, #272]	; (800251c <HAL_ADC_Start_DMA+0x204>)
 800240c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002412:	4a43      	ldr	r2, [pc, #268]	; (8002520 <HAL_ADC_Start_DMA+0x208>)
 8002414:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800241a:	4a42      	ldr	r2, [pc, #264]	; (8002524 <HAL_ADC_Start_DMA+0x20c>)
 800241c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002422:	4a41      	ldr	r2, [pc, #260]	; (8002528 <HAL_ADC_Start_DMA+0x210>)
 8002424:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800242e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	685a      	ldr	r2, [r3, #4]
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800243e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	689a      	ldr	r2, [r3, #8]
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800244e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	334c      	adds	r3, #76	; 0x4c
 800245a:	4619      	mov	r1, r3
 800245c:	68ba      	ldr	r2, [r7, #8]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	f000 fce8 	bl	8002e34 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f003 031f 	and.w	r3, r3, #31
 800246c:	2b00      	cmp	r3, #0
 800246e:	d12a      	bne.n	80024c6 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a2d      	ldr	r2, [pc, #180]	; (800252c <HAL_ADC_Start_DMA+0x214>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d015      	beq.n	80024a6 <HAL_ADC_Start_DMA+0x18e>
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a2c      	ldr	r2, [pc, #176]	; (8002530 <HAL_ADC_Start_DMA+0x218>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d105      	bne.n	8002490 <HAL_ADC_Start_DMA+0x178>
 8002484:	4b25      	ldr	r3, [pc, #148]	; (800251c <HAL_ADC_Start_DMA+0x204>)
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	f003 031f 	and.w	r3, r3, #31
 800248c:	2b00      	cmp	r3, #0
 800248e:	d00a      	beq.n	80024a6 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a27      	ldr	r2, [pc, #156]	; (8002534 <HAL_ADC_Start_DMA+0x21c>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d136      	bne.n	8002508 <HAL_ADC_Start_DMA+0x1f0>
 800249a:	4b20      	ldr	r3, [pc, #128]	; (800251c <HAL_ADC_Start_DMA+0x204>)
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	f003 0310 	and.w	r3, r3, #16
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d130      	bne.n	8002508 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d129      	bne.n	8002508 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	689a      	ldr	r2, [r3, #8]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80024c2:	609a      	str	r2, [r3, #8]
 80024c4:	e020      	b.n	8002508 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a18      	ldr	r2, [pc, #96]	; (800252c <HAL_ADC_Start_DMA+0x214>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d11b      	bne.n	8002508 <HAL_ADC_Start_DMA+0x1f0>
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d114      	bne.n	8002508 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	689a      	ldr	r2, [r3, #8]
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80024ec:	609a      	str	r2, [r3, #8]
 80024ee:	e00b      	b.n	8002508 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f4:	f043 0210 	orr.w	r2, r3, #16
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002500:	f043 0201 	orr.w	r2, r3, #1
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002508:	2300      	movs	r3, #0
}
 800250a:	4618      	mov	r0, r3
 800250c:	3718      	adds	r7, #24
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	20000010 	.word	0x20000010
 8002518:	431bde83 	.word	0x431bde83
 800251c:	40012300 	.word	0x40012300
 8002520:	080029b1 	.word	0x080029b1
 8002524:	08002a6b 	.word	0x08002a6b
 8002528:	08002a87 	.word	0x08002a87
 800252c:	40012000 	.word	0x40012000
 8002530:	40012100 	.word	0x40012100
 8002534:	40012200 	.word	0x40012200

08002538 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002538:	b480      	push	{r7}
 800253a:	b083      	sub	sp, #12
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002540:	bf00      	nop
 8002542:	370c      	adds	r7, #12
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr

0800254c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002554:	bf00      	nop
 8002556:	370c      	adds	r7, #12
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr

08002560 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002560:	b480      	push	{r7}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002568:	bf00      	nop
 800256a:	370c      	adds	r7, #12
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr

08002574 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002574:	b480      	push	{r7}
 8002576:	b085      	sub	sp, #20
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800257e:	2300      	movs	r3, #0
 8002580:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002588:	2b01      	cmp	r3, #1
 800258a:	d101      	bne.n	8002590 <HAL_ADC_ConfigChannel+0x1c>
 800258c:	2302      	movs	r3, #2
 800258e:	e105      	b.n	800279c <HAL_ADC_ConfigChannel+0x228>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2201      	movs	r2, #1
 8002594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	2b09      	cmp	r3, #9
 800259e:	d925      	bls.n	80025ec <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	68d9      	ldr	r1, [r3, #12]
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	b29b      	uxth	r3, r3
 80025ac:	461a      	mov	r2, r3
 80025ae:	4613      	mov	r3, r2
 80025b0:	005b      	lsls	r3, r3, #1
 80025b2:	4413      	add	r3, r2
 80025b4:	3b1e      	subs	r3, #30
 80025b6:	2207      	movs	r2, #7
 80025b8:	fa02 f303 	lsl.w	r3, r2, r3
 80025bc:	43da      	mvns	r2, r3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	400a      	ands	r2, r1
 80025c4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	68d9      	ldr	r1, [r3, #12]
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	689a      	ldr	r2, [r3, #8]
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	b29b      	uxth	r3, r3
 80025d6:	4618      	mov	r0, r3
 80025d8:	4603      	mov	r3, r0
 80025da:	005b      	lsls	r3, r3, #1
 80025dc:	4403      	add	r3, r0
 80025de:	3b1e      	subs	r3, #30
 80025e0:	409a      	lsls	r2, r3
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	430a      	orrs	r2, r1
 80025e8:	60da      	str	r2, [r3, #12]
 80025ea:	e022      	b.n	8002632 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	6919      	ldr	r1, [r3, #16]
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	b29b      	uxth	r3, r3
 80025f8:	461a      	mov	r2, r3
 80025fa:	4613      	mov	r3, r2
 80025fc:	005b      	lsls	r3, r3, #1
 80025fe:	4413      	add	r3, r2
 8002600:	2207      	movs	r2, #7
 8002602:	fa02 f303 	lsl.w	r3, r2, r3
 8002606:	43da      	mvns	r2, r3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	400a      	ands	r2, r1
 800260e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	6919      	ldr	r1, [r3, #16]
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	689a      	ldr	r2, [r3, #8]
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	b29b      	uxth	r3, r3
 8002620:	4618      	mov	r0, r3
 8002622:	4603      	mov	r3, r0
 8002624:	005b      	lsls	r3, r3, #1
 8002626:	4403      	add	r3, r0
 8002628:	409a      	lsls	r2, r3
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	430a      	orrs	r2, r1
 8002630:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	2b06      	cmp	r3, #6
 8002638:	d824      	bhi.n	8002684 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	685a      	ldr	r2, [r3, #4]
 8002644:	4613      	mov	r3, r2
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	4413      	add	r3, r2
 800264a:	3b05      	subs	r3, #5
 800264c:	221f      	movs	r2, #31
 800264e:	fa02 f303 	lsl.w	r3, r2, r3
 8002652:	43da      	mvns	r2, r3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	400a      	ands	r2, r1
 800265a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	b29b      	uxth	r3, r3
 8002668:	4618      	mov	r0, r3
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	685a      	ldr	r2, [r3, #4]
 800266e:	4613      	mov	r3, r2
 8002670:	009b      	lsls	r3, r3, #2
 8002672:	4413      	add	r3, r2
 8002674:	3b05      	subs	r3, #5
 8002676:	fa00 f203 	lsl.w	r2, r0, r3
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	430a      	orrs	r2, r1
 8002680:	635a      	str	r2, [r3, #52]	; 0x34
 8002682:	e04c      	b.n	800271e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	2b0c      	cmp	r3, #12
 800268a:	d824      	bhi.n	80026d6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	685a      	ldr	r2, [r3, #4]
 8002696:	4613      	mov	r3, r2
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	4413      	add	r3, r2
 800269c:	3b23      	subs	r3, #35	; 0x23
 800269e:	221f      	movs	r2, #31
 80026a0:	fa02 f303 	lsl.w	r3, r2, r3
 80026a4:	43da      	mvns	r2, r3
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	400a      	ands	r2, r1
 80026ac:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	4618      	mov	r0, r3
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	685a      	ldr	r2, [r3, #4]
 80026c0:	4613      	mov	r3, r2
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	4413      	add	r3, r2
 80026c6:	3b23      	subs	r3, #35	; 0x23
 80026c8:	fa00 f203 	lsl.w	r2, r0, r3
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	430a      	orrs	r2, r1
 80026d2:	631a      	str	r2, [r3, #48]	; 0x30
 80026d4:	e023      	b.n	800271e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	685a      	ldr	r2, [r3, #4]
 80026e0:	4613      	mov	r3, r2
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	4413      	add	r3, r2
 80026e6:	3b41      	subs	r3, #65	; 0x41
 80026e8:	221f      	movs	r2, #31
 80026ea:	fa02 f303 	lsl.w	r3, r2, r3
 80026ee:	43da      	mvns	r2, r3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	400a      	ands	r2, r1
 80026f6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	b29b      	uxth	r3, r3
 8002704:	4618      	mov	r0, r3
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	685a      	ldr	r2, [r3, #4]
 800270a:	4613      	mov	r3, r2
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	4413      	add	r3, r2
 8002710:	3b41      	subs	r3, #65	; 0x41
 8002712:	fa00 f203 	lsl.w	r2, r0, r3
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	430a      	orrs	r2, r1
 800271c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800271e:	4b22      	ldr	r3, [pc, #136]	; (80027a8 <HAL_ADC_ConfigChannel+0x234>)
 8002720:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a21      	ldr	r2, [pc, #132]	; (80027ac <HAL_ADC_ConfigChannel+0x238>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d109      	bne.n	8002740 <HAL_ADC_ConfigChannel+0x1cc>
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	2b12      	cmp	r3, #18
 8002732:	d105      	bne.n	8002740 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a19      	ldr	r2, [pc, #100]	; (80027ac <HAL_ADC_ConfigChannel+0x238>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d123      	bne.n	8002792 <HAL_ADC_ConfigChannel+0x21e>
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	2b10      	cmp	r3, #16
 8002750:	d003      	beq.n	800275a <HAL_ADC_ConfigChannel+0x1e6>
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	2b11      	cmp	r3, #17
 8002758:	d11b      	bne.n	8002792 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	2b10      	cmp	r3, #16
 800276c:	d111      	bne.n	8002792 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800276e:	4b10      	ldr	r3, [pc, #64]	; (80027b0 <HAL_ADC_ConfigChannel+0x23c>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a10      	ldr	r2, [pc, #64]	; (80027b4 <HAL_ADC_ConfigChannel+0x240>)
 8002774:	fba2 2303 	umull	r2, r3, r2, r3
 8002778:	0c9a      	lsrs	r2, r3, #18
 800277a:	4613      	mov	r3, r2
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	4413      	add	r3, r2
 8002780:	005b      	lsls	r3, r3, #1
 8002782:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002784:	e002      	b.n	800278c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	3b01      	subs	r3, #1
 800278a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d1f9      	bne.n	8002786 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2200      	movs	r2, #0
 8002796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800279a:	2300      	movs	r3, #0
}
 800279c:	4618      	mov	r0, r3
 800279e:	3714      	adds	r7, #20
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr
 80027a8:	40012300 	.word	0x40012300
 80027ac:	40012000 	.word	0x40012000
 80027b0:	20000010 	.word	0x20000010
 80027b4:	431bde83 	.word	0x431bde83

080027b8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b085      	sub	sp, #20
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80027c0:	4b79      	ldr	r3, [pc, #484]	; (80029a8 <ADC_Init+0x1f0>)
 80027c2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	685a      	ldr	r2, [r3, #4]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	431a      	orrs	r2, r3
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	685a      	ldr	r2, [r3, #4]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80027ec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	6859      	ldr	r1, [r3, #4]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	691b      	ldr	r3, [r3, #16]
 80027f8:	021a      	lsls	r2, r3, #8
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	430a      	orrs	r2, r1
 8002800:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	685a      	ldr	r2, [r3, #4]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002810:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	6859      	ldr	r1, [r3, #4]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	689a      	ldr	r2, [r3, #8]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	430a      	orrs	r2, r1
 8002822:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	689a      	ldr	r2, [r3, #8]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002832:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	6899      	ldr	r1, [r3, #8]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	68da      	ldr	r2, [r3, #12]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	430a      	orrs	r2, r1
 8002844:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800284a:	4a58      	ldr	r2, [pc, #352]	; (80029ac <ADC_Init+0x1f4>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d022      	beq.n	8002896 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	689a      	ldr	r2, [r3, #8]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800285e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	6899      	ldr	r1, [r3, #8]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	430a      	orrs	r2, r1
 8002870:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	689a      	ldr	r2, [r3, #8]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002880:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	6899      	ldr	r1, [r3, #8]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	430a      	orrs	r2, r1
 8002892:	609a      	str	r2, [r3, #8]
 8002894:	e00f      	b.n	80028b6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	689a      	ldr	r2, [r3, #8]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80028a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	689a      	ldr	r2, [r3, #8]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80028b4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	689a      	ldr	r2, [r3, #8]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f022 0202 	bic.w	r2, r2, #2
 80028c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	6899      	ldr	r1, [r3, #8]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	7e1b      	ldrb	r3, [r3, #24]
 80028d0:	005a      	lsls	r2, r3, #1
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	430a      	orrs	r2, r1
 80028d8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d01b      	beq.n	800291c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	685a      	ldr	r2, [r3, #4]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80028f2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	685a      	ldr	r2, [r3, #4]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002902:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	6859      	ldr	r1, [r3, #4]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800290e:	3b01      	subs	r3, #1
 8002910:	035a      	lsls	r2, r3, #13
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	430a      	orrs	r2, r1
 8002918:	605a      	str	r2, [r3, #4]
 800291a:	e007      	b.n	800292c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	685a      	ldr	r2, [r3, #4]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800292a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800293a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	69db      	ldr	r3, [r3, #28]
 8002946:	3b01      	subs	r3, #1
 8002948:	051a      	lsls	r2, r3, #20
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	430a      	orrs	r2, r1
 8002950:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	689a      	ldr	r2, [r3, #8]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002960:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	6899      	ldr	r1, [r3, #8]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800296e:	025a      	lsls	r2, r3, #9
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	430a      	orrs	r2, r1
 8002976:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	689a      	ldr	r2, [r3, #8]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002986:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	6899      	ldr	r1, [r3, #8]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	695b      	ldr	r3, [r3, #20]
 8002992:	029a      	lsls	r2, r3, #10
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	430a      	orrs	r2, r1
 800299a:	609a      	str	r2, [r3, #8]
}
 800299c:	bf00      	nop
 800299e:	3714      	adds	r7, #20
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr
 80029a8:	40012300 	.word	0x40012300
 80029ac:	0f000001 	.word	0x0f000001

080029b0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b084      	sub	sp, #16
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029bc:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d13c      	bne.n	8002a44 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ce:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d12b      	bne.n	8002a3c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d127      	bne.n	8002a3c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029f2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d006      	beq.n	8002a08 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d119      	bne.n	8002a3c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	685a      	ldr	r2, [r3, #4]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f022 0220 	bic.w	r2, r2, #32
 8002a16:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a28:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d105      	bne.n	8002a3c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a34:	f043 0201 	orr.w	r2, r3, #1
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002a3c:	68f8      	ldr	r0, [r7, #12]
 8002a3e:	f7ff fd7b 	bl	8002538 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002a42:	e00e      	b.n	8002a62 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a48:	f003 0310 	and.w	r3, r3, #16
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d003      	beq.n	8002a58 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002a50:	68f8      	ldr	r0, [r7, #12]
 8002a52:	f7ff fd85 	bl	8002560 <HAL_ADC_ErrorCallback>
}
 8002a56:	e004      	b.n	8002a62 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	4798      	blx	r3
}
 8002a62:	bf00      	nop
 8002a64:	3710      	adds	r7, #16
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}

08002a6a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002a6a:	b580      	push	{r7, lr}
 8002a6c:	b084      	sub	sp, #16
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a76:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002a78:	68f8      	ldr	r0, [r7, #12]
 8002a7a:	f7ff fd67 	bl	800254c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002a7e:	bf00      	nop
 8002a80:	3710      	adds	r7, #16
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}

08002a86 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002a86:	b580      	push	{r7, lr}
 8002a88:	b084      	sub	sp, #16
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a92:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2240      	movs	r2, #64	; 0x40
 8002a98:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a9e:	f043 0204 	orr.w	r2, r3, #4
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002aa6:	68f8      	ldr	r0, [r7, #12]
 8002aa8:	f7ff fd5a 	bl	8002560 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002aac:	bf00      	nop
 8002aae:	3710      	adds	r7, #16
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}

08002ab4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b085      	sub	sp, #20
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	f003 0307 	and.w	r3, r3, #7
 8002ac2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ac4:	4b0c      	ldr	r3, [pc, #48]	; (8002af8 <__NVIC_SetPriorityGrouping+0x44>)
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002aca:	68ba      	ldr	r2, [r7, #8]
 8002acc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002adc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ae0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ae4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ae6:	4a04      	ldr	r2, [pc, #16]	; (8002af8 <__NVIC_SetPriorityGrouping+0x44>)
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	60d3      	str	r3, [r2, #12]
}
 8002aec:	bf00      	nop
 8002aee:	3714      	adds	r7, #20
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr
 8002af8:	e000ed00 	.word	0xe000ed00

08002afc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002afc:	b480      	push	{r7}
 8002afe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b00:	4b04      	ldr	r3, [pc, #16]	; (8002b14 <__NVIC_GetPriorityGrouping+0x18>)
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	0a1b      	lsrs	r3, r3, #8
 8002b06:	f003 0307 	and.w	r3, r3, #7
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b12:	4770      	bx	lr
 8002b14:	e000ed00 	.word	0xe000ed00

08002b18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	4603      	mov	r3, r0
 8002b20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	db0b      	blt.n	8002b42 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b2a:	79fb      	ldrb	r3, [r7, #7]
 8002b2c:	f003 021f 	and.w	r2, r3, #31
 8002b30:	4907      	ldr	r1, [pc, #28]	; (8002b50 <__NVIC_EnableIRQ+0x38>)
 8002b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b36:	095b      	lsrs	r3, r3, #5
 8002b38:	2001      	movs	r0, #1
 8002b3a:	fa00 f202 	lsl.w	r2, r0, r2
 8002b3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b42:	bf00      	nop
 8002b44:	370c      	adds	r7, #12
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr
 8002b4e:	bf00      	nop
 8002b50:	e000e100 	.word	0xe000e100

08002b54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	6039      	str	r1, [r7, #0]
 8002b5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	db0a      	blt.n	8002b7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	b2da      	uxtb	r2, r3
 8002b6c:	490c      	ldr	r1, [pc, #48]	; (8002ba0 <__NVIC_SetPriority+0x4c>)
 8002b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b72:	0112      	lsls	r2, r2, #4
 8002b74:	b2d2      	uxtb	r2, r2
 8002b76:	440b      	add	r3, r1
 8002b78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b7c:	e00a      	b.n	8002b94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	b2da      	uxtb	r2, r3
 8002b82:	4908      	ldr	r1, [pc, #32]	; (8002ba4 <__NVIC_SetPriority+0x50>)
 8002b84:	79fb      	ldrb	r3, [r7, #7]
 8002b86:	f003 030f 	and.w	r3, r3, #15
 8002b8a:	3b04      	subs	r3, #4
 8002b8c:	0112      	lsls	r2, r2, #4
 8002b8e:	b2d2      	uxtb	r2, r2
 8002b90:	440b      	add	r3, r1
 8002b92:	761a      	strb	r2, [r3, #24]
}
 8002b94:	bf00      	nop
 8002b96:	370c      	adds	r7, #12
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr
 8002ba0:	e000e100 	.word	0xe000e100
 8002ba4:	e000ed00 	.word	0xe000ed00

08002ba8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b089      	sub	sp, #36	; 0x24
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	60f8      	str	r0, [r7, #12]
 8002bb0:	60b9      	str	r1, [r7, #8]
 8002bb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	f003 0307 	and.w	r3, r3, #7
 8002bba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	f1c3 0307 	rsb	r3, r3, #7
 8002bc2:	2b04      	cmp	r3, #4
 8002bc4:	bf28      	it	cs
 8002bc6:	2304      	movcs	r3, #4
 8002bc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	3304      	adds	r3, #4
 8002bce:	2b06      	cmp	r3, #6
 8002bd0:	d902      	bls.n	8002bd8 <NVIC_EncodePriority+0x30>
 8002bd2:	69fb      	ldr	r3, [r7, #28]
 8002bd4:	3b03      	subs	r3, #3
 8002bd6:	e000      	b.n	8002bda <NVIC_EncodePriority+0x32>
 8002bd8:	2300      	movs	r3, #0
 8002bda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bdc:	f04f 32ff 	mov.w	r2, #4294967295
 8002be0:	69bb      	ldr	r3, [r7, #24]
 8002be2:	fa02 f303 	lsl.w	r3, r2, r3
 8002be6:	43da      	mvns	r2, r3
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	401a      	ands	r2, r3
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bf0:	f04f 31ff 	mov.w	r1, #4294967295
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	fa01 f303 	lsl.w	r3, r1, r3
 8002bfa:	43d9      	mvns	r1, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c00:	4313      	orrs	r3, r2
         );
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3724      	adds	r7, #36	; 0x24
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr
	...

08002c10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b082      	sub	sp, #8
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	3b01      	subs	r3, #1
 8002c1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c20:	d301      	bcc.n	8002c26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c22:	2301      	movs	r3, #1
 8002c24:	e00f      	b.n	8002c46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c26:	4a0a      	ldr	r2, [pc, #40]	; (8002c50 <SysTick_Config+0x40>)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	3b01      	subs	r3, #1
 8002c2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c2e:	210f      	movs	r1, #15
 8002c30:	f04f 30ff 	mov.w	r0, #4294967295
 8002c34:	f7ff ff8e 	bl	8002b54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c38:	4b05      	ldr	r3, [pc, #20]	; (8002c50 <SysTick_Config+0x40>)
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c3e:	4b04      	ldr	r3, [pc, #16]	; (8002c50 <SysTick_Config+0x40>)
 8002c40:	2207      	movs	r2, #7
 8002c42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c44:	2300      	movs	r3, #0
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3708      	adds	r7, #8
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	e000e010 	.word	0xe000e010

08002c54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b082      	sub	sp, #8
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c5c:	6878      	ldr	r0, [r7, #4]
 8002c5e:	f7ff ff29 	bl	8002ab4 <__NVIC_SetPriorityGrouping>
}
 8002c62:	bf00      	nop
 8002c64:	3708      	adds	r7, #8
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}

08002c6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c6a:	b580      	push	{r7, lr}
 8002c6c:	b086      	sub	sp, #24
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	4603      	mov	r3, r0
 8002c72:	60b9      	str	r1, [r7, #8]
 8002c74:	607a      	str	r2, [r7, #4]
 8002c76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c7c:	f7ff ff3e 	bl	8002afc <__NVIC_GetPriorityGrouping>
 8002c80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	68b9      	ldr	r1, [r7, #8]
 8002c86:	6978      	ldr	r0, [r7, #20]
 8002c88:	f7ff ff8e 	bl	8002ba8 <NVIC_EncodePriority>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c92:	4611      	mov	r1, r2
 8002c94:	4618      	mov	r0, r3
 8002c96:	f7ff ff5d 	bl	8002b54 <__NVIC_SetPriority>
}
 8002c9a:	bf00      	nop
 8002c9c:	3718      	adds	r7, #24
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}

08002ca2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ca2:	b580      	push	{r7, lr}
 8002ca4:	b082      	sub	sp, #8
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	4603      	mov	r3, r0
 8002caa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f7ff ff31 	bl	8002b18 <__NVIC_EnableIRQ>
}
 8002cb6:	bf00      	nop
 8002cb8:	3708      	adds	r7, #8
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}

08002cbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cbe:	b580      	push	{r7, lr}
 8002cc0:	b082      	sub	sp, #8
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f7ff ffa2 	bl	8002c10 <SysTick_Config>
 8002ccc:	4603      	mov	r3, r0
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3708      	adds	r7, #8
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
	...

08002cd8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b086      	sub	sp, #24
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002ce4:	f7ff fac8 	bl	8002278 <HAL_GetTick>
 8002ce8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d101      	bne.n	8002cf4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e099      	b.n	8002e28 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2202      	movs	r2, #2
 8002d00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f022 0201 	bic.w	r2, r2, #1
 8002d12:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d14:	e00f      	b.n	8002d36 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d16:	f7ff faaf 	bl	8002278 <HAL_GetTick>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	1ad3      	subs	r3, r2, r3
 8002d20:	2b05      	cmp	r3, #5
 8002d22:	d908      	bls.n	8002d36 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2220      	movs	r2, #32
 8002d28:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2203      	movs	r2, #3
 8002d2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002d32:	2303      	movs	r3, #3
 8002d34:	e078      	b.n	8002e28 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 0301 	and.w	r3, r3, #1
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d1e8      	bne.n	8002d16 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002d4c:	697a      	ldr	r2, [r7, #20]
 8002d4e:	4b38      	ldr	r3, [pc, #224]	; (8002e30 <HAL_DMA_Init+0x158>)
 8002d50:	4013      	ands	r3, r2
 8002d52:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	685a      	ldr	r2, [r3, #4]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d62:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	691b      	ldr	r3, [r3, #16]
 8002d68:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	699b      	ldr	r3, [r3, #24]
 8002d74:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d7a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6a1b      	ldr	r3, [r3, #32]
 8002d80:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d82:	697a      	ldr	r2, [r7, #20]
 8002d84:	4313      	orrs	r3, r2
 8002d86:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d8c:	2b04      	cmp	r3, #4
 8002d8e:	d107      	bne.n	8002da0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	697a      	ldr	r2, [r7, #20]
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	697a      	ldr	r2, [r7, #20]
 8002da6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	695b      	ldr	r3, [r3, #20]
 8002dae:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	f023 0307 	bic.w	r3, r3, #7
 8002db6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dbc:	697a      	ldr	r2, [r7, #20]
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc6:	2b04      	cmp	r3, #4
 8002dc8:	d117      	bne.n	8002dfa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dce:	697a      	ldr	r2, [r7, #20]
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d00e      	beq.n	8002dfa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	f000 fa6f 	bl	80032c0 <DMA_CheckFifoParam>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d008      	beq.n	8002dfa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2240      	movs	r2, #64	; 0x40
 8002dec:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2201      	movs	r2, #1
 8002df2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002df6:	2301      	movs	r3, #1
 8002df8:	e016      	b.n	8002e28 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	697a      	ldr	r2, [r7, #20]
 8002e00:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f000 fa26 	bl	8003254 <DMA_CalcBaseAndBitshift>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e10:	223f      	movs	r2, #63	; 0x3f
 8002e12:	409a      	lsls	r2, r3
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2201      	movs	r2, #1
 8002e22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002e26:	2300      	movs	r3, #0
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3718      	adds	r7, #24
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	f010803f 	.word	0xf010803f

08002e34 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b086      	sub	sp, #24
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	60f8      	str	r0, [r7, #12]
 8002e3c:	60b9      	str	r1, [r7, #8]
 8002e3e:	607a      	str	r2, [r7, #4]
 8002e40:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e42:	2300      	movs	r3, #0
 8002e44:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e4a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d101      	bne.n	8002e5a <HAL_DMA_Start_IT+0x26>
 8002e56:	2302      	movs	r3, #2
 8002e58:	e040      	b.n	8002edc <HAL_DMA_Start_IT+0xa8>
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d12f      	bne.n	8002ece <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2202      	movs	r2, #2
 8002e72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	68b9      	ldr	r1, [r7, #8]
 8002e82:	68f8      	ldr	r0, [r7, #12]
 8002e84:	f000 f9b8 	bl	80031f8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e8c:	223f      	movs	r2, #63	; 0x3f
 8002e8e:	409a      	lsls	r2, r3
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f042 0216 	orr.w	r2, r2, #22
 8002ea2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d007      	beq.n	8002ebc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f042 0208 	orr.w	r2, r2, #8
 8002eba:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f042 0201 	orr.w	r2, r2, #1
 8002eca:	601a      	str	r2, [r3, #0]
 8002ecc:	e005      	b.n	8002eda <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002ed6:	2302      	movs	r3, #2
 8002ed8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002eda:	7dfb      	ldrb	r3, [r7, #23]
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	3718      	adds	r7, #24
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}

08002ee4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b086      	sub	sp, #24
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002eec:	2300      	movs	r3, #0
 8002eee:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002ef0:	4b92      	ldr	r3, [pc, #584]	; (800313c <HAL_DMA_IRQHandler+0x258>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a92      	ldr	r2, [pc, #584]	; (8003140 <HAL_DMA_IRQHandler+0x25c>)
 8002ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8002efa:	0a9b      	lsrs	r3, r3, #10
 8002efc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f02:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f0e:	2208      	movs	r2, #8
 8002f10:	409a      	lsls	r2, r3
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	4013      	ands	r3, r2
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d01a      	beq.n	8002f50 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 0304 	and.w	r3, r3, #4
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d013      	beq.n	8002f50 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f022 0204 	bic.w	r2, r2, #4
 8002f36:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f3c:	2208      	movs	r2, #8
 8002f3e:	409a      	lsls	r2, r3
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f48:	f043 0201 	orr.w	r2, r3, #1
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f54:	2201      	movs	r2, #1
 8002f56:	409a      	lsls	r2, r3
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d012      	beq.n	8002f86 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	695b      	ldr	r3, [r3, #20]
 8002f66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d00b      	beq.n	8002f86 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f72:	2201      	movs	r2, #1
 8002f74:	409a      	lsls	r2, r3
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f7e:	f043 0202 	orr.w	r2, r3, #2
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f8a:	2204      	movs	r2, #4
 8002f8c:	409a      	lsls	r2, r3
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	4013      	ands	r3, r2
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d012      	beq.n	8002fbc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 0302 	and.w	r3, r3, #2
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d00b      	beq.n	8002fbc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fa8:	2204      	movs	r2, #4
 8002faa:	409a      	lsls	r2, r3
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fb4:	f043 0204 	orr.w	r2, r3, #4
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fc0:	2210      	movs	r2, #16
 8002fc2:	409a      	lsls	r2, r3
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d043      	beq.n	8003054 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 0308 	and.w	r3, r3, #8
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d03c      	beq.n	8003054 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fde:	2210      	movs	r2, #16
 8002fe0:	409a      	lsls	r2, r3
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d018      	beq.n	8003026 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d108      	bne.n	8003014 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003006:	2b00      	cmp	r3, #0
 8003008:	d024      	beq.n	8003054 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	4798      	blx	r3
 8003012:	e01f      	b.n	8003054 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003018:	2b00      	cmp	r3, #0
 800301a:	d01b      	beq.n	8003054 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	4798      	blx	r3
 8003024:	e016      	b.n	8003054 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003030:	2b00      	cmp	r3, #0
 8003032:	d107      	bne.n	8003044 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f022 0208 	bic.w	r2, r2, #8
 8003042:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003048:	2b00      	cmp	r3, #0
 800304a:	d003      	beq.n	8003054 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003058:	2220      	movs	r2, #32
 800305a:	409a      	lsls	r2, r3
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	4013      	ands	r3, r2
 8003060:	2b00      	cmp	r3, #0
 8003062:	f000 808e 	beq.w	8003182 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0310 	and.w	r3, r3, #16
 8003070:	2b00      	cmp	r3, #0
 8003072:	f000 8086 	beq.w	8003182 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800307a:	2220      	movs	r2, #32
 800307c:	409a      	lsls	r2, r3
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003088:	b2db      	uxtb	r3, r3
 800308a:	2b05      	cmp	r3, #5
 800308c:	d136      	bne.n	80030fc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f022 0216 	bic.w	r2, r2, #22
 800309c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	695a      	ldr	r2, [r3, #20]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80030ac:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d103      	bne.n	80030be <HAL_DMA_IRQHandler+0x1da>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d007      	beq.n	80030ce <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f022 0208 	bic.w	r2, r2, #8
 80030cc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030d2:	223f      	movs	r2, #63	; 0x3f
 80030d4:	409a      	lsls	r2, r3
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2200      	movs	r2, #0
 80030de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2201      	movs	r2, #1
 80030e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d07d      	beq.n	80031ee <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	4798      	blx	r3
        }
        return;
 80030fa:	e078      	b.n	80031ee <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003106:	2b00      	cmp	r3, #0
 8003108:	d01c      	beq.n	8003144 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003114:	2b00      	cmp	r3, #0
 8003116:	d108      	bne.n	800312a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800311c:	2b00      	cmp	r3, #0
 800311e:	d030      	beq.n	8003182 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	4798      	blx	r3
 8003128:	e02b      	b.n	8003182 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800312e:	2b00      	cmp	r3, #0
 8003130:	d027      	beq.n	8003182 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	4798      	blx	r3
 800313a:	e022      	b.n	8003182 <HAL_DMA_IRQHandler+0x29e>
 800313c:	20000010 	.word	0x20000010
 8003140:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800314e:	2b00      	cmp	r3, #0
 8003150:	d10f      	bne.n	8003172 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f022 0210 	bic.w	r2, r2, #16
 8003160:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2200      	movs	r2, #0
 8003166:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2201      	movs	r2, #1
 800316e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003176:	2b00      	cmp	r3, #0
 8003178:	d003      	beq.n	8003182 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003186:	2b00      	cmp	r3, #0
 8003188:	d032      	beq.n	80031f0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800318e:	f003 0301 	and.w	r3, r3, #1
 8003192:	2b00      	cmp	r3, #0
 8003194:	d022      	beq.n	80031dc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2205      	movs	r2, #5
 800319a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f022 0201 	bic.w	r2, r2, #1
 80031ac:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	3301      	adds	r3, #1
 80031b2:	60bb      	str	r3, [r7, #8]
 80031b4:	697a      	ldr	r2, [r7, #20]
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d307      	bcc.n	80031ca <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 0301 	and.w	r3, r3, #1
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d1f2      	bne.n	80031ae <HAL_DMA_IRQHandler+0x2ca>
 80031c8:	e000      	b.n	80031cc <HAL_DMA_IRQHandler+0x2e8>
          break;
 80031ca:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2200      	movs	r2, #0
 80031d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2201      	movs	r2, #1
 80031d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d005      	beq.n	80031f0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	4798      	blx	r3
 80031ec:	e000      	b.n	80031f0 <HAL_DMA_IRQHandler+0x30c>
        return;
 80031ee:	bf00      	nop
    }
  }
}
 80031f0:	3718      	adds	r7, #24
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop

080031f8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b085      	sub	sp, #20
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	60f8      	str	r0, [r7, #12]
 8003200:	60b9      	str	r1, [r7, #8]
 8003202:	607a      	str	r2, [r7, #4]
 8003204:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003214:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	683a      	ldr	r2, [r7, #0]
 800321c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	2b40      	cmp	r3, #64	; 0x40
 8003224:	d108      	bne.n	8003238 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	68ba      	ldr	r2, [r7, #8]
 8003234:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003236:	e007      	b.n	8003248 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	68ba      	ldr	r2, [r7, #8]
 800323e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	687a      	ldr	r2, [r7, #4]
 8003246:	60da      	str	r2, [r3, #12]
}
 8003248:	bf00      	nop
 800324a:	3714      	adds	r7, #20
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr

08003254 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003254:	b480      	push	{r7}
 8003256:	b085      	sub	sp, #20
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	b2db      	uxtb	r3, r3
 8003262:	3b10      	subs	r3, #16
 8003264:	4a14      	ldr	r2, [pc, #80]	; (80032b8 <DMA_CalcBaseAndBitshift+0x64>)
 8003266:	fba2 2303 	umull	r2, r3, r2, r3
 800326a:	091b      	lsrs	r3, r3, #4
 800326c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800326e:	4a13      	ldr	r2, [pc, #76]	; (80032bc <DMA_CalcBaseAndBitshift+0x68>)
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	4413      	add	r3, r2
 8003274:	781b      	ldrb	r3, [r3, #0]
 8003276:	461a      	mov	r2, r3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2b03      	cmp	r3, #3
 8003280:	d909      	bls.n	8003296 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800328a:	f023 0303 	bic.w	r3, r3, #3
 800328e:	1d1a      	adds	r2, r3, #4
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	659a      	str	r2, [r3, #88]	; 0x58
 8003294:	e007      	b.n	80032a6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800329e:	f023 0303 	bic.w	r3, r3, #3
 80032a2:	687a      	ldr	r2, [r7, #4]
 80032a4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3714      	adds	r7, #20
 80032ae:	46bd      	mov	sp, r7
 80032b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b4:	4770      	bx	lr
 80032b6:	bf00      	nop
 80032b8:	aaaaaaab 	.word	0xaaaaaaab
 80032bc:	08005184 	.word	0x08005184

080032c0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b085      	sub	sp, #20
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032c8:	2300      	movs	r3, #0
 80032ca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032d0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	699b      	ldr	r3, [r3, #24]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d11f      	bne.n	800331a <DMA_CheckFifoParam+0x5a>
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	2b03      	cmp	r3, #3
 80032de:	d856      	bhi.n	800338e <DMA_CheckFifoParam+0xce>
 80032e0:	a201      	add	r2, pc, #4	; (adr r2, 80032e8 <DMA_CheckFifoParam+0x28>)
 80032e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032e6:	bf00      	nop
 80032e8:	080032f9 	.word	0x080032f9
 80032ec:	0800330b 	.word	0x0800330b
 80032f0:	080032f9 	.word	0x080032f9
 80032f4:	0800338f 	.word	0x0800338f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003300:	2b00      	cmp	r3, #0
 8003302:	d046      	beq.n	8003392 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003308:	e043      	b.n	8003392 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800330e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003312:	d140      	bne.n	8003396 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003318:	e03d      	b.n	8003396 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	699b      	ldr	r3, [r3, #24]
 800331e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003322:	d121      	bne.n	8003368 <DMA_CheckFifoParam+0xa8>
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	2b03      	cmp	r3, #3
 8003328:	d837      	bhi.n	800339a <DMA_CheckFifoParam+0xda>
 800332a:	a201      	add	r2, pc, #4	; (adr r2, 8003330 <DMA_CheckFifoParam+0x70>)
 800332c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003330:	08003341 	.word	0x08003341
 8003334:	08003347 	.word	0x08003347
 8003338:	08003341 	.word	0x08003341
 800333c:	08003359 	.word	0x08003359
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	73fb      	strb	r3, [r7, #15]
      break;
 8003344:	e030      	b.n	80033a8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800334a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d025      	beq.n	800339e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003356:	e022      	b.n	800339e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800335c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003360:	d11f      	bne.n	80033a2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003366:	e01c      	b.n	80033a2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	2b02      	cmp	r3, #2
 800336c:	d903      	bls.n	8003376 <DMA_CheckFifoParam+0xb6>
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	2b03      	cmp	r3, #3
 8003372:	d003      	beq.n	800337c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003374:	e018      	b.n	80033a8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	73fb      	strb	r3, [r7, #15]
      break;
 800337a:	e015      	b.n	80033a8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003380:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003384:	2b00      	cmp	r3, #0
 8003386:	d00e      	beq.n	80033a6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	73fb      	strb	r3, [r7, #15]
      break;
 800338c:	e00b      	b.n	80033a6 <DMA_CheckFifoParam+0xe6>
      break;
 800338e:	bf00      	nop
 8003390:	e00a      	b.n	80033a8 <DMA_CheckFifoParam+0xe8>
      break;
 8003392:	bf00      	nop
 8003394:	e008      	b.n	80033a8 <DMA_CheckFifoParam+0xe8>
      break;
 8003396:	bf00      	nop
 8003398:	e006      	b.n	80033a8 <DMA_CheckFifoParam+0xe8>
      break;
 800339a:	bf00      	nop
 800339c:	e004      	b.n	80033a8 <DMA_CheckFifoParam+0xe8>
      break;
 800339e:	bf00      	nop
 80033a0:	e002      	b.n	80033a8 <DMA_CheckFifoParam+0xe8>
      break;   
 80033a2:	bf00      	nop
 80033a4:	e000      	b.n	80033a8 <DMA_CheckFifoParam+0xe8>
      break;
 80033a6:	bf00      	nop
    }
  } 
  
  return status; 
 80033a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3714      	adds	r7, #20
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr
 80033b6:	bf00      	nop

080033b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b089      	sub	sp, #36	; 0x24
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80033c2:	2300      	movs	r3, #0
 80033c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80033c6:	2300      	movs	r3, #0
 80033c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80033ca:	2300      	movs	r3, #0
 80033cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033ce:	2300      	movs	r3, #0
 80033d0:	61fb      	str	r3, [r7, #28]
 80033d2:	e16b      	b.n	80036ac <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80033d4:	2201      	movs	r2, #1
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	fa02 f303 	lsl.w	r3, r2, r3
 80033dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	697a      	ldr	r2, [r7, #20]
 80033e4:	4013      	ands	r3, r2
 80033e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80033e8:	693a      	ldr	r2, [r7, #16]
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	429a      	cmp	r2, r3
 80033ee:	f040 815a 	bne.w	80036a6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	f003 0303 	and.w	r3, r3, #3
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d005      	beq.n	800340a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003406:	2b02      	cmp	r3, #2
 8003408:	d130      	bne.n	800346c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003410:	69fb      	ldr	r3, [r7, #28]
 8003412:	005b      	lsls	r3, r3, #1
 8003414:	2203      	movs	r2, #3
 8003416:	fa02 f303 	lsl.w	r3, r2, r3
 800341a:	43db      	mvns	r3, r3
 800341c:	69ba      	ldr	r2, [r7, #24]
 800341e:	4013      	ands	r3, r2
 8003420:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	68da      	ldr	r2, [r3, #12]
 8003426:	69fb      	ldr	r3, [r7, #28]
 8003428:	005b      	lsls	r3, r3, #1
 800342a:	fa02 f303 	lsl.w	r3, r2, r3
 800342e:	69ba      	ldr	r2, [r7, #24]
 8003430:	4313      	orrs	r3, r2
 8003432:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	69ba      	ldr	r2, [r7, #24]
 8003438:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003440:	2201      	movs	r2, #1
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	fa02 f303 	lsl.w	r3, r2, r3
 8003448:	43db      	mvns	r3, r3
 800344a:	69ba      	ldr	r2, [r7, #24]
 800344c:	4013      	ands	r3, r2
 800344e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	091b      	lsrs	r3, r3, #4
 8003456:	f003 0201 	and.w	r2, r3, #1
 800345a:	69fb      	ldr	r3, [r7, #28]
 800345c:	fa02 f303 	lsl.w	r3, r2, r3
 8003460:	69ba      	ldr	r2, [r7, #24]
 8003462:	4313      	orrs	r3, r2
 8003464:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	69ba      	ldr	r2, [r7, #24]
 800346a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	f003 0303 	and.w	r3, r3, #3
 8003474:	2b03      	cmp	r3, #3
 8003476:	d017      	beq.n	80034a8 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	005b      	lsls	r3, r3, #1
 8003482:	2203      	movs	r2, #3
 8003484:	fa02 f303 	lsl.w	r3, r2, r3
 8003488:	43db      	mvns	r3, r3
 800348a:	69ba      	ldr	r2, [r7, #24]
 800348c:	4013      	ands	r3, r2
 800348e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	689a      	ldr	r2, [r3, #8]
 8003494:	69fb      	ldr	r3, [r7, #28]
 8003496:	005b      	lsls	r3, r3, #1
 8003498:	fa02 f303 	lsl.w	r3, r2, r3
 800349c:	69ba      	ldr	r2, [r7, #24]
 800349e:	4313      	orrs	r3, r2
 80034a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	69ba      	ldr	r2, [r7, #24]
 80034a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	f003 0303 	and.w	r3, r3, #3
 80034b0:	2b02      	cmp	r3, #2
 80034b2:	d123      	bne.n	80034fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80034b4:	69fb      	ldr	r3, [r7, #28]
 80034b6:	08da      	lsrs	r2, r3, #3
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	3208      	adds	r2, #8
 80034bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80034c2:	69fb      	ldr	r3, [r7, #28]
 80034c4:	f003 0307 	and.w	r3, r3, #7
 80034c8:	009b      	lsls	r3, r3, #2
 80034ca:	220f      	movs	r2, #15
 80034cc:	fa02 f303 	lsl.w	r3, r2, r3
 80034d0:	43db      	mvns	r3, r3
 80034d2:	69ba      	ldr	r2, [r7, #24]
 80034d4:	4013      	ands	r3, r2
 80034d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	691a      	ldr	r2, [r3, #16]
 80034dc:	69fb      	ldr	r3, [r7, #28]
 80034de:	f003 0307 	and.w	r3, r3, #7
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	fa02 f303 	lsl.w	r3, r2, r3
 80034e8:	69ba      	ldr	r2, [r7, #24]
 80034ea:	4313      	orrs	r3, r2
 80034ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80034ee:	69fb      	ldr	r3, [r7, #28]
 80034f0:	08da      	lsrs	r2, r3, #3
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	3208      	adds	r2, #8
 80034f6:	69b9      	ldr	r1, [r7, #24]
 80034f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003502:	69fb      	ldr	r3, [r7, #28]
 8003504:	005b      	lsls	r3, r3, #1
 8003506:	2203      	movs	r2, #3
 8003508:	fa02 f303 	lsl.w	r3, r2, r3
 800350c:	43db      	mvns	r3, r3
 800350e:	69ba      	ldr	r2, [r7, #24]
 8003510:	4013      	ands	r3, r2
 8003512:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	f003 0203 	and.w	r2, r3, #3
 800351c:	69fb      	ldr	r3, [r7, #28]
 800351e:	005b      	lsls	r3, r3, #1
 8003520:	fa02 f303 	lsl.w	r3, r2, r3
 8003524:	69ba      	ldr	r2, [r7, #24]
 8003526:	4313      	orrs	r3, r2
 8003528:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	69ba      	ldr	r2, [r7, #24]
 800352e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003538:	2b00      	cmp	r3, #0
 800353a:	f000 80b4 	beq.w	80036a6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800353e:	2300      	movs	r3, #0
 8003540:	60fb      	str	r3, [r7, #12]
 8003542:	4b60      	ldr	r3, [pc, #384]	; (80036c4 <HAL_GPIO_Init+0x30c>)
 8003544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003546:	4a5f      	ldr	r2, [pc, #380]	; (80036c4 <HAL_GPIO_Init+0x30c>)
 8003548:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800354c:	6453      	str	r3, [r2, #68]	; 0x44
 800354e:	4b5d      	ldr	r3, [pc, #372]	; (80036c4 <HAL_GPIO_Init+0x30c>)
 8003550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003552:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003556:	60fb      	str	r3, [r7, #12]
 8003558:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800355a:	4a5b      	ldr	r2, [pc, #364]	; (80036c8 <HAL_GPIO_Init+0x310>)
 800355c:	69fb      	ldr	r3, [r7, #28]
 800355e:	089b      	lsrs	r3, r3, #2
 8003560:	3302      	adds	r3, #2
 8003562:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003566:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003568:	69fb      	ldr	r3, [r7, #28]
 800356a:	f003 0303 	and.w	r3, r3, #3
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	220f      	movs	r2, #15
 8003572:	fa02 f303 	lsl.w	r3, r2, r3
 8003576:	43db      	mvns	r3, r3
 8003578:	69ba      	ldr	r2, [r7, #24]
 800357a:	4013      	ands	r3, r2
 800357c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a52      	ldr	r2, [pc, #328]	; (80036cc <HAL_GPIO_Init+0x314>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d02b      	beq.n	80035de <HAL_GPIO_Init+0x226>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a51      	ldr	r2, [pc, #324]	; (80036d0 <HAL_GPIO_Init+0x318>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d025      	beq.n	80035da <HAL_GPIO_Init+0x222>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a50      	ldr	r2, [pc, #320]	; (80036d4 <HAL_GPIO_Init+0x31c>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d01f      	beq.n	80035d6 <HAL_GPIO_Init+0x21e>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4a4f      	ldr	r2, [pc, #316]	; (80036d8 <HAL_GPIO_Init+0x320>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d019      	beq.n	80035d2 <HAL_GPIO_Init+0x21a>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4a4e      	ldr	r2, [pc, #312]	; (80036dc <HAL_GPIO_Init+0x324>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d013      	beq.n	80035ce <HAL_GPIO_Init+0x216>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4a4d      	ldr	r2, [pc, #308]	; (80036e0 <HAL_GPIO_Init+0x328>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d00d      	beq.n	80035ca <HAL_GPIO_Init+0x212>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	4a4c      	ldr	r2, [pc, #304]	; (80036e4 <HAL_GPIO_Init+0x32c>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d007      	beq.n	80035c6 <HAL_GPIO_Init+0x20e>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4a4b      	ldr	r2, [pc, #300]	; (80036e8 <HAL_GPIO_Init+0x330>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d101      	bne.n	80035c2 <HAL_GPIO_Init+0x20a>
 80035be:	2307      	movs	r3, #7
 80035c0:	e00e      	b.n	80035e0 <HAL_GPIO_Init+0x228>
 80035c2:	2308      	movs	r3, #8
 80035c4:	e00c      	b.n	80035e0 <HAL_GPIO_Init+0x228>
 80035c6:	2306      	movs	r3, #6
 80035c8:	e00a      	b.n	80035e0 <HAL_GPIO_Init+0x228>
 80035ca:	2305      	movs	r3, #5
 80035cc:	e008      	b.n	80035e0 <HAL_GPIO_Init+0x228>
 80035ce:	2304      	movs	r3, #4
 80035d0:	e006      	b.n	80035e0 <HAL_GPIO_Init+0x228>
 80035d2:	2303      	movs	r3, #3
 80035d4:	e004      	b.n	80035e0 <HAL_GPIO_Init+0x228>
 80035d6:	2302      	movs	r3, #2
 80035d8:	e002      	b.n	80035e0 <HAL_GPIO_Init+0x228>
 80035da:	2301      	movs	r3, #1
 80035dc:	e000      	b.n	80035e0 <HAL_GPIO_Init+0x228>
 80035de:	2300      	movs	r3, #0
 80035e0:	69fa      	ldr	r2, [r7, #28]
 80035e2:	f002 0203 	and.w	r2, r2, #3
 80035e6:	0092      	lsls	r2, r2, #2
 80035e8:	4093      	lsls	r3, r2
 80035ea:	69ba      	ldr	r2, [r7, #24]
 80035ec:	4313      	orrs	r3, r2
 80035ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80035f0:	4935      	ldr	r1, [pc, #212]	; (80036c8 <HAL_GPIO_Init+0x310>)
 80035f2:	69fb      	ldr	r3, [r7, #28]
 80035f4:	089b      	lsrs	r3, r3, #2
 80035f6:	3302      	adds	r3, #2
 80035f8:	69ba      	ldr	r2, [r7, #24]
 80035fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80035fe:	4b3b      	ldr	r3, [pc, #236]	; (80036ec <HAL_GPIO_Init+0x334>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	43db      	mvns	r3, r3
 8003608:	69ba      	ldr	r2, [r7, #24]
 800360a:	4013      	ands	r3, r2
 800360c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d003      	beq.n	8003622 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800361a:	69ba      	ldr	r2, [r7, #24]
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	4313      	orrs	r3, r2
 8003620:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003622:	4a32      	ldr	r2, [pc, #200]	; (80036ec <HAL_GPIO_Init+0x334>)
 8003624:	69bb      	ldr	r3, [r7, #24]
 8003626:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003628:	4b30      	ldr	r3, [pc, #192]	; (80036ec <HAL_GPIO_Init+0x334>)
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	43db      	mvns	r3, r3
 8003632:	69ba      	ldr	r2, [r7, #24]
 8003634:	4013      	ands	r3, r2
 8003636:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003640:	2b00      	cmp	r3, #0
 8003642:	d003      	beq.n	800364c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003644:	69ba      	ldr	r2, [r7, #24]
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	4313      	orrs	r3, r2
 800364a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800364c:	4a27      	ldr	r2, [pc, #156]	; (80036ec <HAL_GPIO_Init+0x334>)
 800364e:	69bb      	ldr	r3, [r7, #24]
 8003650:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003652:	4b26      	ldr	r3, [pc, #152]	; (80036ec <HAL_GPIO_Init+0x334>)
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	43db      	mvns	r3, r3
 800365c:	69ba      	ldr	r2, [r7, #24]
 800365e:	4013      	ands	r3, r2
 8003660:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800366a:	2b00      	cmp	r3, #0
 800366c:	d003      	beq.n	8003676 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800366e:	69ba      	ldr	r2, [r7, #24]
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	4313      	orrs	r3, r2
 8003674:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003676:	4a1d      	ldr	r2, [pc, #116]	; (80036ec <HAL_GPIO_Init+0x334>)
 8003678:	69bb      	ldr	r3, [r7, #24]
 800367a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800367c:	4b1b      	ldr	r3, [pc, #108]	; (80036ec <HAL_GPIO_Init+0x334>)
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	43db      	mvns	r3, r3
 8003686:	69ba      	ldr	r2, [r7, #24]
 8003688:	4013      	ands	r3, r2
 800368a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003694:	2b00      	cmp	r3, #0
 8003696:	d003      	beq.n	80036a0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003698:	69ba      	ldr	r2, [r7, #24]
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	4313      	orrs	r3, r2
 800369e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80036a0:	4a12      	ldr	r2, [pc, #72]	; (80036ec <HAL_GPIO_Init+0x334>)
 80036a2:	69bb      	ldr	r3, [r7, #24]
 80036a4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036a6:	69fb      	ldr	r3, [r7, #28]
 80036a8:	3301      	adds	r3, #1
 80036aa:	61fb      	str	r3, [r7, #28]
 80036ac:	69fb      	ldr	r3, [r7, #28]
 80036ae:	2b0f      	cmp	r3, #15
 80036b0:	f67f ae90 	bls.w	80033d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80036b4:	bf00      	nop
 80036b6:	bf00      	nop
 80036b8:	3724      	adds	r7, #36	; 0x24
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr
 80036c2:	bf00      	nop
 80036c4:	40023800 	.word	0x40023800
 80036c8:	40013800 	.word	0x40013800
 80036cc:	40020000 	.word	0x40020000
 80036d0:	40020400 	.word	0x40020400
 80036d4:	40020800 	.word	0x40020800
 80036d8:	40020c00 	.word	0x40020c00
 80036dc:	40021000 	.word	0x40021000
 80036e0:	40021400 	.word	0x40021400
 80036e4:	40021800 	.word	0x40021800
 80036e8:	40021c00 	.word	0x40021c00
 80036ec:	40013c00 	.word	0x40013c00

080036f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b083      	sub	sp, #12
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
 80036f8:	460b      	mov	r3, r1
 80036fa:	807b      	strh	r3, [r7, #2]
 80036fc:	4613      	mov	r3, r2
 80036fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003700:	787b      	ldrb	r3, [r7, #1]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d003      	beq.n	800370e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003706:	887a      	ldrh	r2, [r7, #2]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800370c:	e003      	b.n	8003716 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800370e:	887b      	ldrh	r3, [r7, #2]
 8003710:	041a      	lsls	r2, r3, #16
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	619a      	str	r2, [r3, #24]
}
 8003716:	bf00      	nop
 8003718:	370c      	adds	r7, #12
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr
	...

08003724 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b086      	sub	sp, #24
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d101      	bne.n	8003736 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e264      	b.n	8003c00 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 0301 	and.w	r3, r3, #1
 800373e:	2b00      	cmp	r3, #0
 8003740:	d075      	beq.n	800382e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003742:	4ba3      	ldr	r3, [pc, #652]	; (80039d0 <HAL_RCC_OscConfig+0x2ac>)
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	f003 030c 	and.w	r3, r3, #12
 800374a:	2b04      	cmp	r3, #4
 800374c:	d00c      	beq.n	8003768 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800374e:	4ba0      	ldr	r3, [pc, #640]	; (80039d0 <HAL_RCC_OscConfig+0x2ac>)
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003756:	2b08      	cmp	r3, #8
 8003758:	d112      	bne.n	8003780 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800375a:	4b9d      	ldr	r3, [pc, #628]	; (80039d0 <HAL_RCC_OscConfig+0x2ac>)
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003762:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003766:	d10b      	bne.n	8003780 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003768:	4b99      	ldr	r3, [pc, #612]	; (80039d0 <HAL_RCC_OscConfig+0x2ac>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003770:	2b00      	cmp	r3, #0
 8003772:	d05b      	beq.n	800382c <HAL_RCC_OscConfig+0x108>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d157      	bne.n	800382c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	e23f      	b.n	8003c00 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003788:	d106      	bne.n	8003798 <HAL_RCC_OscConfig+0x74>
 800378a:	4b91      	ldr	r3, [pc, #580]	; (80039d0 <HAL_RCC_OscConfig+0x2ac>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a90      	ldr	r2, [pc, #576]	; (80039d0 <HAL_RCC_OscConfig+0x2ac>)
 8003790:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003794:	6013      	str	r3, [r2, #0]
 8003796:	e01d      	b.n	80037d4 <HAL_RCC_OscConfig+0xb0>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037a0:	d10c      	bne.n	80037bc <HAL_RCC_OscConfig+0x98>
 80037a2:	4b8b      	ldr	r3, [pc, #556]	; (80039d0 <HAL_RCC_OscConfig+0x2ac>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a8a      	ldr	r2, [pc, #552]	; (80039d0 <HAL_RCC_OscConfig+0x2ac>)
 80037a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037ac:	6013      	str	r3, [r2, #0]
 80037ae:	4b88      	ldr	r3, [pc, #544]	; (80039d0 <HAL_RCC_OscConfig+0x2ac>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a87      	ldr	r2, [pc, #540]	; (80039d0 <HAL_RCC_OscConfig+0x2ac>)
 80037b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037b8:	6013      	str	r3, [r2, #0]
 80037ba:	e00b      	b.n	80037d4 <HAL_RCC_OscConfig+0xb0>
 80037bc:	4b84      	ldr	r3, [pc, #528]	; (80039d0 <HAL_RCC_OscConfig+0x2ac>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a83      	ldr	r2, [pc, #524]	; (80039d0 <HAL_RCC_OscConfig+0x2ac>)
 80037c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037c6:	6013      	str	r3, [r2, #0]
 80037c8:	4b81      	ldr	r3, [pc, #516]	; (80039d0 <HAL_RCC_OscConfig+0x2ac>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a80      	ldr	r2, [pc, #512]	; (80039d0 <HAL_RCC_OscConfig+0x2ac>)
 80037ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d013      	beq.n	8003804 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037dc:	f7fe fd4c 	bl	8002278 <HAL_GetTick>
 80037e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037e2:	e008      	b.n	80037f6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037e4:	f7fe fd48 	bl	8002278 <HAL_GetTick>
 80037e8:	4602      	mov	r2, r0
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	2b64      	cmp	r3, #100	; 0x64
 80037f0:	d901      	bls.n	80037f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80037f2:	2303      	movs	r3, #3
 80037f4:	e204      	b.n	8003c00 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037f6:	4b76      	ldr	r3, [pc, #472]	; (80039d0 <HAL_RCC_OscConfig+0x2ac>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d0f0      	beq.n	80037e4 <HAL_RCC_OscConfig+0xc0>
 8003802:	e014      	b.n	800382e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003804:	f7fe fd38 	bl	8002278 <HAL_GetTick>
 8003808:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800380a:	e008      	b.n	800381e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800380c:	f7fe fd34 	bl	8002278 <HAL_GetTick>
 8003810:	4602      	mov	r2, r0
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	2b64      	cmp	r3, #100	; 0x64
 8003818:	d901      	bls.n	800381e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800381a:	2303      	movs	r3, #3
 800381c:	e1f0      	b.n	8003c00 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800381e:	4b6c      	ldr	r3, [pc, #432]	; (80039d0 <HAL_RCC_OscConfig+0x2ac>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003826:	2b00      	cmp	r3, #0
 8003828:	d1f0      	bne.n	800380c <HAL_RCC_OscConfig+0xe8>
 800382a:	e000      	b.n	800382e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800382c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 0302 	and.w	r3, r3, #2
 8003836:	2b00      	cmp	r3, #0
 8003838:	d063      	beq.n	8003902 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800383a:	4b65      	ldr	r3, [pc, #404]	; (80039d0 <HAL_RCC_OscConfig+0x2ac>)
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	f003 030c 	and.w	r3, r3, #12
 8003842:	2b00      	cmp	r3, #0
 8003844:	d00b      	beq.n	800385e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003846:	4b62      	ldr	r3, [pc, #392]	; (80039d0 <HAL_RCC_OscConfig+0x2ac>)
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800384e:	2b08      	cmp	r3, #8
 8003850:	d11c      	bne.n	800388c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003852:	4b5f      	ldr	r3, [pc, #380]	; (80039d0 <HAL_RCC_OscConfig+0x2ac>)
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800385a:	2b00      	cmp	r3, #0
 800385c:	d116      	bne.n	800388c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800385e:	4b5c      	ldr	r3, [pc, #368]	; (80039d0 <HAL_RCC_OscConfig+0x2ac>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 0302 	and.w	r3, r3, #2
 8003866:	2b00      	cmp	r3, #0
 8003868:	d005      	beq.n	8003876 <HAL_RCC_OscConfig+0x152>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	68db      	ldr	r3, [r3, #12]
 800386e:	2b01      	cmp	r3, #1
 8003870:	d001      	beq.n	8003876 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e1c4      	b.n	8003c00 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003876:	4b56      	ldr	r3, [pc, #344]	; (80039d0 <HAL_RCC_OscConfig+0x2ac>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	691b      	ldr	r3, [r3, #16]
 8003882:	00db      	lsls	r3, r3, #3
 8003884:	4952      	ldr	r1, [pc, #328]	; (80039d0 <HAL_RCC_OscConfig+0x2ac>)
 8003886:	4313      	orrs	r3, r2
 8003888:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800388a:	e03a      	b.n	8003902 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d020      	beq.n	80038d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003894:	4b4f      	ldr	r3, [pc, #316]	; (80039d4 <HAL_RCC_OscConfig+0x2b0>)
 8003896:	2201      	movs	r2, #1
 8003898:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800389a:	f7fe fced 	bl	8002278 <HAL_GetTick>
 800389e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038a0:	e008      	b.n	80038b4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038a2:	f7fe fce9 	bl	8002278 <HAL_GetTick>
 80038a6:	4602      	mov	r2, r0
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	1ad3      	subs	r3, r2, r3
 80038ac:	2b02      	cmp	r3, #2
 80038ae:	d901      	bls.n	80038b4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80038b0:	2303      	movs	r3, #3
 80038b2:	e1a5      	b.n	8003c00 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038b4:	4b46      	ldr	r3, [pc, #280]	; (80039d0 <HAL_RCC_OscConfig+0x2ac>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 0302 	and.w	r3, r3, #2
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d0f0      	beq.n	80038a2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038c0:	4b43      	ldr	r3, [pc, #268]	; (80039d0 <HAL_RCC_OscConfig+0x2ac>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	691b      	ldr	r3, [r3, #16]
 80038cc:	00db      	lsls	r3, r3, #3
 80038ce:	4940      	ldr	r1, [pc, #256]	; (80039d0 <HAL_RCC_OscConfig+0x2ac>)
 80038d0:	4313      	orrs	r3, r2
 80038d2:	600b      	str	r3, [r1, #0]
 80038d4:	e015      	b.n	8003902 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038d6:	4b3f      	ldr	r3, [pc, #252]	; (80039d4 <HAL_RCC_OscConfig+0x2b0>)
 80038d8:	2200      	movs	r2, #0
 80038da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038dc:	f7fe fccc 	bl	8002278 <HAL_GetTick>
 80038e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038e2:	e008      	b.n	80038f6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038e4:	f7fe fcc8 	bl	8002278 <HAL_GetTick>
 80038e8:	4602      	mov	r2, r0
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	1ad3      	subs	r3, r2, r3
 80038ee:	2b02      	cmp	r3, #2
 80038f0:	d901      	bls.n	80038f6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80038f2:	2303      	movs	r3, #3
 80038f4:	e184      	b.n	8003c00 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038f6:	4b36      	ldr	r3, [pc, #216]	; (80039d0 <HAL_RCC_OscConfig+0x2ac>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 0302 	and.w	r3, r3, #2
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d1f0      	bne.n	80038e4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 0308 	and.w	r3, r3, #8
 800390a:	2b00      	cmp	r3, #0
 800390c:	d030      	beq.n	8003970 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	695b      	ldr	r3, [r3, #20]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d016      	beq.n	8003944 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003916:	4b30      	ldr	r3, [pc, #192]	; (80039d8 <HAL_RCC_OscConfig+0x2b4>)
 8003918:	2201      	movs	r2, #1
 800391a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800391c:	f7fe fcac 	bl	8002278 <HAL_GetTick>
 8003920:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003922:	e008      	b.n	8003936 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003924:	f7fe fca8 	bl	8002278 <HAL_GetTick>
 8003928:	4602      	mov	r2, r0
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	1ad3      	subs	r3, r2, r3
 800392e:	2b02      	cmp	r3, #2
 8003930:	d901      	bls.n	8003936 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003932:	2303      	movs	r3, #3
 8003934:	e164      	b.n	8003c00 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003936:	4b26      	ldr	r3, [pc, #152]	; (80039d0 <HAL_RCC_OscConfig+0x2ac>)
 8003938:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800393a:	f003 0302 	and.w	r3, r3, #2
 800393e:	2b00      	cmp	r3, #0
 8003940:	d0f0      	beq.n	8003924 <HAL_RCC_OscConfig+0x200>
 8003942:	e015      	b.n	8003970 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003944:	4b24      	ldr	r3, [pc, #144]	; (80039d8 <HAL_RCC_OscConfig+0x2b4>)
 8003946:	2200      	movs	r2, #0
 8003948:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800394a:	f7fe fc95 	bl	8002278 <HAL_GetTick>
 800394e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003950:	e008      	b.n	8003964 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003952:	f7fe fc91 	bl	8002278 <HAL_GetTick>
 8003956:	4602      	mov	r2, r0
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	1ad3      	subs	r3, r2, r3
 800395c:	2b02      	cmp	r3, #2
 800395e:	d901      	bls.n	8003964 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003960:	2303      	movs	r3, #3
 8003962:	e14d      	b.n	8003c00 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003964:	4b1a      	ldr	r3, [pc, #104]	; (80039d0 <HAL_RCC_OscConfig+0x2ac>)
 8003966:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003968:	f003 0302 	and.w	r3, r3, #2
 800396c:	2b00      	cmp	r3, #0
 800396e:	d1f0      	bne.n	8003952 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 0304 	and.w	r3, r3, #4
 8003978:	2b00      	cmp	r3, #0
 800397a:	f000 80a0 	beq.w	8003abe <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800397e:	2300      	movs	r3, #0
 8003980:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003982:	4b13      	ldr	r3, [pc, #76]	; (80039d0 <HAL_RCC_OscConfig+0x2ac>)
 8003984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003986:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800398a:	2b00      	cmp	r3, #0
 800398c:	d10f      	bne.n	80039ae <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800398e:	2300      	movs	r3, #0
 8003990:	60bb      	str	r3, [r7, #8]
 8003992:	4b0f      	ldr	r3, [pc, #60]	; (80039d0 <HAL_RCC_OscConfig+0x2ac>)
 8003994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003996:	4a0e      	ldr	r2, [pc, #56]	; (80039d0 <HAL_RCC_OscConfig+0x2ac>)
 8003998:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800399c:	6413      	str	r3, [r2, #64]	; 0x40
 800399e:	4b0c      	ldr	r3, [pc, #48]	; (80039d0 <HAL_RCC_OscConfig+0x2ac>)
 80039a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039a6:	60bb      	str	r3, [r7, #8]
 80039a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039aa:	2301      	movs	r3, #1
 80039ac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039ae:	4b0b      	ldr	r3, [pc, #44]	; (80039dc <HAL_RCC_OscConfig+0x2b8>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d121      	bne.n	80039fe <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039ba:	4b08      	ldr	r3, [pc, #32]	; (80039dc <HAL_RCC_OscConfig+0x2b8>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a07      	ldr	r2, [pc, #28]	; (80039dc <HAL_RCC_OscConfig+0x2b8>)
 80039c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039c6:	f7fe fc57 	bl	8002278 <HAL_GetTick>
 80039ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039cc:	e011      	b.n	80039f2 <HAL_RCC_OscConfig+0x2ce>
 80039ce:	bf00      	nop
 80039d0:	40023800 	.word	0x40023800
 80039d4:	42470000 	.word	0x42470000
 80039d8:	42470e80 	.word	0x42470e80
 80039dc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039e0:	f7fe fc4a 	bl	8002278 <HAL_GetTick>
 80039e4:	4602      	mov	r2, r0
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	1ad3      	subs	r3, r2, r3
 80039ea:	2b02      	cmp	r3, #2
 80039ec:	d901      	bls.n	80039f2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80039ee:	2303      	movs	r3, #3
 80039f0:	e106      	b.n	8003c00 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039f2:	4b85      	ldr	r3, [pc, #532]	; (8003c08 <HAL_RCC_OscConfig+0x4e4>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d0f0      	beq.n	80039e0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	d106      	bne.n	8003a14 <HAL_RCC_OscConfig+0x2f0>
 8003a06:	4b81      	ldr	r3, [pc, #516]	; (8003c0c <HAL_RCC_OscConfig+0x4e8>)
 8003a08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a0a:	4a80      	ldr	r2, [pc, #512]	; (8003c0c <HAL_RCC_OscConfig+0x4e8>)
 8003a0c:	f043 0301 	orr.w	r3, r3, #1
 8003a10:	6713      	str	r3, [r2, #112]	; 0x70
 8003a12:	e01c      	b.n	8003a4e <HAL_RCC_OscConfig+0x32a>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	2b05      	cmp	r3, #5
 8003a1a:	d10c      	bne.n	8003a36 <HAL_RCC_OscConfig+0x312>
 8003a1c:	4b7b      	ldr	r3, [pc, #492]	; (8003c0c <HAL_RCC_OscConfig+0x4e8>)
 8003a1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a20:	4a7a      	ldr	r2, [pc, #488]	; (8003c0c <HAL_RCC_OscConfig+0x4e8>)
 8003a22:	f043 0304 	orr.w	r3, r3, #4
 8003a26:	6713      	str	r3, [r2, #112]	; 0x70
 8003a28:	4b78      	ldr	r3, [pc, #480]	; (8003c0c <HAL_RCC_OscConfig+0x4e8>)
 8003a2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a2c:	4a77      	ldr	r2, [pc, #476]	; (8003c0c <HAL_RCC_OscConfig+0x4e8>)
 8003a2e:	f043 0301 	orr.w	r3, r3, #1
 8003a32:	6713      	str	r3, [r2, #112]	; 0x70
 8003a34:	e00b      	b.n	8003a4e <HAL_RCC_OscConfig+0x32a>
 8003a36:	4b75      	ldr	r3, [pc, #468]	; (8003c0c <HAL_RCC_OscConfig+0x4e8>)
 8003a38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a3a:	4a74      	ldr	r2, [pc, #464]	; (8003c0c <HAL_RCC_OscConfig+0x4e8>)
 8003a3c:	f023 0301 	bic.w	r3, r3, #1
 8003a40:	6713      	str	r3, [r2, #112]	; 0x70
 8003a42:	4b72      	ldr	r3, [pc, #456]	; (8003c0c <HAL_RCC_OscConfig+0x4e8>)
 8003a44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a46:	4a71      	ldr	r2, [pc, #452]	; (8003c0c <HAL_RCC_OscConfig+0x4e8>)
 8003a48:	f023 0304 	bic.w	r3, r3, #4
 8003a4c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d015      	beq.n	8003a82 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a56:	f7fe fc0f 	bl	8002278 <HAL_GetTick>
 8003a5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a5c:	e00a      	b.n	8003a74 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a5e:	f7fe fc0b 	bl	8002278 <HAL_GetTick>
 8003a62:	4602      	mov	r2, r0
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	1ad3      	subs	r3, r2, r3
 8003a68:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d901      	bls.n	8003a74 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003a70:	2303      	movs	r3, #3
 8003a72:	e0c5      	b.n	8003c00 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a74:	4b65      	ldr	r3, [pc, #404]	; (8003c0c <HAL_RCC_OscConfig+0x4e8>)
 8003a76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a78:	f003 0302 	and.w	r3, r3, #2
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d0ee      	beq.n	8003a5e <HAL_RCC_OscConfig+0x33a>
 8003a80:	e014      	b.n	8003aac <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a82:	f7fe fbf9 	bl	8002278 <HAL_GetTick>
 8003a86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a88:	e00a      	b.n	8003aa0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a8a:	f7fe fbf5 	bl	8002278 <HAL_GetTick>
 8003a8e:	4602      	mov	r2, r0
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	1ad3      	subs	r3, r2, r3
 8003a94:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d901      	bls.n	8003aa0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003a9c:	2303      	movs	r3, #3
 8003a9e:	e0af      	b.n	8003c00 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003aa0:	4b5a      	ldr	r3, [pc, #360]	; (8003c0c <HAL_RCC_OscConfig+0x4e8>)
 8003aa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aa4:	f003 0302 	and.w	r3, r3, #2
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d1ee      	bne.n	8003a8a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003aac:	7dfb      	ldrb	r3, [r7, #23]
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	d105      	bne.n	8003abe <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ab2:	4b56      	ldr	r3, [pc, #344]	; (8003c0c <HAL_RCC_OscConfig+0x4e8>)
 8003ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab6:	4a55      	ldr	r2, [pc, #340]	; (8003c0c <HAL_RCC_OscConfig+0x4e8>)
 8003ab8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003abc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	699b      	ldr	r3, [r3, #24]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	f000 809b 	beq.w	8003bfe <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ac8:	4b50      	ldr	r3, [pc, #320]	; (8003c0c <HAL_RCC_OscConfig+0x4e8>)
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	f003 030c 	and.w	r3, r3, #12
 8003ad0:	2b08      	cmp	r3, #8
 8003ad2:	d05c      	beq.n	8003b8e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	699b      	ldr	r3, [r3, #24]
 8003ad8:	2b02      	cmp	r3, #2
 8003ada:	d141      	bne.n	8003b60 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003adc:	4b4c      	ldr	r3, [pc, #304]	; (8003c10 <HAL_RCC_OscConfig+0x4ec>)
 8003ade:	2200      	movs	r2, #0
 8003ae0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ae2:	f7fe fbc9 	bl	8002278 <HAL_GetTick>
 8003ae6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ae8:	e008      	b.n	8003afc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003aea:	f7fe fbc5 	bl	8002278 <HAL_GetTick>
 8003aee:	4602      	mov	r2, r0
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	1ad3      	subs	r3, r2, r3
 8003af4:	2b02      	cmp	r3, #2
 8003af6:	d901      	bls.n	8003afc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003af8:	2303      	movs	r3, #3
 8003afa:	e081      	b.n	8003c00 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003afc:	4b43      	ldr	r3, [pc, #268]	; (8003c0c <HAL_RCC_OscConfig+0x4e8>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d1f0      	bne.n	8003aea <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	69da      	ldr	r2, [r3, #28]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6a1b      	ldr	r3, [r3, #32]
 8003b10:	431a      	orrs	r2, r3
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b16:	019b      	lsls	r3, r3, #6
 8003b18:	431a      	orrs	r2, r3
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b1e:	085b      	lsrs	r3, r3, #1
 8003b20:	3b01      	subs	r3, #1
 8003b22:	041b      	lsls	r3, r3, #16
 8003b24:	431a      	orrs	r2, r3
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b2a:	061b      	lsls	r3, r3, #24
 8003b2c:	4937      	ldr	r1, [pc, #220]	; (8003c0c <HAL_RCC_OscConfig+0x4e8>)
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b32:	4b37      	ldr	r3, [pc, #220]	; (8003c10 <HAL_RCC_OscConfig+0x4ec>)
 8003b34:	2201      	movs	r2, #1
 8003b36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b38:	f7fe fb9e 	bl	8002278 <HAL_GetTick>
 8003b3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b3e:	e008      	b.n	8003b52 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b40:	f7fe fb9a 	bl	8002278 <HAL_GetTick>
 8003b44:	4602      	mov	r2, r0
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	1ad3      	subs	r3, r2, r3
 8003b4a:	2b02      	cmp	r3, #2
 8003b4c:	d901      	bls.n	8003b52 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003b4e:	2303      	movs	r3, #3
 8003b50:	e056      	b.n	8003c00 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b52:	4b2e      	ldr	r3, [pc, #184]	; (8003c0c <HAL_RCC_OscConfig+0x4e8>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d0f0      	beq.n	8003b40 <HAL_RCC_OscConfig+0x41c>
 8003b5e:	e04e      	b.n	8003bfe <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b60:	4b2b      	ldr	r3, [pc, #172]	; (8003c10 <HAL_RCC_OscConfig+0x4ec>)
 8003b62:	2200      	movs	r2, #0
 8003b64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b66:	f7fe fb87 	bl	8002278 <HAL_GetTick>
 8003b6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b6c:	e008      	b.n	8003b80 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b6e:	f7fe fb83 	bl	8002278 <HAL_GetTick>
 8003b72:	4602      	mov	r2, r0
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	1ad3      	subs	r3, r2, r3
 8003b78:	2b02      	cmp	r3, #2
 8003b7a:	d901      	bls.n	8003b80 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003b7c:	2303      	movs	r3, #3
 8003b7e:	e03f      	b.n	8003c00 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b80:	4b22      	ldr	r3, [pc, #136]	; (8003c0c <HAL_RCC_OscConfig+0x4e8>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d1f0      	bne.n	8003b6e <HAL_RCC_OscConfig+0x44a>
 8003b8c:	e037      	b.n	8003bfe <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	699b      	ldr	r3, [r3, #24]
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d101      	bne.n	8003b9a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e032      	b.n	8003c00 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003b9a:	4b1c      	ldr	r3, [pc, #112]	; (8003c0c <HAL_RCC_OscConfig+0x4e8>)
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	699b      	ldr	r3, [r3, #24]
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d028      	beq.n	8003bfa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bb2:	429a      	cmp	r2, r3
 8003bb4:	d121      	bne.n	8003bfa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d11a      	bne.n	8003bfa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003bc4:	68fa      	ldr	r2, [r7, #12]
 8003bc6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003bca:	4013      	ands	r3, r2
 8003bcc:	687a      	ldr	r2, [r7, #4]
 8003bce:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003bd0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d111      	bne.n	8003bfa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003be0:	085b      	lsrs	r3, r3, #1
 8003be2:	3b01      	subs	r3, #1
 8003be4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d107      	bne.n	8003bfa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bf4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	d001      	beq.n	8003bfe <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e000      	b.n	8003c00 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003bfe:	2300      	movs	r3, #0
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3718      	adds	r7, #24
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}
 8003c08:	40007000 	.word	0x40007000
 8003c0c:	40023800 	.word	0x40023800
 8003c10:	42470060 	.word	0x42470060

08003c14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b084      	sub	sp, #16
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
 8003c1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d101      	bne.n	8003c28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	e0cc      	b.n	8003dc2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c28:	4b68      	ldr	r3, [pc, #416]	; (8003dcc <HAL_RCC_ClockConfig+0x1b8>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f003 0307 	and.w	r3, r3, #7
 8003c30:	683a      	ldr	r2, [r7, #0]
 8003c32:	429a      	cmp	r2, r3
 8003c34:	d90c      	bls.n	8003c50 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c36:	4b65      	ldr	r3, [pc, #404]	; (8003dcc <HAL_RCC_ClockConfig+0x1b8>)
 8003c38:	683a      	ldr	r2, [r7, #0]
 8003c3a:	b2d2      	uxtb	r2, r2
 8003c3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c3e:	4b63      	ldr	r3, [pc, #396]	; (8003dcc <HAL_RCC_ClockConfig+0x1b8>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f003 0307 	and.w	r3, r3, #7
 8003c46:	683a      	ldr	r2, [r7, #0]
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d001      	beq.n	8003c50 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e0b8      	b.n	8003dc2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f003 0302 	and.w	r3, r3, #2
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d020      	beq.n	8003c9e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f003 0304 	and.w	r3, r3, #4
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d005      	beq.n	8003c74 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c68:	4b59      	ldr	r3, [pc, #356]	; (8003dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	4a58      	ldr	r2, [pc, #352]	; (8003dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c6e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003c72:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 0308 	and.w	r3, r3, #8
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d005      	beq.n	8003c8c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c80:	4b53      	ldr	r3, [pc, #332]	; (8003dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	4a52      	ldr	r2, [pc, #328]	; (8003dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c86:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003c8a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c8c:	4b50      	ldr	r3, [pc, #320]	; (8003dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	494d      	ldr	r1, [pc, #308]	; (8003dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 0301 	and.w	r3, r3, #1
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d044      	beq.n	8003d34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d107      	bne.n	8003cc2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cb2:	4b47      	ldr	r3, [pc, #284]	; (8003dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d119      	bne.n	8003cf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e07f      	b.n	8003dc2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	2b02      	cmp	r3, #2
 8003cc8:	d003      	beq.n	8003cd2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003cce:	2b03      	cmp	r3, #3
 8003cd0:	d107      	bne.n	8003ce2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cd2:	4b3f      	ldr	r3, [pc, #252]	; (8003dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d109      	bne.n	8003cf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e06f      	b.n	8003dc2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ce2:	4b3b      	ldr	r3, [pc, #236]	; (8003dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 0302 	and.w	r3, r3, #2
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d101      	bne.n	8003cf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e067      	b.n	8003dc2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003cf2:	4b37      	ldr	r3, [pc, #220]	; (8003dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	f023 0203 	bic.w	r2, r3, #3
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	4934      	ldr	r1, [pc, #208]	; (8003dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d00:	4313      	orrs	r3, r2
 8003d02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d04:	f7fe fab8 	bl	8002278 <HAL_GetTick>
 8003d08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d0a:	e00a      	b.n	8003d22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d0c:	f7fe fab4 	bl	8002278 <HAL_GetTick>
 8003d10:	4602      	mov	r2, r0
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	1ad3      	subs	r3, r2, r3
 8003d16:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d901      	bls.n	8003d22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d1e:	2303      	movs	r3, #3
 8003d20:	e04f      	b.n	8003dc2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d22:	4b2b      	ldr	r3, [pc, #172]	; (8003dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	f003 020c 	and.w	r2, r3, #12
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	009b      	lsls	r3, r3, #2
 8003d30:	429a      	cmp	r2, r3
 8003d32:	d1eb      	bne.n	8003d0c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d34:	4b25      	ldr	r3, [pc, #148]	; (8003dcc <HAL_RCC_ClockConfig+0x1b8>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 0307 	and.w	r3, r3, #7
 8003d3c:	683a      	ldr	r2, [r7, #0]
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	d20c      	bcs.n	8003d5c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d42:	4b22      	ldr	r3, [pc, #136]	; (8003dcc <HAL_RCC_ClockConfig+0x1b8>)
 8003d44:	683a      	ldr	r2, [r7, #0]
 8003d46:	b2d2      	uxtb	r2, r2
 8003d48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d4a:	4b20      	ldr	r3, [pc, #128]	; (8003dcc <HAL_RCC_ClockConfig+0x1b8>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 0307 	and.w	r3, r3, #7
 8003d52:	683a      	ldr	r2, [r7, #0]
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d001      	beq.n	8003d5c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e032      	b.n	8003dc2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 0304 	and.w	r3, r3, #4
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d008      	beq.n	8003d7a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d68:	4b19      	ldr	r3, [pc, #100]	; (8003dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	4916      	ldr	r1, [pc, #88]	; (8003dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d76:	4313      	orrs	r3, r2
 8003d78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 0308 	and.w	r3, r3, #8
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d009      	beq.n	8003d9a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d86:	4b12      	ldr	r3, [pc, #72]	; (8003dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	691b      	ldr	r3, [r3, #16]
 8003d92:	00db      	lsls	r3, r3, #3
 8003d94:	490e      	ldr	r1, [pc, #56]	; (8003dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d96:	4313      	orrs	r3, r2
 8003d98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d9a:	f000 f821 	bl	8003de0 <HAL_RCC_GetSysClockFreq>
 8003d9e:	4602      	mov	r2, r0
 8003da0:	4b0b      	ldr	r3, [pc, #44]	; (8003dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	091b      	lsrs	r3, r3, #4
 8003da6:	f003 030f 	and.w	r3, r3, #15
 8003daa:	490a      	ldr	r1, [pc, #40]	; (8003dd4 <HAL_RCC_ClockConfig+0x1c0>)
 8003dac:	5ccb      	ldrb	r3, [r1, r3]
 8003dae:	fa22 f303 	lsr.w	r3, r2, r3
 8003db2:	4a09      	ldr	r2, [pc, #36]	; (8003dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003db4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003db6:	4b09      	ldr	r3, [pc, #36]	; (8003ddc <HAL_RCC_ClockConfig+0x1c8>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f7fe fa18 	bl	80021f0 <HAL_InitTick>

  return HAL_OK;
 8003dc0:	2300      	movs	r3, #0
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3710      	adds	r7, #16
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}
 8003dca:	bf00      	nop
 8003dcc:	40023c00 	.word	0x40023c00
 8003dd0:	40023800 	.word	0x40023800
 8003dd4:	08005174 	.word	0x08005174
 8003dd8:	20000010 	.word	0x20000010
 8003ddc:	20000014 	.word	0x20000014

08003de0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003de0:	b5b0      	push	{r4, r5, r7, lr}
 8003de2:	b084      	sub	sp, #16
 8003de4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003de6:	2100      	movs	r1, #0
 8003de8:	6079      	str	r1, [r7, #4]
 8003dea:	2100      	movs	r1, #0
 8003dec:	60f9      	str	r1, [r7, #12]
 8003dee:	2100      	movs	r1, #0
 8003df0:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003df2:	2100      	movs	r1, #0
 8003df4:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003df6:	4952      	ldr	r1, [pc, #328]	; (8003f40 <HAL_RCC_GetSysClockFreq+0x160>)
 8003df8:	6889      	ldr	r1, [r1, #8]
 8003dfa:	f001 010c 	and.w	r1, r1, #12
 8003dfe:	2908      	cmp	r1, #8
 8003e00:	d00d      	beq.n	8003e1e <HAL_RCC_GetSysClockFreq+0x3e>
 8003e02:	2908      	cmp	r1, #8
 8003e04:	f200 8094 	bhi.w	8003f30 <HAL_RCC_GetSysClockFreq+0x150>
 8003e08:	2900      	cmp	r1, #0
 8003e0a:	d002      	beq.n	8003e12 <HAL_RCC_GetSysClockFreq+0x32>
 8003e0c:	2904      	cmp	r1, #4
 8003e0e:	d003      	beq.n	8003e18 <HAL_RCC_GetSysClockFreq+0x38>
 8003e10:	e08e      	b.n	8003f30 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e12:	4b4c      	ldr	r3, [pc, #304]	; (8003f44 <HAL_RCC_GetSysClockFreq+0x164>)
 8003e14:	60bb      	str	r3, [r7, #8]
       break;
 8003e16:	e08e      	b.n	8003f36 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e18:	4b4b      	ldr	r3, [pc, #300]	; (8003f48 <HAL_RCC_GetSysClockFreq+0x168>)
 8003e1a:	60bb      	str	r3, [r7, #8]
      break;
 8003e1c:	e08b      	b.n	8003f36 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e1e:	4948      	ldr	r1, [pc, #288]	; (8003f40 <HAL_RCC_GetSysClockFreq+0x160>)
 8003e20:	6849      	ldr	r1, [r1, #4]
 8003e22:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003e26:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e28:	4945      	ldr	r1, [pc, #276]	; (8003f40 <HAL_RCC_GetSysClockFreq+0x160>)
 8003e2a:	6849      	ldr	r1, [r1, #4]
 8003e2c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003e30:	2900      	cmp	r1, #0
 8003e32:	d024      	beq.n	8003e7e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e34:	4942      	ldr	r1, [pc, #264]	; (8003f40 <HAL_RCC_GetSysClockFreq+0x160>)
 8003e36:	6849      	ldr	r1, [r1, #4]
 8003e38:	0989      	lsrs	r1, r1, #6
 8003e3a:	4608      	mov	r0, r1
 8003e3c:	f04f 0100 	mov.w	r1, #0
 8003e40:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003e44:	f04f 0500 	mov.w	r5, #0
 8003e48:	ea00 0204 	and.w	r2, r0, r4
 8003e4c:	ea01 0305 	and.w	r3, r1, r5
 8003e50:	493d      	ldr	r1, [pc, #244]	; (8003f48 <HAL_RCC_GetSysClockFreq+0x168>)
 8003e52:	fb01 f003 	mul.w	r0, r1, r3
 8003e56:	2100      	movs	r1, #0
 8003e58:	fb01 f102 	mul.w	r1, r1, r2
 8003e5c:	1844      	adds	r4, r0, r1
 8003e5e:	493a      	ldr	r1, [pc, #232]	; (8003f48 <HAL_RCC_GetSysClockFreq+0x168>)
 8003e60:	fba2 0101 	umull	r0, r1, r2, r1
 8003e64:	1863      	adds	r3, r4, r1
 8003e66:	4619      	mov	r1, r3
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	461a      	mov	r2, r3
 8003e6c:	f04f 0300 	mov.w	r3, #0
 8003e70:	f7fc fe48 	bl	8000b04 <__aeabi_uldivmod>
 8003e74:	4602      	mov	r2, r0
 8003e76:	460b      	mov	r3, r1
 8003e78:	4613      	mov	r3, r2
 8003e7a:	60fb      	str	r3, [r7, #12]
 8003e7c:	e04a      	b.n	8003f14 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e7e:	4b30      	ldr	r3, [pc, #192]	; (8003f40 <HAL_RCC_GetSysClockFreq+0x160>)
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	099b      	lsrs	r3, r3, #6
 8003e84:	461a      	mov	r2, r3
 8003e86:	f04f 0300 	mov.w	r3, #0
 8003e8a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003e8e:	f04f 0100 	mov.w	r1, #0
 8003e92:	ea02 0400 	and.w	r4, r2, r0
 8003e96:	ea03 0501 	and.w	r5, r3, r1
 8003e9a:	4620      	mov	r0, r4
 8003e9c:	4629      	mov	r1, r5
 8003e9e:	f04f 0200 	mov.w	r2, #0
 8003ea2:	f04f 0300 	mov.w	r3, #0
 8003ea6:	014b      	lsls	r3, r1, #5
 8003ea8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003eac:	0142      	lsls	r2, r0, #5
 8003eae:	4610      	mov	r0, r2
 8003eb0:	4619      	mov	r1, r3
 8003eb2:	1b00      	subs	r0, r0, r4
 8003eb4:	eb61 0105 	sbc.w	r1, r1, r5
 8003eb8:	f04f 0200 	mov.w	r2, #0
 8003ebc:	f04f 0300 	mov.w	r3, #0
 8003ec0:	018b      	lsls	r3, r1, #6
 8003ec2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003ec6:	0182      	lsls	r2, r0, #6
 8003ec8:	1a12      	subs	r2, r2, r0
 8003eca:	eb63 0301 	sbc.w	r3, r3, r1
 8003ece:	f04f 0000 	mov.w	r0, #0
 8003ed2:	f04f 0100 	mov.w	r1, #0
 8003ed6:	00d9      	lsls	r1, r3, #3
 8003ed8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003edc:	00d0      	lsls	r0, r2, #3
 8003ede:	4602      	mov	r2, r0
 8003ee0:	460b      	mov	r3, r1
 8003ee2:	1912      	adds	r2, r2, r4
 8003ee4:	eb45 0303 	adc.w	r3, r5, r3
 8003ee8:	f04f 0000 	mov.w	r0, #0
 8003eec:	f04f 0100 	mov.w	r1, #0
 8003ef0:	0299      	lsls	r1, r3, #10
 8003ef2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003ef6:	0290      	lsls	r0, r2, #10
 8003ef8:	4602      	mov	r2, r0
 8003efa:	460b      	mov	r3, r1
 8003efc:	4610      	mov	r0, r2
 8003efe:	4619      	mov	r1, r3
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	461a      	mov	r2, r3
 8003f04:	f04f 0300 	mov.w	r3, #0
 8003f08:	f7fc fdfc 	bl	8000b04 <__aeabi_uldivmod>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	460b      	mov	r3, r1
 8003f10:	4613      	mov	r3, r2
 8003f12:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003f14:	4b0a      	ldr	r3, [pc, #40]	; (8003f40 <HAL_RCC_GetSysClockFreq+0x160>)
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	0c1b      	lsrs	r3, r3, #16
 8003f1a:	f003 0303 	and.w	r3, r3, #3
 8003f1e:	3301      	adds	r3, #1
 8003f20:	005b      	lsls	r3, r3, #1
 8003f22:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003f24:	68fa      	ldr	r2, [r7, #12]
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f2c:	60bb      	str	r3, [r7, #8]
      break;
 8003f2e:	e002      	b.n	8003f36 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f30:	4b04      	ldr	r3, [pc, #16]	; (8003f44 <HAL_RCC_GetSysClockFreq+0x164>)
 8003f32:	60bb      	str	r3, [r7, #8]
      break;
 8003f34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f36:	68bb      	ldr	r3, [r7, #8]
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3710      	adds	r7, #16
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bdb0      	pop	{r4, r5, r7, pc}
 8003f40:	40023800 	.word	0x40023800
 8003f44:	00f42400 	.word	0x00f42400
 8003f48:	017d7840 	.word	0x017d7840

08003f4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b082      	sub	sp, #8
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d101      	bne.n	8003f5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e041      	b.n	8003fe2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f64:	b2db      	uxtb	r3, r3
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d106      	bne.n	8003f78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f7fd fd62 	bl	8001a3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2202      	movs	r2, #2
 8003f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	3304      	adds	r3, #4
 8003f88:	4619      	mov	r1, r3
 8003f8a:	4610      	mov	r0, r2
 8003f8c:	f000 fc2c 	bl	80047e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2201      	movs	r2, #1
 8003f94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2201      	movs	r2, #1
 8003fac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2201      	movs	r2, #1
 8003fbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003fe0:	2300      	movs	r3, #0
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	3708      	adds	r7, #8
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}

08003fea <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003fea:	b580      	push	{r7, lr}
 8003fec:	b082      	sub	sp, #8
 8003fee:	af00      	add	r7, sp, #0
 8003ff0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d101      	bne.n	8003ffc <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e041      	b.n	8004080 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004002:	b2db      	uxtb	r3, r3
 8004004:	2b00      	cmp	r3, #0
 8004006:	d106      	bne.n	8004016 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2200      	movs	r2, #0
 800400c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	f000 f839 	bl	8004088 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2202      	movs	r2, #2
 800401a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	3304      	adds	r3, #4
 8004026:	4619      	mov	r1, r3
 8004028:	4610      	mov	r0, r2
 800402a:	f000 fbdd 	bl	80047e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2201      	movs	r2, #1
 8004032:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2201      	movs	r2, #1
 800403a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2201      	movs	r2, #1
 8004042:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2201      	movs	r2, #1
 800404a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2201      	movs	r2, #1
 8004052:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2201      	movs	r2, #1
 800405a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2201      	movs	r2, #1
 8004062:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2201      	movs	r2, #1
 800406a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2201      	movs	r2, #1
 8004072:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2201      	movs	r2, #1
 800407a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800407e:	2300      	movs	r3, #0
}
 8004080:	4618      	mov	r0, r3
 8004082:	3708      	adds	r7, #8
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}

08004088 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004088:	b480      	push	{r7}
 800408a:	b083      	sub	sp, #12
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004090:	bf00      	nop
 8004092:	370c      	adds	r7, #12
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr

0800409c <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b084      	sub	sp, #16
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
 80040a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d109      	bne.n	80040c0 <HAL_TIM_OC_Start_IT+0x24>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040b2:	b2db      	uxtb	r3, r3
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	bf14      	ite	ne
 80040b8:	2301      	movne	r3, #1
 80040ba:	2300      	moveq	r3, #0
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	e022      	b.n	8004106 <HAL_TIM_OC_Start_IT+0x6a>
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	2b04      	cmp	r3, #4
 80040c4:	d109      	bne.n	80040da <HAL_TIM_OC_Start_IT+0x3e>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80040cc:	b2db      	uxtb	r3, r3
 80040ce:	2b01      	cmp	r3, #1
 80040d0:	bf14      	ite	ne
 80040d2:	2301      	movne	r3, #1
 80040d4:	2300      	moveq	r3, #0
 80040d6:	b2db      	uxtb	r3, r3
 80040d8:	e015      	b.n	8004106 <HAL_TIM_OC_Start_IT+0x6a>
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	2b08      	cmp	r3, #8
 80040de:	d109      	bne.n	80040f4 <HAL_TIM_OC_Start_IT+0x58>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80040e6:	b2db      	uxtb	r3, r3
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	bf14      	ite	ne
 80040ec:	2301      	movne	r3, #1
 80040ee:	2300      	moveq	r3, #0
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	e008      	b.n	8004106 <HAL_TIM_OC_Start_IT+0x6a>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	bf14      	ite	ne
 8004100:	2301      	movne	r3, #1
 8004102:	2300      	moveq	r3, #0
 8004104:	b2db      	uxtb	r3, r3
 8004106:	2b00      	cmp	r3, #0
 8004108:	d001      	beq.n	800410e <HAL_TIM_OC_Start_IT+0x72>
  {
    return HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	e0c2      	b.n	8004294 <HAL_TIM_OC_Start_IT+0x1f8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d104      	bne.n	800411e <HAL_TIM_OC_Start_IT+0x82>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2202      	movs	r2, #2
 8004118:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800411c:	e013      	b.n	8004146 <HAL_TIM_OC_Start_IT+0xaa>
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	2b04      	cmp	r3, #4
 8004122:	d104      	bne.n	800412e <HAL_TIM_OC_Start_IT+0x92>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2202      	movs	r2, #2
 8004128:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800412c:	e00b      	b.n	8004146 <HAL_TIM_OC_Start_IT+0xaa>
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	2b08      	cmp	r3, #8
 8004132:	d104      	bne.n	800413e <HAL_TIM_OC_Start_IT+0xa2>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2202      	movs	r2, #2
 8004138:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800413c:	e003      	b.n	8004146 <HAL_TIM_OC_Start_IT+0xaa>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2202      	movs	r2, #2
 8004142:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	2b0c      	cmp	r3, #12
 800414a:	d841      	bhi.n	80041d0 <HAL_TIM_OC_Start_IT+0x134>
 800414c:	a201      	add	r2, pc, #4	; (adr r2, 8004154 <HAL_TIM_OC_Start_IT+0xb8>)
 800414e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004152:	bf00      	nop
 8004154:	08004189 	.word	0x08004189
 8004158:	080041d1 	.word	0x080041d1
 800415c:	080041d1 	.word	0x080041d1
 8004160:	080041d1 	.word	0x080041d1
 8004164:	0800419b 	.word	0x0800419b
 8004168:	080041d1 	.word	0x080041d1
 800416c:	080041d1 	.word	0x080041d1
 8004170:	080041d1 	.word	0x080041d1
 8004174:	080041ad 	.word	0x080041ad
 8004178:	080041d1 	.word	0x080041d1
 800417c:	080041d1 	.word	0x080041d1
 8004180:	080041d1 	.word	0x080041d1
 8004184:	080041bf 	.word	0x080041bf
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	68da      	ldr	r2, [r3, #12]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f042 0202 	orr.w	r2, r2, #2
 8004196:	60da      	str	r2, [r3, #12]
      break;
 8004198:	e01b      	b.n	80041d2 <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	68da      	ldr	r2, [r3, #12]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f042 0204 	orr.w	r2, r2, #4
 80041a8:	60da      	str	r2, [r3, #12]
      break;
 80041aa:	e012      	b.n	80041d2 <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	68da      	ldr	r2, [r3, #12]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f042 0208 	orr.w	r2, r2, #8
 80041ba:	60da      	str	r2, [r3, #12]
      break;
 80041bc:	e009      	b.n	80041d2 <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	68da      	ldr	r2, [r3, #12]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f042 0210 	orr.w	r2, r2, #16
 80041cc:	60da      	str	r2, [r3, #12]
      break;
 80041ce:	e000      	b.n	80041d2 <HAL_TIM_OC_Start_IT+0x136>
    }

    default:
      break;
 80041d0:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	2201      	movs	r2, #1
 80041d8:	6839      	ldr	r1, [r7, #0]
 80041da:	4618      	mov	r0, r3
 80041dc:	f000 fe7c 	bl	8004ed8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a2d      	ldr	r2, [pc, #180]	; (800429c <HAL_TIM_OC_Start_IT+0x200>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d004      	beq.n	80041f4 <HAL_TIM_OC_Start_IT+0x158>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a2c      	ldr	r2, [pc, #176]	; (80042a0 <HAL_TIM_OC_Start_IT+0x204>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d101      	bne.n	80041f8 <HAL_TIM_OC_Start_IT+0x15c>
 80041f4:	2301      	movs	r3, #1
 80041f6:	e000      	b.n	80041fa <HAL_TIM_OC_Start_IT+0x15e>
 80041f8:	2300      	movs	r3, #0
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d007      	beq.n	800420e <HAL_TIM_OC_Start_IT+0x172>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800420c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a22      	ldr	r2, [pc, #136]	; (800429c <HAL_TIM_OC_Start_IT+0x200>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d022      	beq.n	800425e <HAL_TIM_OC_Start_IT+0x1c2>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004220:	d01d      	beq.n	800425e <HAL_TIM_OC_Start_IT+0x1c2>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a1f      	ldr	r2, [pc, #124]	; (80042a4 <HAL_TIM_OC_Start_IT+0x208>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d018      	beq.n	800425e <HAL_TIM_OC_Start_IT+0x1c2>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a1d      	ldr	r2, [pc, #116]	; (80042a8 <HAL_TIM_OC_Start_IT+0x20c>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d013      	beq.n	800425e <HAL_TIM_OC_Start_IT+0x1c2>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a1c      	ldr	r2, [pc, #112]	; (80042ac <HAL_TIM_OC_Start_IT+0x210>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d00e      	beq.n	800425e <HAL_TIM_OC_Start_IT+0x1c2>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a16      	ldr	r2, [pc, #88]	; (80042a0 <HAL_TIM_OC_Start_IT+0x204>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d009      	beq.n	800425e <HAL_TIM_OC_Start_IT+0x1c2>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a18      	ldr	r2, [pc, #96]	; (80042b0 <HAL_TIM_OC_Start_IT+0x214>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d004      	beq.n	800425e <HAL_TIM_OC_Start_IT+0x1c2>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a16      	ldr	r2, [pc, #88]	; (80042b4 <HAL_TIM_OC_Start_IT+0x218>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d111      	bne.n	8004282 <HAL_TIM_OC_Start_IT+0x1e6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	f003 0307 	and.w	r3, r3, #7
 8004268:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2b06      	cmp	r3, #6
 800426e:	d010      	beq.n	8004292 <HAL_TIM_OC_Start_IT+0x1f6>
    {
      __HAL_TIM_ENABLE(htim);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f042 0201 	orr.w	r2, r2, #1
 800427e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004280:	e007      	b.n	8004292 <HAL_TIM_OC_Start_IT+0x1f6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f042 0201 	orr.w	r2, r2, #1
 8004290:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004292:	2300      	movs	r3, #0
}
 8004294:	4618      	mov	r0, r3
 8004296:	3710      	adds	r7, #16
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}
 800429c:	40010000 	.word	0x40010000
 80042a0:	40010400 	.word	0x40010400
 80042a4:	40000400 	.word	0x40000400
 80042a8:	40000800 	.word	0x40000800
 80042ac:	40000c00 	.word	0x40000c00
 80042b0:	40014000 	.word	0x40014000
 80042b4:	40001800 	.word	0x40001800

080042b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b082      	sub	sp, #8
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	691b      	ldr	r3, [r3, #16]
 80042c6:	f003 0302 	and.w	r3, r3, #2
 80042ca:	2b02      	cmp	r3, #2
 80042cc:	d122      	bne.n	8004314 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	f003 0302 	and.w	r3, r3, #2
 80042d8:	2b02      	cmp	r3, #2
 80042da:	d11b      	bne.n	8004314 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f06f 0202 	mvn.w	r2, #2
 80042e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2201      	movs	r2, #1
 80042ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	699b      	ldr	r3, [r3, #24]
 80042f2:	f003 0303 	and.w	r3, r3, #3
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d003      	beq.n	8004302 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f000 fa56 	bl	80047ac <HAL_TIM_IC_CaptureCallback>
 8004300:	e005      	b.n	800430e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f000 fa48 	bl	8004798 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004308:	6878      	ldr	r0, [r7, #4]
 800430a:	f000 fa59 	bl	80047c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2200      	movs	r2, #0
 8004312:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	691b      	ldr	r3, [r3, #16]
 800431a:	f003 0304 	and.w	r3, r3, #4
 800431e:	2b04      	cmp	r3, #4
 8004320:	d122      	bne.n	8004368 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	68db      	ldr	r3, [r3, #12]
 8004328:	f003 0304 	and.w	r3, r3, #4
 800432c:	2b04      	cmp	r3, #4
 800432e:	d11b      	bne.n	8004368 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f06f 0204 	mvn.w	r2, #4
 8004338:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2202      	movs	r2, #2
 800433e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	699b      	ldr	r3, [r3, #24]
 8004346:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800434a:	2b00      	cmp	r3, #0
 800434c:	d003      	beq.n	8004356 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f000 fa2c 	bl	80047ac <HAL_TIM_IC_CaptureCallback>
 8004354:	e005      	b.n	8004362 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f000 fa1e 	bl	8004798 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800435c:	6878      	ldr	r0, [r7, #4]
 800435e:	f000 fa2f 	bl	80047c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2200      	movs	r2, #0
 8004366:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	691b      	ldr	r3, [r3, #16]
 800436e:	f003 0308 	and.w	r3, r3, #8
 8004372:	2b08      	cmp	r3, #8
 8004374:	d122      	bne.n	80043bc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	f003 0308 	and.w	r3, r3, #8
 8004380:	2b08      	cmp	r3, #8
 8004382:	d11b      	bne.n	80043bc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f06f 0208 	mvn.w	r2, #8
 800438c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2204      	movs	r2, #4
 8004392:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	69db      	ldr	r3, [r3, #28]
 800439a:	f003 0303 	and.w	r3, r3, #3
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d003      	beq.n	80043aa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f000 fa02 	bl	80047ac <HAL_TIM_IC_CaptureCallback>
 80043a8:	e005      	b.n	80043b6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f000 f9f4 	bl	8004798 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	f000 fa05 	bl	80047c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2200      	movs	r2, #0
 80043ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	691b      	ldr	r3, [r3, #16]
 80043c2:	f003 0310 	and.w	r3, r3, #16
 80043c6:	2b10      	cmp	r3, #16
 80043c8:	d122      	bne.n	8004410 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	68db      	ldr	r3, [r3, #12]
 80043d0:	f003 0310 	and.w	r3, r3, #16
 80043d4:	2b10      	cmp	r3, #16
 80043d6:	d11b      	bne.n	8004410 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f06f 0210 	mvn.w	r2, #16
 80043e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2208      	movs	r2, #8
 80043e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	69db      	ldr	r3, [r3, #28]
 80043ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d003      	beq.n	80043fe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f000 f9d8 	bl	80047ac <HAL_TIM_IC_CaptureCallback>
 80043fc:	e005      	b.n	800440a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f000 f9ca 	bl	8004798 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004404:	6878      	ldr	r0, [r7, #4]
 8004406:	f000 f9db 	bl	80047c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2200      	movs	r2, #0
 800440e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	691b      	ldr	r3, [r3, #16]
 8004416:	f003 0301 	and.w	r3, r3, #1
 800441a:	2b01      	cmp	r3, #1
 800441c:	d10e      	bne.n	800443c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	68db      	ldr	r3, [r3, #12]
 8004424:	f003 0301 	and.w	r3, r3, #1
 8004428:	2b01      	cmp	r3, #1
 800442a:	d107      	bne.n	800443c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f06f 0201 	mvn.w	r2, #1
 8004434:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f000 f9a4 	bl	8004784 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	691b      	ldr	r3, [r3, #16]
 8004442:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004446:	2b80      	cmp	r3, #128	; 0x80
 8004448:	d10e      	bne.n	8004468 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	68db      	ldr	r3, [r3, #12]
 8004450:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004454:	2b80      	cmp	r3, #128	; 0x80
 8004456:	d107      	bne.n	8004468 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004460:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f000 fe36 	bl	80050d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	691b      	ldr	r3, [r3, #16]
 800446e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004472:	2b40      	cmp	r3, #64	; 0x40
 8004474:	d10e      	bne.n	8004494 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	68db      	ldr	r3, [r3, #12]
 800447c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004480:	2b40      	cmp	r3, #64	; 0x40
 8004482:	d107      	bne.n	8004494 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800448c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f000 f9a0 	bl	80047d4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	691b      	ldr	r3, [r3, #16]
 800449a:	f003 0320 	and.w	r3, r3, #32
 800449e:	2b20      	cmp	r3, #32
 80044a0:	d10e      	bne.n	80044c0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	68db      	ldr	r3, [r3, #12]
 80044a8:	f003 0320 	and.w	r3, r3, #32
 80044ac:	2b20      	cmp	r3, #32
 80044ae:	d107      	bne.n	80044c0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f06f 0220 	mvn.w	r2, #32
 80044b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f000 fe00 	bl	80050c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80044c0:	bf00      	nop
 80044c2:	3708      	adds	r7, #8
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}

080044c8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b084      	sub	sp, #16
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	60f8      	str	r0, [r7, #12]
 80044d0:	60b9      	str	r1, [r7, #8]
 80044d2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d101      	bne.n	80044e2 <HAL_TIM_OC_ConfigChannel+0x1a>
 80044de:	2302      	movs	r3, #2
 80044e0:	e046      	b.n	8004570 <HAL_TIM_OC_ConfigChannel+0xa8>
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2201      	movs	r2, #1
 80044e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2b0c      	cmp	r3, #12
 80044ee:	d839      	bhi.n	8004564 <HAL_TIM_OC_ConfigChannel+0x9c>
 80044f0:	a201      	add	r2, pc, #4	; (adr r2, 80044f8 <HAL_TIM_OC_ConfigChannel+0x30>)
 80044f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044f6:	bf00      	nop
 80044f8:	0800452d 	.word	0x0800452d
 80044fc:	08004565 	.word	0x08004565
 8004500:	08004565 	.word	0x08004565
 8004504:	08004565 	.word	0x08004565
 8004508:	0800453b 	.word	0x0800453b
 800450c:	08004565 	.word	0x08004565
 8004510:	08004565 	.word	0x08004565
 8004514:	08004565 	.word	0x08004565
 8004518:	08004549 	.word	0x08004549
 800451c:	08004565 	.word	0x08004565
 8004520:	08004565 	.word	0x08004565
 8004524:	08004565 	.word	0x08004565
 8004528:	08004557 	.word	0x08004557
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	68b9      	ldr	r1, [r7, #8]
 8004532:	4618      	mov	r0, r3
 8004534:	f000 f9f8 	bl	8004928 <TIM_OC1_SetConfig>
      break;
 8004538:	e015      	b.n	8004566 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	68b9      	ldr	r1, [r7, #8]
 8004540:	4618      	mov	r0, r3
 8004542:	f000 fa61 	bl	8004a08 <TIM_OC2_SetConfig>
      break;
 8004546:	e00e      	b.n	8004566 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	68b9      	ldr	r1, [r7, #8]
 800454e:	4618      	mov	r0, r3
 8004550:	f000 fad0 	bl	8004af4 <TIM_OC3_SetConfig>
      break;
 8004554:	e007      	b.n	8004566 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	68b9      	ldr	r1, [r7, #8]
 800455c:	4618      	mov	r0, r3
 800455e:	f000 fb3d 	bl	8004bdc <TIM_OC4_SetConfig>
      break;
 8004562:	e000      	b.n	8004566 <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 8004564:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	2200      	movs	r2, #0
 800456a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800456e:	2300      	movs	r3, #0
}
 8004570:	4618      	mov	r0, r3
 8004572:	3710      	adds	r7, #16
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}

08004578 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b084      	sub	sp, #16
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
 8004580:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004588:	2b01      	cmp	r3, #1
 800458a:	d101      	bne.n	8004590 <HAL_TIM_ConfigClockSource+0x18>
 800458c:	2302      	movs	r3, #2
 800458e:	e0b3      	b.n	80046f8 <HAL_TIM_ConfigClockSource+0x180>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2201      	movs	r2, #1
 8004594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2202      	movs	r2, #2
 800459c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80045ae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80045b6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	68fa      	ldr	r2, [r7, #12]
 80045be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045c8:	d03e      	beq.n	8004648 <HAL_TIM_ConfigClockSource+0xd0>
 80045ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045ce:	f200 8087 	bhi.w	80046e0 <HAL_TIM_ConfigClockSource+0x168>
 80045d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045d6:	f000 8085 	beq.w	80046e4 <HAL_TIM_ConfigClockSource+0x16c>
 80045da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045de:	d87f      	bhi.n	80046e0 <HAL_TIM_ConfigClockSource+0x168>
 80045e0:	2b70      	cmp	r3, #112	; 0x70
 80045e2:	d01a      	beq.n	800461a <HAL_TIM_ConfigClockSource+0xa2>
 80045e4:	2b70      	cmp	r3, #112	; 0x70
 80045e6:	d87b      	bhi.n	80046e0 <HAL_TIM_ConfigClockSource+0x168>
 80045e8:	2b60      	cmp	r3, #96	; 0x60
 80045ea:	d050      	beq.n	800468e <HAL_TIM_ConfigClockSource+0x116>
 80045ec:	2b60      	cmp	r3, #96	; 0x60
 80045ee:	d877      	bhi.n	80046e0 <HAL_TIM_ConfigClockSource+0x168>
 80045f0:	2b50      	cmp	r3, #80	; 0x50
 80045f2:	d03c      	beq.n	800466e <HAL_TIM_ConfigClockSource+0xf6>
 80045f4:	2b50      	cmp	r3, #80	; 0x50
 80045f6:	d873      	bhi.n	80046e0 <HAL_TIM_ConfigClockSource+0x168>
 80045f8:	2b40      	cmp	r3, #64	; 0x40
 80045fa:	d058      	beq.n	80046ae <HAL_TIM_ConfigClockSource+0x136>
 80045fc:	2b40      	cmp	r3, #64	; 0x40
 80045fe:	d86f      	bhi.n	80046e0 <HAL_TIM_ConfigClockSource+0x168>
 8004600:	2b30      	cmp	r3, #48	; 0x30
 8004602:	d064      	beq.n	80046ce <HAL_TIM_ConfigClockSource+0x156>
 8004604:	2b30      	cmp	r3, #48	; 0x30
 8004606:	d86b      	bhi.n	80046e0 <HAL_TIM_ConfigClockSource+0x168>
 8004608:	2b20      	cmp	r3, #32
 800460a:	d060      	beq.n	80046ce <HAL_TIM_ConfigClockSource+0x156>
 800460c:	2b20      	cmp	r3, #32
 800460e:	d867      	bhi.n	80046e0 <HAL_TIM_ConfigClockSource+0x168>
 8004610:	2b00      	cmp	r3, #0
 8004612:	d05c      	beq.n	80046ce <HAL_TIM_ConfigClockSource+0x156>
 8004614:	2b10      	cmp	r3, #16
 8004616:	d05a      	beq.n	80046ce <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004618:	e062      	b.n	80046e0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6818      	ldr	r0, [r3, #0]
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	6899      	ldr	r1, [r3, #8]
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	685a      	ldr	r2, [r3, #4]
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	68db      	ldr	r3, [r3, #12]
 800462a:	f000 fc35 	bl	8004e98 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800463c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	68fa      	ldr	r2, [r7, #12]
 8004644:	609a      	str	r2, [r3, #8]
      break;
 8004646:	e04e      	b.n	80046e6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6818      	ldr	r0, [r3, #0]
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	6899      	ldr	r1, [r3, #8]
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	685a      	ldr	r2, [r3, #4]
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	68db      	ldr	r3, [r3, #12]
 8004658:	f000 fc1e 	bl	8004e98 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	689a      	ldr	r2, [r3, #8]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800466a:	609a      	str	r2, [r3, #8]
      break;
 800466c:	e03b      	b.n	80046e6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6818      	ldr	r0, [r3, #0]
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	6859      	ldr	r1, [r3, #4]
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	68db      	ldr	r3, [r3, #12]
 800467a:	461a      	mov	r2, r3
 800467c:	f000 fb92 	bl	8004da4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	2150      	movs	r1, #80	; 0x50
 8004686:	4618      	mov	r0, r3
 8004688:	f000 fbeb 	bl	8004e62 <TIM_ITRx_SetConfig>
      break;
 800468c:	e02b      	b.n	80046e6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6818      	ldr	r0, [r3, #0]
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	6859      	ldr	r1, [r3, #4]
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	68db      	ldr	r3, [r3, #12]
 800469a:	461a      	mov	r2, r3
 800469c:	f000 fbb1 	bl	8004e02 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	2160      	movs	r1, #96	; 0x60
 80046a6:	4618      	mov	r0, r3
 80046a8:	f000 fbdb 	bl	8004e62 <TIM_ITRx_SetConfig>
      break;
 80046ac:	e01b      	b.n	80046e6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6818      	ldr	r0, [r3, #0]
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	6859      	ldr	r1, [r3, #4]
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	68db      	ldr	r3, [r3, #12]
 80046ba:	461a      	mov	r2, r3
 80046bc:	f000 fb72 	bl	8004da4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	2140      	movs	r1, #64	; 0x40
 80046c6:	4618      	mov	r0, r3
 80046c8:	f000 fbcb 	bl	8004e62 <TIM_ITRx_SetConfig>
      break;
 80046cc:	e00b      	b.n	80046e6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4619      	mov	r1, r3
 80046d8:	4610      	mov	r0, r2
 80046da:	f000 fbc2 	bl	8004e62 <TIM_ITRx_SetConfig>
        break;
 80046de:	e002      	b.n	80046e6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80046e0:	bf00      	nop
 80046e2:	e000      	b.n	80046e6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80046e4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2201      	movs	r2, #1
 80046ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2200      	movs	r2, #0
 80046f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80046f6:	2300      	movs	r3, #0
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	3710      	adds	r7, #16
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}

08004700 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b082      	sub	sp, #8
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004710:	2b01      	cmp	r3, #1
 8004712:	d101      	bne.n	8004718 <HAL_TIM_SlaveConfigSynchro+0x18>
 8004714:	2302      	movs	r3, #2
 8004716:	e031      	b.n	800477c <HAL_TIM_SlaveConfigSynchro+0x7c>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2202      	movs	r2, #2
 8004724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8004728:	6839      	ldr	r1, [r7, #0]
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f000 faac 	bl	8004c88 <TIM_SlaveTimer_SetConfig>
 8004730:	4603      	mov	r3, r0
 8004732:	2b00      	cmp	r3, #0
 8004734:	d009      	beq.n	800474a <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2201      	movs	r2, #1
 800473a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2200      	movs	r2, #0
 8004742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	e018      	b.n	800477c <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	68da      	ldr	r2, [r3, #12]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004758:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	68da      	ldr	r2, [r3, #12]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004768:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2201      	movs	r2, #1
 800476e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2200      	movs	r2, #0
 8004776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800477a:	2300      	movs	r3, #0
}
 800477c:	4618      	mov	r0, r3
 800477e:	3708      	adds	r7, #8
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}

08004784 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004784:	b480      	push	{r7}
 8004786:	b083      	sub	sp, #12
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800478c:	bf00      	nop
 800478e:	370c      	adds	r7, #12
 8004790:	46bd      	mov	sp, r7
 8004792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004796:	4770      	bx	lr

08004798 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004798:	b480      	push	{r7}
 800479a:	b083      	sub	sp, #12
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80047a0:	bf00      	nop
 80047a2:	370c      	adds	r7, #12
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr

080047ac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b083      	sub	sp, #12
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80047b4:	bf00      	nop
 80047b6:	370c      	adds	r7, #12
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr

080047c0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b083      	sub	sp, #12
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80047c8:	bf00      	nop
 80047ca:	370c      	adds	r7, #12
 80047cc:	46bd      	mov	sp, r7
 80047ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d2:	4770      	bx	lr

080047d4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b083      	sub	sp, #12
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80047dc:	bf00      	nop
 80047de:	370c      	adds	r7, #12
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr

080047e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b085      	sub	sp, #20
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	4a40      	ldr	r2, [pc, #256]	; (80048fc <TIM_Base_SetConfig+0x114>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d013      	beq.n	8004828 <TIM_Base_SetConfig+0x40>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004806:	d00f      	beq.n	8004828 <TIM_Base_SetConfig+0x40>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	4a3d      	ldr	r2, [pc, #244]	; (8004900 <TIM_Base_SetConfig+0x118>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d00b      	beq.n	8004828 <TIM_Base_SetConfig+0x40>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	4a3c      	ldr	r2, [pc, #240]	; (8004904 <TIM_Base_SetConfig+0x11c>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d007      	beq.n	8004828 <TIM_Base_SetConfig+0x40>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	4a3b      	ldr	r2, [pc, #236]	; (8004908 <TIM_Base_SetConfig+0x120>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d003      	beq.n	8004828 <TIM_Base_SetConfig+0x40>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	4a3a      	ldr	r2, [pc, #232]	; (800490c <TIM_Base_SetConfig+0x124>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d108      	bne.n	800483a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800482e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	68fa      	ldr	r2, [r7, #12]
 8004836:	4313      	orrs	r3, r2
 8004838:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	4a2f      	ldr	r2, [pc, #188]	; (80048fc <TIM_Base_SetConfig+0x114>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d02b      	beq.n	800489a <TIM_Base_SetConfig+0xb2>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004848:	d027      	beq.n	800489a <TIM_Base_SetConfig+0xb2>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	4a2c      	ldr	r2, [pc, #176]	; (8004900 <TIM_Base_SetConfig+0x118>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d023      	beq.n	800489a <TIM_Base_SetConfig+0xb2>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	4a2b      	ldr	r2, [pc, #172]	; (8004904 <TIM_Base_SetConfig+0x11c>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d01f      	beq.n	800489a <TIM_Base_SetConfig+0xb2>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	4a2a      	ldr	r2, [pc, #168]	; (8004908 <TIM_Base_SetConfig+0x120>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d01b      	beq.n	800489a <TIM_Base_SetConfig+0xb2>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	4a29      	ldr	r2, [pc, #164]	; (800490c <TIM_Base_SetConfig+0x124>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d017      	beq.n	800489a <TIM_Base_SetConfig+0xb2>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	4a28      	ldr	r2, [pc, #160]	; (8004910 <TIM_Base_SetConfig+0x128>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d013      	beq.n	800489a <TIM_Base_SetConfig+0xb2>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	4a27      	ldr	r2, [pc, #156]	; (8004914 <TIM_Base_SetConfig+0x12c>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d00f      	beq.n	800489a <TIM_Base_SetConfig+0xb2>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	4a26      	ldr	r2, [pc, #152]	; (8004918 <TIM_Base_SetConfig+0x130>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d00b      	beq.n	800489a <TIM_Base_SetConfig+0xb2>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	4a25      	ldr	r2, [pc, #148]	; (800491c <TIM_Base_SetConfig+0x134>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d007      	beq.n	800489a <TIM_Base_SetConfig+0xb2>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	4a24      	ldr	r2, [pc, #144]	; (8004920 <TIM_Base_SetConfig+0x138>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d003      	beq.n	800489a <TIM_Base_SetConfig+0xb2>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	4a23      	ldr	r2, [pc, #140]	; (8004924 <TIM_Base_SetConfig+0x13c>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d108      	bne.n	80048ac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	68db      	ldr	r3, [r3, #12]
 80048a6:	68fa      	ldr	r2, [r7, #12]
 80048a8:	4313      	orrs	r3, r2
 80048aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	695b      	ldr	r3, [r3, #20]
 80048b6:	4313      	orrs	r3, r2
 80048b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	68fa      	ldr	r2, [r7, #12]
 80048be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	689a      	ldr	r2, [r3, #8]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	4a0a      	ldr	r2, [pc, #40]	; (80048fc <TIM_Base_SetConfig+0x114>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d003      	beq.n	80048e0 <TIM_Base_SetConfig+0xf8>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	4a0c      	ldr	r2, [pc, #48]	; (800490c <TIM_Base_SetConfig+0x124>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d103      	bne.n	80048e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	691a      	ldr	r2, [r3, #16]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2201      	movs	r2, #1
 80048ec:	615a      	str	r2, [r3, #20]
}
 80048ee:	bf00      	nop
 80048f0:	3714      	adds	r7, #20
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr
 80048fa:	bf00      	nop
 80048fc:	40010000 	.word	0x40010000
 8004900:	40000400 	.word	0x40000400
 8004904:	40000800 	.word	0x40000800
 8004908:	40000c00 	.word	0x40000c00
 800490c:	40010400 	.word	0x40010400
 8004910:	40014000 	.word	0x40014000
 8004914:	40014400 	.word	0x40014400
 8004918:	40014800 	.word	0x40014800
 800491c:	40001800 	.word	0x40001800
 8004920:	40001c00 	.word	0x40001c00
 8004924:	40002000 	.word	0x40002000

08004928 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004928:	b480      	push	{r7}
 800492a:	b087      	sub	sp, #28
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
 8004930:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6a1b      	ldr	r3, [r3, #32]
 8004936:	f023 0201 	bic.w	r2, r3, #1
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6a1b      	ldr	r3, [r3, #32]
 8004942:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	699b      	ldr	r3, [r3, #24]
 800494e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004956:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f023 0303 	bic.w	r3, r3, #3
 800495e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	68fa      	ldr	r2, [r7, #12]
 8004966:	4313      	orrs	r3, r2
 8004968:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	f023 0302 	bic.w	r3, r3, #2
 8004970:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	697a      	ldr	r2, [r7, #20]
 8004978:	4313      	orrs	r3, r2
 800497a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	4a20      	ldr	r2, [pc, #128]	; (8004a00 <TIM_OC1_SetConfig+0xd8>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d003      	beq.n	800498c <TIM_OC1_SetConfig+0x64>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	4a1f      	ldr	r2, [pc, #124]	; (8004a04 <TIM_OC1_SetConfig+0xdc>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d10c      	bne.n	80049a6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	f023 0308 	bic.w	r3, r3, #8
 8004992:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	68db      	ldr	r3, [r3, #12]
 8004998:	697a      	ldr	r2, [r7, #20]
 800499a:	4313      	orrs	r3, r2
 800499c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	f023 0304 	bic.w	r3, r3, #4
 80049a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	4a15      	ldr	r2, [pc, #84]	; (8004a00 <TIM_OC1_SetConfig+0xd8>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d003      	beq.n	80049b6 <TIM_OC1_SetConfig+0x8e>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	4a14      	ldr	r2, [pc, #80]	; (8004a04 <TIM_OC1_SetConfig+0xdc>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d111      	bne.n	80049da <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80049c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	695b      	ldr	r3, [r3, #20]
 80049ca:	693a      	ldr	r2, [r7, #16]
 80049cc:	4313      	orrs	r3, r2
 80049ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	699b      	ldr	r3, [r3, #24]
 80049d4:	693a      	ldr	r2, [r7, #16]
 80049d6:	4313      	orrs	r3, r2
 80049d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	693a      	ldr	r2, [r7, #16]
 80049de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	68fa      	ldr	r2, [r7, #12]
 80049e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	685a      	ldr	r2, [r3, #4]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	697a      	ldr	r2, [r7, #20]
 80049f2:	621a      	str	r2, [r3, #32]
}
 80049f4:	bf00      	nop
 80049f6:	371c      	adds	r7, #28
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr
 8004a00:	40010000 	.word	0x40010000
 8004a04:	40010400 	.word	0x40010400

08004a08 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b087      	sub	sp, #28
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
 8004a10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6a1b      	ldr	r3, [r3, #32]
 8004a16:	f023 0210 	bic.w	r2, r3, #16
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6a1b      	ldr	r3, [r3, #32]
 8004a22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	699b      	ldr	r3, [r3, #24]
 8004a2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	021b      	lsls	r3, r3, #8
 8004a46:	68fa      	ldr	r2, [r7, #12]
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	f023 0320 	bic.w	r3, r3, #32
 8004a52:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	011b      	lsls	r3, r3, #4
 8004a5a:	697a      	ldr	r2, [r7, #20]
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	4a22      	ldr	r2, [pc, #136]	; (8004aec <TIM_OC2_SetConfig+0xe4>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d003      	beq.n	8004a70 <TIM_OC2_SetConfig+0x68>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	4a21      	ldr	r2, [pc, #132]	; (8004af0 <TIM_OC2_SetConfig+0xe8>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d10d      	bne.n	8004a8c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	68db      	ldr	r3, [r3, #12]
 8004a7c:	011b      	lsls	r3, r3, #4
 8004a7e:	697a      	ldr	r2, [r7, #20]
 8004a80:	4313      	orrs	r3, r2
 8004a82:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a8a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	4a17      	ldr	r2, [pc, #92]	; (8004aec <TIM_OC2_SetConfig+0xe4>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d003      	beq.n	8004a9c <TIM_OC2_SetConfig+0x94>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	4a16      	ldr	r2, [pc, #88]	; (8004af0 <TIM_OC2_SetConfig+0xe8>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d113      	bne.n	8004ac4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004aa2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004aaa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	695b      	ldr	r3, [r3, #20]
 8004ab0:	009b      	lsls	r3, r3, #2
 8004ab2:	693a      	ldr	r2, [r7, #16]
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	699b      	ldr	r3, [r3, #24]
 8004abc:	009b      	lsls	r3, r3, #2
 8004abe:	693a      	ldr	r2, [r7, #16]
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	693a      	ldr	r2, [r7, #16]
 8004ac8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	68fa      	ldr	r2, [r7, #12]
 8004ace:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	685a      	ldr	r2, [r3, #4]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	697a      	ldr	r2, [r7, #20]
 8004adc:	621a      	str	r2, [r3, #32]
}
 8004ade:	bf00      	nop
 8004ae0:	371c      	adds	r7, #28
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae8:	4770      	bx	lr
 8004aea:	bf00      	nop
 8004aec:	40010000 	.word	0x40010000
 8004af0:	40010400 	.word	0x40010400

08004af4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b087      	sub	sp, #28
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
 8004afc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6a1b      	ldr	r3, [r3, #32]
 8004b02:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6a1b      	ldr	r3, [r3, #32]
 8004b0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	69db      	ldr	r3, [r3, #28]
 8004b1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f023 0303 	bic.w	r3, r3, #3
 8004b2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	68fa      	ldr	r2, [r7, #12]
 8004b32:	4313      	orrs	r3, r2
 8004b34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	689b      	ldr	r3, [r3, #8]
 8004b42:	021b      	lsls	r3, r3, #8
 8004b44:	697a      	ldr	r2, [r7, #20]
 8004b46:	4313      	orrs	r3, r2
 8004b48:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	4a21      	ldr	r2, [pc, #132]	; (8004bd4 <TIM_OC3_SetConfig+0xe0>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d003      	beq.n	8004b5a <TIM_OC3_SetConfig+0x66>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	4a20      	ldr	r2, [pc, #128]	; (8004bd8 <TIM_OC3_SetConfig+0xe4>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d10d      	bne.n	8004b76 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b60:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	68db      	ldr	r3, [r3, #12]
 8004b66:	021b      	lsls	r3, r3, #8
 8004b68:	697a      	ldr	r2, [r7, #20]
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	4a16      	ldr	r2, [pc, #88]	; (8004bd4 <TIM_OC3_SetConfig+0xe0>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d003      	beq.n	8004b86 <TIM_OC3_SetConfig+0x92>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	4a15      	ldr	r2, [pc, #84]	; (8004bd8 <TIM_OC3_SetConfig+0xe4>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d113      	bne.n	8004bae <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004b8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004b94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	695b      	ldr	r3, [r3, #20]
 8004b9a:	011b      	lsls	r3, r3, #4
 8004b9c:	693a      	ldr	r2, [r7, #16]
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	699b      	ldr	r3, [r3, #24]
 8004ba6:	011b      	lsls	r3, r3, #4
 8004ba8:	693a      	ldr	r2, [r7, #16]
 8004baa:	4313      	orrs	r3, r2
 8004bac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	693a      	ldr	r2, [r7, #16]
 8004bb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	68fa      	ldr	r2, [r7, #12]
 8004bb8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	685a      	ldr	r2, [r3, #4]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	697a      	ldr	r2, [r7, #20]
 8004bc6:	621a      	str	r2, [r3, #32]
}
 8004bc8:	bf00      	nop
 8004bca:	371c      	adds	r7, #28
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr
 8004bd4:	40010000 	.word	0x40010000
 8004bd8:	40010400 	.word	0x40010400

08004bdc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b087      	sub	sp, #28
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
 8004be4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6a1b      	ldr	r3, [r3, #32]
 8004bea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6a1b      	ldr	r3, [r3, #32]
 8004bf6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	69db      	ldr	r3, [r3, #28]
 8004c02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	021b      	lsls	r3, r3, #8
 8004c1a:	68fa      	ldr	r2, [r7, #12]
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c26:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	689b      	ldr	r3, [r3, #8]
 8004c2c:	031b      	lsls	r3, r3, #12
 8004c2e:	693a      	ldr	r2, [r7, #16]
 8004c30:	4313      	orrs	r3, r2
 8004c32:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	4a12      	ldr	r2, [pc, #72]	; (8004c80 <TIM_OC4_SetConfig+0xa4>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d003      	beq.n	8004c44 <TIM_OC4_SetConfig+0x68>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	4a11      	ldr	r2, [pc, #68]	; (8004c84 <TIM_OC4_SetConfig+0xa8>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d109      	bne.n	8004c58 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c4a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	695b      	ldr	r3, [r3, #20]
 8004c50:	019b      	lsls	r3, r3, #6
 8004c52:	697a      	ldr	r2, [r7, #20]
 8004c54:	4313      	orrs	r3, r2
 8004c56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	697a      	ldr	r2, [r7, #20]
 8004c5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	68fa      	ldr	r2, [r7, #12]
 8004c62:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	685a      	ldr	r2, [r3, #4]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	693a      	ldr	r2, [r7, #16]
 8004c70:	621a      	str	r2, [r3, #32]
}
 8004c72:	bf00      	nop
 8004c74:	371c      	adds	r7, #28
 8004c76:	46bd      	mov	sp, r7
 8004c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7c:	4770      	bx	lr
 8004c7e:	bf00      	nop
 8004c80:	40010000 	.word	0x40010000
 8004c84:	40010400 	.word	0x40010400

08004c88 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b086      	sub	sp, #24
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
 8004c90:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ca0:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	697a      	ldr	r2, [r7, #20]
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	f023 0307 	bic.w	r3, r3, #7
 8004cb2:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	697a      	ldr	r2, [r7, #20]
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	697a      	ldr	r2, [r7, #20]
 8004cc4:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	2b70      	cmp	r3, #112	; 0x70
 8004ccc:	d01a      	beq.n	8004d04 <TIM_SlaveTimer_SetConfig+0x7c>
 8004cce:	2b70      	cmp	r3, #112	; 0x70
 8004cd0:	d860      	bhi.n	8004d94 <TIM_SlaveTimer_SetConfig+0x10c>
 8004cd2:	2b60      	cmp	r3, #96	; 0x60
 8004cd4:	d054      	beq.n	8004d80 <TIM_SlaveTimer_SetConfig+0xf8>
 8004cd6:	2b60      	cmp	r3, #96	; 0x60
 8004cd8:	d85c      	bhi.n	8004d94 <TIM_SlaveTimer_SetConfig+0x10c>
 8004cda:	2b50      	cmp	r3, #80	; 0x50
 8004cdc:	d046      	beq.n	8004d6c <TIM_SlaveTimer_SetConfig+0xe4>
 8004cde:	2b50      	cmp	r3, #80	; 0x50
 8004ce0:	d858      	bhi.n	8004d94 <TIM_SlaveTimer_SetConfig+0x10c>
 8004ce2:	2b40      	cmp	r3, #64	; 0x40
 8004ce4:	d019      	beq.n	8004d1a <TIM_SlaveTimer_SetConfig+0x92>
 8004ce6:	2b40      	cmp	r3, #64	; 0x40
 8004ce8:	d854      	bhi.n	8004d94 <TIM_SlaveTimer_SetConfig+0x10c>
 8004cea:	2b30      	cmp	r3, #48	; 0x30
 8004cec:	d054      	beq.n	8004d98 <TIM_SlaveTimer_SetConfig+0x110>
 8004cee:	2b30      	cmp	r3, #48	; 0x30
 8004cf0:	d850      	bhi.n	8004d94 <TIM_SlaveTimer_SetConfig+0x10c>
 8004cf2:	2b20      	cmp	r3, #32
 8004cf4:	d050      	beq.n	8004d98 <TIM_SlaveTimer_SetConfig+0x110>
 8004cf6:	2b20      	cmp	r3, #32
 8004cf8:	d84c      	bhi.n	8004d94 <TIM_SlaveTimer_SetConfig+0x10c>
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d04c      	beq.n	8004d98 <TIM_SlaveTimer_SetConfig+0x110>
 8004cfe:	2b10      	cmp	r3, #16
 8004d00:	d04a      	beq.n	8004d98 <TIM_SlaveTimer_SetConfig+0x110>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 8004d02:	e047      	b.n	8004d94 <TIM_SlaveTimer_SetConfig+0x10c>
      TIM_ETR_SetConfig(htim->Instance,
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6818      	ldr	r0, [r3, #0]
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	68d9      	ldr	r1, [r3, #12]
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	689a      	ldr	r2, [r3, #8]
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	691b      	ldr	r3, [r3, #16]
 8004d14:	f000 f8c0 	bl	8004e98 <TIM_ETR_SetConfig>
      break;
 8004d18:	e03f      	b.n	8004d9a <TIM_SlaveTimer_SetConfig+0x112>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	2b05      	cmp	r3, #5
 8004d20:	d101      	bne.n	8004d26 <TIM_SlaveTimer_SetConfig+0x9e>
        return HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	e03a      	b.n	8004d9c <TIM_SlaveTimer_SetConfig+0x114>
      tmpccer = htim->Instance->CCER;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	6a1b      	ldr	r3, [r3, #32]
 8004d2c:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	6a1a      	ldr	r2, [r3, #32]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f022 0201 	bic.w	r2, r2, #1
 8004d3c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	699b      	ldr	r3, [r3, #24]
 8004d44:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d4c:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	691b      	ldr	r3, [r3, #16]
 8004d52:	011b      	lsls	r3, r3, #4
 8004d54:	68fa      	ldr	r2, [r7, #12]
 8004d56:	4313      	orrs	r3, r2
 8004d58:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	68fa      	ldr	r2, [r7, #12]
 8004d60:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	693a      	ldr	r2, [r7, #16]
 8004d68:	621a      	str	r2, [r3, #32]
      break;
 8004d6a:	e016      	b.n	8004d9a <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6818      	ldr	r0, [r3, #0]
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	6899      	ldr	r1, [r3, #8]
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	691b      	ldr	r3, [r3, #16]
 8004d78:	461a      	mov	r2, r3
 8004d7a:	f000 f813 	bl	8004da4 <TIM_TI1_ConfigInputStage>
      break;
 8004d7e:	e00c      	b.n	8004d9a <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6818      	ldr	r0, [r3, #0]
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	6899      	ldr	r1, [r3, #8]
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	691b      	ldr	r3, [r3, #16]
 8004d8c:	461a      	mov	r2, r3
 8004d8e:	f000 f838 	bl	8004e02 <TIM_TI2_ConfigInputStage>
      break;
 8004d92:	e002      	b.n	8004d9a <TIM_SlaveTimer_SetConfig+0x112>
      break;
 8004d94:	bf00      	nop
 8004d96:	e000      	b.n	8004d9a <TIM_SlaveTimer_SetConfig+0x112>
        break;
 8004d98:	bf00      	nop
  }
  return HAL_OK;
 8004d9a:	2300      	movs	r3, #0
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	3718      	adds	r7, #24
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd80      	pop	{r7, pc}

08004da4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b087      	sub	sp, #28
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	60f8      	str	r0, [r7, #12]
 8004dac:	60b9      	str	r1, [r7, #8]
 8004dae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	6a1b      	ldr	r3, [r3, #32]
 8004db4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	6a1b      	ldr	r3, [r3, #32]
 8004dba:	f023 0201 	bic.w	r2, r3, #1
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	699b      	ldr	r3, [r3, #24]
 8004dc6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004dce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	011b      	lsls	r3, r3, #4
 8004dd4:	693a      	ldr	r2, [r7, #16]
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	f023 030a 	bic.w	r3, r3, #10
 8004de0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004de2:	697a      	ldr	r2, [r7, #20]
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	4313      	orrs	r3, r2
 8004de8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	693a      	ldr	r2, [r7, #16]
 8004dee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	697a      	ldr	r2, [r7, #20]
 8004df4:	621a      	str	r2, [r3, #32]
}
 8004df6:	bf00      	nop
 8004df8:	371c      	adds	r7, #28
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e00:	4770      	bx	lr

08004e02 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e02:	b480      	push	{r7}
 8004e04:	b087      	sub	sp, #28
 8004e06:	af00      	add	r7, sp, #0
 8004e08:	60f8      	str	r0, [r7, #12]
 8004e0a:	60b9      	str	r1, [r7, #8]
 8004e0c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	6a1b      	ldr	r3, [r3, #32]
 8004e12:	f023 0210 	bic.w	r2, r3, #16
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	699b      	ldr	r3, [r3, #24]
 8004e1e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	6a1b      	ldr	r3, [r3, #32]
 8004e24:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004e2c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	031b      	lsls	r3, r3, #12
 8004e32:	697a      	ldr	r2, [r7, #20]
 8004e34:	4313      	orrs	r3, r2
 8004e36:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004e3e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	011b      	lsls	r3, r3, #4
 8004e44:	693a      	ldr	r2, [r7, #16]
 8004e46:	4313      	orrs	r3, r2
 8004e48:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	697a      	ldr	r2, [r7, #20]
 8004e4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	693a      	ldr	r2, [r7, #16]
 8004e54:	621a      	str	r2, [r3, #32]
}
 8004e56:	bf00      	nop
 8004e58:	371c      	adds	r7, #28
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e60:	4770      	bx	lr

08004e62 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004e62:	b480      	push	{r7}
 8004e64:	b085      	sub	sp, #20
 8004e66:	af00      	add	r7, sp, #0
 8004e68:	6078      	str	r0, [r7, #4]
 8004e6a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e78:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e7a:	683a      	ldr	r2, [r7, #0]
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	f043 0307 	orr.w	r3, r3, #7
 8004e84:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	68fa      	ldr	r2, [r7, #12]
 8004e8a:	609a      	str	r2, [r3, #8]
}
 8004e8c:	bf00      	nop
 8004e8e:	3714      	adds	r7, #20
 8004e90:	46bd      	mov	sp, r7
 8004e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e96:	4770      	bx	lr

08004e98 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b087      	sub	sp, #28
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	60f8      	str	r0, [r7, #12]
 8004ea0:	60b9      	str	r1, [r7, #8]
 8004ea2:	607a      	str	r2, [r7, #4]
 8004ea4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004eb2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	021a      	lsls	r2, r3, #8
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	431a      	orrs	r2, r3
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	697a      	ldr	r2, [r7, #20]
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	697a      	ldr	r2, [r7, #20]
 8004eca:	609a      	str	r2, [r3, #8]
}
 8004ecc:	bf00      	nop
 8004ece:	371c      	adds	r7, #28
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed6:	4770      	bx	lr

08004ed8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b087      	sub	sp, #28
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	60f8      	str	r0, [r7, #12]
 8004ee0:	60b9      	str	r1, [r7, #8]
 8004ee2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	f003 031f 	and.w	r3, r3, #31
 8004eea:	2201      	movs	r2, #1
 8004eec:	fa02 f303 	lsl.w	r3, r2, r3
 8004ef0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	6a1a      	ldr	r2, [r3, #32]
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	43db      	mvns	r3, r3
 8004efa:	401a      	ands	r2, r3
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	6a1a      	ldr	r2, [r3, #32]
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	f003 031f 	and.w	r3, r3, #31
 8004f0a:	6879      	ldr	r1, [r7, #4]
 8004f0c:	fa01 f303 	lsl.w	r3, r1, r3
 8004f10:	431a      	orrs	r2, r3
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	621a      	str	r2, [r3, #32]
}
 8004f16:	bf00      	nop
 8004f18:	371c      	adds	r7, #28
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f20:	4770      	bx	lr
	...

08004f24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b085      	sub	sp, #20
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
 8004f2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d101      	bne.n	8004f3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f38:	2302      	movs	r3, #2
 8004f3a:	e05a      	b.n	8004ff2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2201      	movs	r2, #1
 8004f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2202      	movs	r2, #2
 8004f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	68fa      	ldr	r2, [r7, #12]
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	68fa      	ldr	r2, [r7, #12]
 8004f74:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a21      	ldr	r2, [pc, #132]	; (8005000 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d022      	beq.n	8004fc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f88:	d01d      	beq.n	8004fc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a1d      	ldr	r2, [pc, #116]	; (8005004 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d018      	beq.n	8004fc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a1b      	ldr	r2, [pc, #108]	; (8005008 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d013      	beq.n	8004fc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a1a      	ldr	r2, [pc, #104]	; (800500c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d00e      	beq.n	8004fc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a18      	ldr	r2, [pc, #96]	; (8005010 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d009      	beq.n	8004fc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a17      	ldr	r2, [pc, #92]	; (8005014 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d004      	beq.n	8004fc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a15      	ldr	r2, [pc, #84]	; (8005018 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d10c      	bne.n	8004fe0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fcc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	68ba      	ldr	r2, [r7, #8]
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	68ba      	ldr	r2, [r7, #8]
 8004fde:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2200      	movs	r2, #0
 8004fec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ff0:	2300      	movs	r3, #0
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	3714      	adds	r7, #20
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffc:	4770      	bx	lr
 8004ffe:	bf00      	nop
 8005000:	40010000 	.word	0x40010000
 8005004:	40000400 	.word	0x40000400
 8005008:	40000800 	.word	0x40000800
 800500c:	40000c00 	.word	0x40000c00
 8005010:	40010400 	.word	0x40010400
 8005014:	40014000 	.word	0x40014000
 8005018:	40001800 	.word	0x40001800

0800501c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800501c:	b480      	push	{r7}
 800501e:	b085      	sub	sp, #20
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
 8005024:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005026:	2300      	movs	r3, #0
 8005028:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005030:	2b01      	cmp	r3, #1
 8005032:	d101      	bne.n	8005038 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005034:	2302      	movs	r3, #2
 8005036:	e03d      	b.n	80050b4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2201      	movs	r2, #1
 800503c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	68db      	ldr	r3, [r3, #12]
 800504a:	4313      	orrs	r3, r2
 800504c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	689b      	ldr	r3, [r3, #8]
 8005058:	4313      	orrs	r3, r2
 800505a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	4313      	orrs	r3, r2
 8005068:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4313      	orrs	r3, r2
 8005076:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	691b      	ldr	r3, [r3, #16]
 8005082:	4313      	orrs	r3, r2
 8005084:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	695b      	ldr	r3, [r3, #20]
 8005090:	4313      	orrs	r3, r2
 8005092:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	69db      	ldr	r3, [r3, #28]
 800509e:	4313      	orrs	r3, r2
 80050a0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	68fa      	ldr	r2, [r7, #12]
 80050a8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2200      	movs	r2, #0
 80050ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80050b2:	2300      	movs	r3, #0
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	3714      	adds	r7, #20
 80050b8:	46bd      	mov	sp, r7
 80050ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050be:	4770      	bx	lr

080050c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b083      	sub	sp, #12
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80050c8:	bf00      	nop
 80050ca:	370c      	adds	r7, #12
 80050cc:	46bd      	mov	sp, r7
 80050ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d2:	4770      	bx	lr

080050d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b083      	sub	sp, #12
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80050dc:	bf00      	nop
 80050de:	370c      	adds	r7, #12
 80050e0:	46bd      	mov	sp, r7
 80050e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e6:	4770      	bx	lr

080050e8 <__libc_init_array>:
 80050e8:	b570      	push	{r4, r5, r6, lr}
 80050ea:	4d0d      	ldr	r5, [pc, #52]	; (8005120 <__libc_init_array+0x38>)
 80050ec:	4c0d      	ldr	r4, [pc, #52]	; (8005124 <__libc_init_array+0x3c>)
 80050ee:	1b64      	subs	r4, r4, r5
 80050f0:	10a4      	asrs	r4, r4, #2
 80050f2:	2600      	movs	r6, #0
 80050f4:	42a6      	cmp	r6, r4
 80050f6:	d109      	bne.n	800510c <__libc_init_array+0x24>
 80050f8:	4d0b      	ldr	r5, [pc, #44]	; (8005128 <__libc_init_array+0x40>)
 80050fa:	4c0c      	ldr	r4, [pc, #48]	; (800512c <__libc_init_array+0x44>)
 80050fc:	f000 f820 	bl	8005140 <_init>
 8005100:	1b64      	subs	r4, r4, r5
 8005102:	10a4      	asrs	r4, r4, #2
 8005104:	2600      	movs	r6, #0
 8005106:	42a6      	cmp	r6, r4
 8005108:	d105      	bne.n	8005116 <__libc_init_array+0x2e>
 800510a:	bd70      	pop	{r4, r5, r6, pc}
 800510c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005110:	4798      	blx	r3
 8005112:	3601      	adds	r6, #1
 8005114:	e7ee      	b.n	80050f4 <__libc_init_array+0xc>
 8005116:	f855 3b04 	ldr.w	r3, [r5], #4
 800511a:	4798      	blx	r3
 800511c:	3601      	adds	r6, #1
 800511e:	e7f2      	b.n	8005106 <__libc_init_array+0x1e>
 8005120:	08005194 	.word	0x08005194
 8005124:	08005194 	.word	0x08005194
 8005128:	08005194 	.word	0x08005194
 800512c:	08005198 	.word	0x08005198

08005130 <memset>:
 8005130:	4402      	add	r2, r0
 8005132:	4603      	mov	r3, r0
 8005134:	4293      	cmp	r3, r2
 8005136:	d100      	bne.n	800513a <memset+0xa>
 8005138:	4770      	bx	lr
 800513a:	f803 1b01 	strb.w	r1, [r3], #1
 800513e:	e7f9      	b.n	8005134 <memset+0x4>

08005140 <_init>:
 8005140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005142:	bf00      	nop
 8005144:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005146:	bc08      	pop	{r3}
 8005148:	469e      	mov	lr, r3
 800514a:	4770      	bx	lr

0800514c <_fini>:
 800514c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800514e:	bf00      	nop
 8005150:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005152:	bc08      	pop	{r3}
 8005154:	469e      	mov	lr, r3
 8005156:	4770      	bx	lr
